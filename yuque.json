[
  {
    "id": 48056779,
    "slug": "xu49w1",
    "title": "知识汇总",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"plWsH\"></a>\n## JS的模块化方案\n在浏览器端，<br />有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。<br />有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。<br />在NodeJS端，有CommonJS方案，它是同步加载的\n<a name=\"lktNp\"></a>\n## JS小数点计算为什么会丢失精度\n<a name=\"S94fH\"></a>\n## JS如何精确浮点计算\n例如：如何实现0.1+0.2=0.3\n<a name=\"BIXCc\"></a>\n## JS如何进行大数计算\nInt类型超出最大安全数的计算\n",
    "body_draft": "<a name=\"plWsH\"></a>\n## JS的模块化方案\n在浏览器端，<br />有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。<br />有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。<br />在NodeJS端，有CommonJS方案，它是同步加载的\n<a name=\"lktNp\"></a>\n## JS小数点计算为什么会丢失精度\n<a name=\"S94fH\"></a>\n## JS如何精确浮点计算\n例如：如何实现0.1+0.2=0.3\n<a name=\"BIXCc\"></a>\n## JS如何进行大数计算\nInt类型超出最大安全数的计算\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h2 id=\"plWsH\"><span class=\"ne-text\">JS的模块化方案</span></h2><p id=\"u3131b042\" class=\"ne-p\"><span class=\"ne-text\">在浏览器端，</span></p><p id=\"u44f31523\" class=\"ne-p\"><span class=\"ne-text\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p id=\"u2c73e080\" class=\"ne-p\"><span class=\"ne-text\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p id=\"ua43b68f2\" class=\"ne-p\"><span class=\"ne-text\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 id=\"lktNp\"><span class=\"ne-text\">JS小数点计算为什么会丢失精度</span></h2><h2 id=\"S94fH\"><span class=\"ne-text\">JS如何精确浮点计算</span></h2><p id=\"u24ecc5dd\" class=\"ne-p\"><span class=\"ne-text\">例如：如何实现0.1+0.2=0.3</span></p><h2 id=\"BIXCc\"><span class=\"ne-text\">JS如何进行大数计算</span></h2><p id=\"ud36d247d\" class=\"ne-p\"><span class=\"ne-text\">Int类型超出最大安全数的计算</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"plWsH\" id=\"plWsH\"><span data-lake-id=\"u075c8a20\" id=\"u075c8a20\">JS的模块化方案</span></h2><p data-lake-id=\"u3131b042\" id=\"u3131b042\"><span data-lake-id=\"u3b4c030b\" id=\"u3b4c030b\">在浏览器端，</span></p><p data-lake-id=\"u44f31523\" id=\"u44f31523\"><span data-lake-id=\"u9c4f4ae9\" id=\"u9c4f4ae9\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p data-lake-id=\"u2c73e080\" id=\"u2c73e080\"><span data-lake-id=\"u1748cbf3\" id=\"u1748cbf3\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p data-lake-id=\"ua43b68f2\" id=\"ua43b68f2\"><span data-lake-id=\"u895caf32\" id=\"u895caf32\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 data-lake-id=\"lktNp\" id=\"lktNp\"><span data-lake-id=\"u7186d5e2\" id=\"u7186d5e2\">JS小数点计算为什么会丢失精度</span></h2><h2 data-lake-id=\"S94fH\" id=\"S94fH\"><span data-lake-id=\"u1b27a0db\" id=\"u1b27a0db\">JS如何精确浮点计算</span></h2><p data-lake-id=\"u24ecc5dd\" id=\"u24ecc5dd\"><span data-lake-id=\"u0335ec3a\" id=\"u0335ec3a\">例如：如何实现0.1+0.2=0.3</span></p><h2 data-lake-id=\"BIXCc\" id=\"BIXCc\"><span data-lake-id=\"udb7a658b\" id=\"udb7a658b\">JS如何进行大数计算</span></h2><p data-lake-id=\"ud36d247d\" id=\"ud36d247d\"><span data-lake-id=\"u88a04990\" id=\"u88a04990\">Int类型超出最大安全数的计算</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"plWsH\" id=\"plWsH\"><span data-lake-id=\"u075c8a20\" id=\"u075c8a20\">JS的模块化方案</span></h2><p data-lake-id=\"u3131b042\" id=\"u3131b042\"><span data-lake-id=\"u3b4c030b\" id=\"u3b4c030b\">在浏览器端，</span></p><p data-lake-id=\"u44f31523\" id=\"u44f31523\"><span data-lake-id=\"u9c4f4ae9\" id=\"u9c4f4ae9\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p data-lake-id=\"u2c73e080\" id=\"u2c73e080\"><span data-lake-id=\"u1748cbf3\" id=\"u1748cbf3\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p data-lake-id=\"ua43b68f2\" id=\"ua43b68f2\"><span data-lake-id=\"u895caf32\" id=\"u895caf32\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 data-lake-id=\"lktNp\" id=\"lktNp\"><span data-lake-id=\"u7186d5e2\" id=\"u7186d5e2\">JS小数点计算为什么会丢失精度</span></h2><h2 data-lake-id=\"S94fH\" id=\"S94fH\"><span data-lake-id=\"u1b27a0db\" id=\"u1b27a0db\">JS如何精确浮点计算</span></h2><p data-lake-id=\"u24ecc5dd\" id=\"u24ecc5dd\"><span data-lake-id=\"u0335ec3a\" id=\"u0335ec3a\">例如：如何实现0.1+0.2=0.3</span></p><h2 data-lake-id=\"BIXCc\" id=\"BIXCc\"><span data-lake-id=\"udb7a658b\" id=\"udb7a658b\">JS如何进行大数计算</span></h2><p data-lake-id=\"ud36d247d\" id=\"ud36d247d\"><span data-lake-id=\"u88a04990\" id=\"u88a04990\">Int类型超出最大安全数的计算</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-07-11T14:21:25.000Z",
    "deleted_at": null,
    "created_at": "2021-06-29T16:21:19.000Z",
    "updated_at": "2021-07-11T14:21:25.000Z",
    "published_at": "2021-07-11T14:21:25.000Z",
    "first_published_at": "2021-06-29T16:21:38.000Z",
    "word_count": 143,
    "cover": null,
    "description": "JS的模块化方案在浏览器端，有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。在NodeJS端，有CommonJS方案，它是同步加载的JS小数点计算为什么会丢失精度J...",
    "custom_description": "",
    "hits": 1,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 47883854,
    "slug": "pa2vzf",
    "title": "Webpack核心原理",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "对于`Webpack`来说，它本质上就是一个模块打包器，正是由于有了`Loader`和`Plugin`，才让`Webpack`有了其他各种各样的功能。<br />​<br />\n<a name=\"ctDnw\"></a>\n## Webpack打包后的文件\n<a name=\"SBL7J\"></a>\n### 创建项目\n```javascript\nmkdir demo && cd demo\nnpm init -y\n```\n<a name=\"MAlLJ\"></a>\n### 安装依赖\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin -D\n```\n<a name=\"unUtk\"></a>\n### 配置webpack.config.js\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n<a name=\"JuK75\"></a>\n### 运行打包\n```javascript\nyarn webpack\n```\n`Webpack4`打包结果：<br />在`Webpack4`中，`Webpack`打包后的文件只是一个`IIFE`，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和`NodeJS`中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。\n```javascript\n(function(modules) {\n\t// ...\n})\n({\n  \"./src/index.js\": function (module, exports, __webpack_require__) {\n    eval(\n      \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?\"\n    );\n  },\n\n  \"./src/test.js\": function (module, exports) {\n    eval(\n      \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?\"\n    );\n  },\n})\n```\n`Webpack5`打包结果：<br />而在`Webpack5`中，模块定义对象被放到函数内部了，函数参数是空的，代码相比`Webpack4`更少。\n```javascript\n(() => {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    \"./src/index.js\": (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) => {\n      eval(\n        \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?\"\n      );\n    },\n    \"./src/test.js\": (module) => {\n      eval(\n        \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?\"\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n})();\n```\n我们可以看到打包后是一个`IIFE`(自执行函数)，而这是为了产生一个闭包。\n<a name=\"HhrYq\"></a>\n## 单文件打包执行流程解析\n\n\n<a name=\"yQxYU\"></a>\n## Webpack打包主流程分析\n编写调试代码，新建`debug.js`：\n```javascript\nconst webpack = require(\"webpack\");\nconst options = require(\"./webpack.config.js\");\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) => {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});\n```\n打开`VS Code`调试模式，将断点定到第四行，接下来就开始分析它的主要流程：<br />\n<br />\n<br />\n<br />\n\n",
    "body_draft": "对于`Webpack`来说，它本质上就是一个模块打包器，正是由于有了`Loader`和`Plugin`，才让`Webpack`有了其他各种各样的功能。<br />​<br />\n<a name=\"ctDnw\"></a>\n## Webpack打包后的文件\n<a name=\"SBL7J\"></a>\n### 创建项目\n```javascript\nmkdir demo && cd demo\nnpm init -y\n```\n<a name=\"MAlLJ\"></a>\n### 安装依赖\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin -D\n```\n<a name=\"unUtk\"></a>\n### 配置webpack.config.js\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n<a name=\"JuK75\"></a>\n### 运行打包\n```javascript\nyarn webpack\n```\n`Webpack4`打包结果：<br />在`Webpack4`中，`Webpack`打包后的文件只是一个`IIFE`，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和`NodeJS`中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。\n```javascript\n(function(modules) {\n\t// ...\n})\n({\n  \"./src/index.js\": function (module, exports, __webpack_require__) {\n    eval(\n      \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?\"\n    );\n  },\n\n  \"./src/test.js\": function (module, exports) {\n    eval(\n      \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?\"\n    );\n  },\n})\n```\n`Webpack5`打包结果：<br />而在`Webpack5`中，模块定义对象被放到函数内部了，函数参数是空的，代码相比`Webpack4`更少。\n```javascript\n(() => {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    \"./src/index.js\": (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) => {\n      eval(\n        \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?\"\n      );\n    },\n    \"./src/test.js\": (module) => {\n      eval(\n        \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?\"\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n})();\n```\n我们可以看到打包后是一个`IIFE`(自执行函数)，而这是为了产生一个闭包。\n<a name=\"HhrYq\"></a>\n## 单文件打包执行流程解析\n\n\n<a name=\"yQxYU\"></a>\n## Webpack打包主流程分析\n编写调试代码，新建`debug.js`：\n```javascript\nconst webpack = require(\"webpack\");\nconst options = require(\"./webpack.config.js\");\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) => {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});\n```\n打开`VS Code`调试模式，将断点定到第四行，接下来就开始分析它的主要流程：<br />\n<br />\n<br />\n<br />\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u03343ffe\" class=\"ne-p\"><span class=\"ne-text\">对于</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">来说，它本质上就是一个模块打包器，正是由于有了</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Loader</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Plugin</span></code><span class=\"ne-text\">，才让</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">有了其他各种各样的功能。</span></p><p id=\"u3cdfa0c7\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"ctDnw\"><span class=\"ne-text\">Webpack打包后的文件</span></h2><h3 id=\"SBL7J\"><span class=\"ne-text\">创建项目</span></h3><pre data-language=\"javascript\" id=\"ix5EY\" class=\"ne-codeblock\">mkdir demo &amp;&amp; cd demo\nnpm init -y</pre><h3 id=\"MAlLJ\"><span class=\"ne-text\">安装依赖</span></h3><pre data-language=\"javascript\" id=\"YxIAp\" class=\"ne-codeblock\">yarn add webpack webpack-cli html-webpack-plugin -D</pre><h3 id=\"unUtk\"><span class=\"ne-text\">配置webpack.config.js</span></h3><pre data-language=\"javascript\" id=\"yudjB\" class=\"ne-codeblock\">const HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}</pre><h3 id=\"JuK75\"><span class=\"ne-text\">运行打包</span></h3><pre data-language=\"javascript\" id=\"Pja5X\" class=\"ne-codeblock\">yarn webpack</pre><p id=\"ud65d4fe8\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Webpack4</span></code><span class=\"ne-text\">打包结果：</span></p><p id=\"ueaa8ab6a\" class=\"ne-p\"><span class=\"ne-text\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #F5222D\">Webpack4</span></code><span class=\"ne-text\">中，</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">打包后的文件只是一个</span><code class=\"ne-code\"><span class=\"ne-text\">IIFE</span></code><span class=\"ne-text\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">NodeJS</span></code><span class=\"ne-text\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><pre data-language=\"javascript\" id=\"ClEZG\" class=\"ne-codeblock\">(function(modules) {\n\t// ...\n})\n({\n  &quot;./src/index.js&quot;: function (module, exports, __webpack_require__) {\n    eval(\n      &quot;const test = __webpack_require__(/*! ./test */ \\&quot;./src/test.js\\&quot;)\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?&quot;\n    );\n  },\n\n  &quot;./src/test.js&quot;: function (module, exports) {\n    eval(\n      &quot;console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?&quot;\n    );\n  },\n})</pre><p id=\"u652356d6\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Webpack5</span></code><span class=\"ne-text\">打包结果：</span></p><p id=\"uf87b4fff\" class=\"ne-p\"><span class=\"ne-text\">而在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #F5222D\">Webpack5</span></code><span class=\"ne-text\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code class=\"ne-code\"><span class=\"ne-text\">Webpack4</span></code><span class=\"ne-text\">更少。</span></p><pre data-language=\"javascript\" id=\"zHDmq\" class=\"ne-codeblock\">(() =&gt; {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    &quot;./src/index.js&quot;: (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) =&gt; {\n      eval(\n        &quot;const test = __webpack_require__(/*! ./test */ \\&quot;./src/test.js\\&quot;)\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?&quot;\n      );\n    },\n    &quot;./src/test.js&quot;: (module) =&gt; {\n      eval(\n        &quot;console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?&quot;\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(&quot;./src/index.js&quot;);\n})();</pre><p id=\"u600828a9\" class=\"ne-p\"><span class=\"ne-text\">我们可以看到打包后是一个</span><code class=\"ne-code\"><span class=\"ne-text\">IIFE</span></code><span class=\"ne-text\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 id=\"HhrYq\"><span class=\"ne-text\">单文件打包执行流程解析</span></h2><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg\" id=\"Zny3Z\" style=\"display: block; width: 100%\"><p id=\"ufb76936d\" class=\"ne-p\"><br></p><h2 id=\"yQxYU\"><span class=\"ne-text\">Webpack打包主流程分析</span></h2><p id=\"u781aa9cc\" class=\"ne-p\"><span class=\"ne-text\">编写调试代码，新建</span><code class=\"ne-code\"><span class=\"ne-text\">debug.js</span></code><span class=\"ne-text\">：</span></p><pre data-language=\"javascript\" id=\"Dfptt\" class=\"ne-codeblock\">const webpack = require(&quot;webpack&quot;);\nconst options = require(&quot;./webpack.config.js&quot;);\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) =&gt; {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});</pre><p id=\"ub9bc307a\" class=\"ne-p\"><span class=\"ne-text\">打开</span><code class=\"ne-code\"><span class=\"ne-text\">VS Code</span></code><span class=\"ne-text\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg\" id=\"vD0QU\" style=\"display: block; width: 100%\"><p id=\"u958b2523\" class=\"ne-p\"><br></p><p id=\"u20012e7c\" class=\"ne-p\"><br></p><p id=\"u272a6b93\" class=\"ne-p\"><br></p><p id=\"ud9a35259\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u03343ffe\" id=\"u03343ffe\"><span data-lake-id=\"u9758a0d4\" id=\"u9758a0d4\">对于</span><code data-lake-id=\"ud0efdc31\" id=\"ud0efdc31\"><span data-lake-id=\"ue84fc62f\" id=\"ue84fc62f\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u397581b1\" id=\"u397581b1\">来说，它本质上就是一个模块打包器，正是由于有了</span><code data-lake-id=\"ue9148be6\" id=\"ue9148be6\"><span data-lake-id=\"uf0857585\" id=\"uf0857585\" style=\"color: #FA541C\">Loader</span></code><span data-lake-id=\"u08e4d692\" id=\"u08e4d692\">和</span><code data-lake-id=\"u912c4b81\" id=\"u912c4b81\"><span data-lake-id=\"u99bd6710\" id=\"u99bd6710\" style=\"color: #FA541C\">Plugin</span></code><span data-lake-id=\"uf7f6b16f\" id=\"uf7f6b16f\">，才让</span><code data-lake-id=\"u5772b541\" id=\"u5772b541\"><span data-lake-id=\"ucbd324ab\" id=\"ucbd324ab\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"uae96b4c8\" id=\"uae96b4c8\">有了其他各种各样的功能。</span></p><p data-lake-id=\"u3cdfa0c7\" id=\"u3cdfa0c7\"><span data-lake-id=\"u4460391d\" id=\"u4460391d\">​</span><br></p><h2 data-lake-id=\"ctDnw\" id=\"ctDnw\"><span data-lake-id=\"u73be3ab4\" id=\"u73be3ab4\">Webpack打包后的文件</span></h2><h3 data-lake-id=\"SBL7J\" id=\"SBL7J\"><span data-lake-id=\"u02070376\" id=\"u02070376\">创建项目</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mkdir%20demo%20%26%26%20cd%20demo%5Cnnpm%20init%20-y%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ix5EY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MAlLJ\" id=\"MAlLJ\"><span data-lake-id=\"u5c44d19b\" id=\"u5c44d19b\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20add%20webpack%20webpack-cli%20html-webpack-plugin%20-D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YxIAp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"unUtk\" id=\"unUtk\"><span data-lake-id=\"u34d3f9fc\" id=\"u34d3f9fc\">配置webpack.config.js</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnconst%20path%20%3D%20require('path')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%20%20mode%3A%20'development'%2C%5Cn%20%20%20%20%2F%2F%20devtool%3A%20'none'%2C%20%2F%2F%20webpack5%E4%B8%AD%E4%B8%8D%E7%94%A8%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20entry%3A%20'.%2Fsrc%2Findex.js'%2C%5Cn%20%20%20%20output%3A%20%7B%5Cn%20%20%20%20%20%20%20%20filename%3A%20'built.js'%2C%5Cn%20%20%20%20%20%20%20%20path%3A%20path.resolve('dist')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20plugins%3A%20%5B%5Cn%20%20%20%20%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20template%3A%20'.%2Fsrc%2Findex.html'%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yudjB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"JuK75\" id=\"JuK75\"><span data-lake-id=\"u028a92b6\" id=\"u028a92b6\">运行打包</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20webpack%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Pja5X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud65d4fe8\" id=\"ud65d4fe8\"><code data-lake-id=\"u68c97e1b\" id=\"u68c97e1b\"><span data-lake-id=\"u77ed6abc\" id=\"u77ed6abc\">Webpack4</span></code><span data-lake-id=\"u9a6a3023\" id=\"u9a6a3023\">打包结果：</span></p><p data-lake-id=\"ueaa8ab6a\" id=\"ueaa8ab6a\"><span data-lake-id=\"u8b9ba537\" id=\"u8b9ba537\">在</span><code data-lake-id=\"u8d012619\" id=\"u8d012619\"><span data-lake-id=\"u3fe7b82c\" id=\"u3fe7b82c\" style=\"color: #F5222D\">Webpack4</span></code><span data-lake-id=\"u003f5ac3\" id=\"u003f5ac3\">中，</span><code data-lake-id=\"ud20229ac\" id=\"ud20229ac\"><span data-lake-id=\"u3bad05b0\" id=\"u3bad05b0\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u5125f346\" id=\"u5125f346\">打包后的文件只是一个</span><code data-lake-id=\"ue209df26\" id=\"ue209df26\"><span data-lake-id=\"u7e3b52aa\" id=\"u7e3b52aa\">IIFE</span></code><span data-lake-id=\"ub6384e1b\" id=\"ub6384e1b\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code data-lake-id=\"u564f214f\" id=\"u564f214f\"><span data-lake-id=\"ud6f2794c\" id=\"ud6f2794c\" style=\"color: #FA541C\">NodeJS</span></code><span data-lake-id=\"ue9ea35a9\" id=\"ue9ea35a9\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function(modules)%20%7B%5Cn%5Ct%2F%2F%20...%5Cn%7D)%5Cn(%7B%5Cn%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%5Cn%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20function%20(module%2C%20exports)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%7D)%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ClEZG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652356d6\" id=\"u652356d6\"><code data-lake-id=\"ub744351c\" id=\"ub744351c\"><span data-lake-id=\"u3b7b0c35\" id=\"u3b7b0c35\">Webpack5</span></code><span data-lake-id=\"u5ed77be5\" id=\"u5ed77be5\">打包结果：</span></p><p data-lake-id=\"uf87b4fff\" id=\"uf87b4fff\"><span data-lake-id=\"u46752b64\" id=\"u46752b64\">而在</span><code data-lake-id=\"u08bfe0d1\" id=\"u08bfe0d1\"><span data-lake-id=\"ubd6b9c8c\" id=\"ubd6b9c8c\" style=\"color: #F5222D\">Webpack5</span></code><span data-lake-id=\"u34df97e0\" id=\"u34df97e0\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code data-lake-id=\"u7fce6296\" id=\"u7fce6296\"><span data-lake-id=\"u39a3ae0d\" id=\"u39a3ae0d\">Webpack4</span></code><span data-lake-id=\"uccf68c31\" id=\"uccf68c31\">更少。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20webpackBootstrap%5Cn%20%20var%20__webpack_modules__%20%3D%20%7B%5Cn%20%20%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20(%5Cn%20%20%20%20%20%20module%2C%5Cn%20%20%20%20%20%20__unused_webpack_exports%2C%5Cn%20%20%20%20%20%20__webpack_require__%5Cn%20%20%20%20)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20(module)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20__webpack_module_cache__%20%3D%20%7B%7D%3B%5Cn%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%5Cn%20%20%20%20%2F%2F%20Check%20if%20module%20is%20in%20cache%5Cn%20%20%20%20var%20cachedModule%20%3D%20__webpack_module_cache__%5BmoduleId%5D%3B%5Cn%20%20%20%20if%20(cachedModule%20!%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20%20%20return%20cachedModule.exports%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Create%20a%20new%20module%20(and%20put%20it%20into%20the%20cache)%5Cn%20%20%20%20var%20module%20%3D%20(__webpack_module_cache__%5BmoduleId%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.id%20needed%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.loaded%20needed%5Cn%20%20%20%20%20%20exports%3A%20%7B%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Execute%20the%20module%20function%5Cn%20%20%20%20__webpack_modules__%5BmoduleId%5D(module%2C%20module.exports%2C%20__webpack_require__)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Return%20the%20exports%20of%20the%20module%5Cn%20%20%20%20return%20module.exports%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20startup%5Cn%20%20%2F%2F%20Load%20entry%20module%20and%20return%20exports%5Cn%20%20%2F%2F%20This%20entry%20module%20is%20referenced%20by%20other%20modules%20so%20it%20can't%20be%20inlined%5Cn%20%20var%20__webpack_exports__%20%3D%20__webpack_require__(%5C%22.%2Fsrc%2Findex.js%5C%22)%3B%5Cn%7D)()%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22zHDmq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u600828a9\" id=\"u600828a9\"><span data-lake-id=\"u03bcb17b\" id=\"u03bcb17b\">我们可以看到打包后是一个</span><code data-lake-id=\"uf9eba627\" id=\"uf9eba627\"><span data-lake-id=\"u84773a1d\" id=\"u84773a1d\">IIFE</span></code><span data-lake-id=\"u8c55377a\" id=\"u8c55377a\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 data-lake-id=\"HhrYq\" id=\"HhrYq\"><span data-lake-id=\"u1a7c8d95\" id=\"u1a7c8d95\">单文件打包执行流程解析</span></h2><card type=\"inline\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A-59%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%7D%2C%22id%22%3A%226669b8dc-fa82-4872-8823-4893ab0254a6%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A57%2C%22y%22%3A58.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22width%22%3A184.5332341865888%2C%22height%22%3A66.73837868480723%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%7D%2C%22id%22%3A%22e3c7a5ee-2fa9-4e35-aadb-b2d27f8a05fb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A174.73837868480723%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%7D%2C%22id%22%3A%225580b9eb-9fe0-45f1-a19a-ccd496182b50%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A90.12698418658881%2C%22y%22%3A283.52522016015774%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22width%22%3A119.1396329067056%2C%22height%22%3A56.5363088151928%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22S%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%7D%2C%22id%22%3A%226b33501f-df2f-4bf7-ba1a-30a1b2676eb2%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A293.77020056635905%2C%22y%22%3A278.54390581775414%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ewebpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22width%22%3A200.51965603759936%2C%22height%22%3A66.49893750000001%2C%22zIndex%22%3A8%2C%22rotate%22%3A0.07125669764285547%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%7D%2C%22id%22%3A%2205ff8484-a15a-48ce-ab39-714b047d4da4%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A292.8142665277654%2C%22y%22%3A133.56857243480704%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22width%22%3A201.51810658682035%2C%22height%22%3A101.16980625000019%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%7D%2C%22id%22%3A%22f950e8e6-dfb4-440d-aeb2-d769b03a34b7%22%2C%22zIndex%22%3A11%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A261.1370412360169%2C%22y%22%3A-69.43662343749997%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%3C%2Fdiv%3E%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Emodules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%3C%2Fdiv%3E%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22width%22%3A264.87255717031735%2C%22height%22%3A142.87324687499995%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%7D%2C%22id%22%3A%22b0382646-4e8d-45db-bf7d-cee542902add%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A557.59375%2C%22y%22%3A-52.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%3C%2Fdiv%3E%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22width%22%3A216.20788875780175%2C%22height%22%3A108.80597485591898%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%7D%2C%22id%22%3A%2239255463-3751-45a5-a12f-8f642c1e1d06%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A123.15347555980713%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3C%2Fdiv%3E%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A16%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%7D%2C%22id%22%3A%22710e27a8-94d8-4017-aa54-731318925607%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A299.48530337207467%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%BB%93%E6%9D%9F%3C%2Fdiv%3E%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A18%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B40.40081787109375%2C-90.6339340209961%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A528%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg%22%2C%22search%22%3A%22%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82webpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8modules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%BB%93%E6%9D%9F%22%2C%22__height%22%3A510%2C%22id%22%3A%22Zny3Z%22%2C%22height%22%3A510%7D\"></card><p data-lake-id=\"ufb76936d\" id=\"ufb76936d\"><br></p><h2 data-lake-id=\"yQxYU\" id=\"yQxYU\"><span data-lake-id=\"ucf54ba8b\" id=\"ucf54ba8b\">Webpack打包主流程分析</span></h2><p data-lake-id=\"u781aa9cc\" id=\"u781aa9cc\"><span data-lake-id=\"u5236427d\" id=\"u5236427d\">编写调试代码，新建</span><code data-lake-id=\"u2fa4cc92\" id=\"u2fa4cc92\"><span data-lake-id=\"u71e802dc\" id=\"u71e802dc\">debug.js</span></code><span data-lake-id=\"u88a0df04\" id=\"u88a0df04\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20webpack%20%3D%20require(%5C%22webpack%5C%22)%3B%5Cnconst%20options%20%3D%20require(%5C%22.%2Fwebpack.config.js%5C%22)%3B%5Cn%5Cnconst%20compiler%20%3D%20webpack(options)%3B%5Cn%5Cncompiler.run((err%2C%20stats)%20%3D%3E%20%7B%5Cn%20%20console.log(err)%3B%5Cn%20%20console.log(%5Cn%20%20%20%20stats.toJson(%7B%5Cn%20%20%20%20%20%20entries%3A%20true%2C%5Cn%20%20%20%20%20%20chunks%3A%20false%2C%5Cn%20%20%20%20%20%20modules%3A%20false%2C%5Cn%20%20%20%20%20%20assets%3A%20false%2C%5Cn%20%20%20%20%7D)%5Cn%20%20)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Dfptt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub9bc307a\" id=\"ub9bc307a\"><span data-lake-id=\"u3b501924\" id=\"u3b501924\">打开</span><code data-lake-id=\"ub707ff06\" id=\"ub707ff06\"><span data-lake-id=\"ud75c4717\" id=\"ud75c4717\">VS Code</span></code><span data-lake-id=\"ubf78c5cb\" id=\"ubf78c5cb\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><card type=\"inline\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A0%2C%22y%22%3A-39%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%7D%2C%22id%22%3A%22e2c2d963-9193-44fa-a9eb-00ebf6fcb204%22%2C%22zIndex%22%3A1%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-22.140625%2C%22y%22%3A103%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22width%22%3A163.125%2C%22height%22%3A77.09375%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%7D%2C%22id%22%3A%22cecb7f2b-9e6f-446d-809f-216a1c5530cb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-42.78955078125%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%3C%2Fdiv%3E%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22width%22%3A204.4228515625%2C%22height%22%3A58.3125%2C%22zIndex%22%3A4%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%7D%2C%22id%22%3A%2292fc249a-bf54-4042-8d54-74d88eda10ee%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-65.4869384765625%2C%22y%22%3A299.35302734375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22width%22%3A249.817626953125%2C%22height%22%3A65.7939453125%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%7D%2C%22id%22%3A%22a087e3bb-ae98-45c6-87db-14cfab8230a8%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-2.890625%2C%22y%22%3A395.859375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22width%22%3A124.625%2C%22height%22%3A56.78125%2C%22zIndex%22%3A8%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%7D%2C%22id%22%3A%2247f65d3f-d86a-4541-9500-d77982f1be95%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-64.40455627441406%2C%22y%22%3A504.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%2C%22width%22%3A248.80911254882812%2C%22height%22%3A121.370361328125%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22W%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%7D%2C%22id%22%3A%2249514239-3a50-4016-90ab-7d68f04120e8%22%2C%22zIndex%22%3A11%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Astart%3B%5C%22%3E%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A363.9462890625%2C%22y%22%3A-32.5%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeRun%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22width%22%3A170.4296875%2C%22height%22%3A53.5%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%7D%2C%22id%22%3A%22b98f8946-9eaa-495c-99c8-1626e0232b03%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A347.0537109375%2C%22y%22%3A90.046875%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22width%22%3A204.21484375%2C%22height%22%3A50.5%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%7D%2C%22id%22%3A%225a659f35-b290-428b-8311-9987645680ef%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A331.0537109375%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeCompile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22width%22%3A236.21484375%2C%22height%22%3A49.25%2C%22zIndex%22%3A16%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%7D%2C%22id%22%3A%22775e1574-70a0-4a22-a2f3-4b45bcbfcb17%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A358.25%2C%22y%22%3A333.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.compile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22width%22%3A181.822265625%2C%22height%22%3A45.625%2C%22zIndex%22%3A18%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%7D%2C%22id%22%3A%22489d791f-6151-410c-b24f-aa6dd4eb3792%22%2C%22zIndex%22%3A19%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A360.107421875%2C%22y%22%3A454.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.make(%E6%A0%B8%E5%BF%83)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%2C%22width%22%3A178.107421875%2C%22height%22%3A48%2C%22zIndex%22%3A20%2C%22rotate%22%3A0%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-103.10919189453125%2C-66.989013671875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A753%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg%22%2C%22search%22%3A%22%E5%BC%80%E5%A7%8B%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeRuncompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeCompilecompiler.compilecompiler.make(%E6%A0%B8%E5%BF%83)%22%2C%22__height%22%3A735%2C%22id%22%3A%22vD0QU%22%2C%22height%22%3A735%7D\"></card><p data-lake-id=\"u958b2523\" id=\"u958b2523\"><br></p><p data-lake-id=\"u20012e7c\" id=\"u20012e7c\"><br></p><p data-lake-id=\"u272a6b93\" id=\"u272a6b93\"><br></p><p data-lake-id=\"ud9a35259\" id=\"ud9a35259\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u03343ffe\" id=\"u03343ffe\"><span data-lake-id=\"u9758a0d4\" id=\"u9758a0d4\">对于</span><code data-lake-id=\"ud0efdc31\" id=\"ud0efdc31\"><span data-lake-id=\"ue84fc62f\" id=\"ue84fc62f\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u397581b1\" id=\"u397581b1\">来说，它本质上就是一个模块打包器，正是由于有了</span><code data-lake-id=\"ue9148be6\" id=\"ue9148be6\"><span data-lake-id=\"uf0857585\" id=\"uf0857585\" style=\"color: #FA541C\">Loader</span></code><span data-lake-id=\"u08e4d692\" id=\"u08e4d692\">和</span><code data-lake-id=\"u912c4b81\" id=\"u912c4b81\"><span data-lake-id=\"u99bd6710\" id=\"u99bd6710\" style=\"color: #FA541C\">Plugin</span></code><span data-lake-id=\"uf7f6b16f\" id=\"uf7f6b16f\">，才让</span><code data-lake-id=\"u5772b541\" id=\"u5772b541\"><span data-lake-id=\"ucbd324ab\" id=\"ucbd324ab\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"uae96b4c8\" id=\"uae96b4c8\">有了其他各种各样的功能。</span></p><p data-lake-id=\"u3cdfa0c7\" id=\"u3cdfa0c7\"><span data-lake-id=\"u4460391d\" id=\"u4460391d\">​</span><br></p><h2 data-lake-id=\"ctDnw\" id=\"ctDnw\"><span data-lake-id=\"u73be3ab4\" id=\"u73be3ab4\">Webpack打包后的文件</span></h2><h3 data-lake-id=\"SBL7J\" id=\"SBL7J\"><span data-lake-id=\"u02070376\" id=\"u02070376\">创建项目</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mkdir%20demo%20%26%26%20cd%20demo%5Cnnpm%20init%20-y%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ix5EY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MAlLJ\" id=\"MAlLJ\"><span data-lake-id=\"u5c44d19b\" id=\"u5c44d19b\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20add%20webpack%20webpack-cli%20html-webpack-plugin%20-D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YxIAp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"unUtk\" id=\"unUtk\"><span data-lake-id=\"u34d3f9fc\" id=\"u34d3f9fc\">配置webpack.config.js</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnconst%20path%20%3D%20require('path')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%20%20mode%3A%20'development'%2C%5Cn%20%20%20%20%2F%2F%20devtool%3A%20'none'%2C%20%2F%2F%20webpack5%E4%B8%AD%E4%B8%8D%E7%94%A8%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20entry%3A%20'.%2Fsrc%2Findex.js'%2C%5Cn%20%20%20%20output%3A%20%7B%5Cn%20%20%20%20%20%20%20%20filename%3A%20'built.js'%2C%5Cn%20%20%20%20%20%20%20%20path%3A%20path.resolve('dist')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20plugins%3A%20%5B%5Cn%20%20%20%20%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20template%3A%20'.%2Fsrc%2Findex.html'%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yudjB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"JuK75\" id=\"JuK75\"><span data-lake-id=\"u028a92b6\" id=\"u028a92b6\">运行打包</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20webpack%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Pja5X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud65d4fe8\" id=\"ud65d4fe8\"><code data-lake-id=\"u68c97e1b\" id=\"u68c97e1b\"><span data-lake-id=\"u77ed6abc\" id=\"u77ed6abc\">Webpack4</span></code><span data-lake-id=\"u9a6a3023\" id=\"u9a6a3023\">打包结果：</span></p><p data-lake-id=\"ueaa8ab6a\" id=\"ueaa8ab6a\"><span data-lake-id=\"u8b9ba537\" id=\"u8b9ba537\">在</span><code data-lake-id=\"u8d012619\" id=\"u8d012619\"><span data-lake-id=\"u3fe7b82c\" id=\"u3fe7b82c\" style=\"color: #F5222D\">Webpack4</span></code><span data-lake-id=\"u003f5ac3\" id=\"u003f5ac3\">中，</span><code data-lake-id=\"ud20229ac\" id=\"ud20229ac\"><span data-lake-id=\"u3bad05b0\" id=\"u3bad05b0\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u5125f346\" id=\"u5125f346\">打包后的文件只是一个</span><code data-lake-id=\"ue209df26\" id=\"ue209df26\"><span data-lake-id=\"u7e3b52aa\" id=\"u7e3b52aa\">IIFE</span></code><span data-lake-id=\"ub6384e1b\" id=\"ub6384e1b\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code data-lake-id=\"u564f214f\" id=\"u564f214f\"><span data-lake-id=\"ud6f2794c\" id=\"ud6f2794c\" style=\"color: #FA541C\">NodeJS</span></code><span data-lake-id=\"ue9ea35a9\" id=\"ue9ea35a9\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function(modules)%20%7B%5Cn%5Ct%2F%2F%20...%5Cn%7D)%5Cn(%7B%5Cn%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%5Cn%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20function%20(module%2C%20exports)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%7D)%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ClEZG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652356d6\" id=\"u652356d6\"><code data-lake-id=\"ub744351c\" id=\"ub744351c\"><span data-lake-id=\"u3b7b0c35\" id=\"u3b7b0c35\">Webpack5</span></code><span data-lake-id=\"u5ed77be5\" id=\"u5ed77be5\">打包结果：</span></p><p data-lake-id=\"uf87b4fff\" id=\"uf87b4fff\"><span data-lake-id=\"u46752b64\" id=\"u46752b64\">而在</span><code data-lake-id=\"u08bfe0d1\" id=\"u08bfe0d1\"><span data-lake-id=\"ubd6b9c8c\" id=\"ubd6b9c8c\" style=\"color: #F5222D\">Webpack5</span></code><span data-lake-id=\"u34df97e0\" id=\"u34df97e0\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code data-lake-id=\"u7fce6296\" id=\"u7fce6296\"><span data-lake-id=\"u39a3ae0d\" id=\"u39a3ae0d\">Webpack4</span></code><span data-lake-id=\"uccf68c31\" id=\"uccf68c31\">更少。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20webpackBootstrap%5Cn%20%20var%20__webpack_modules__%20%3D%20%7B%5Cn%20%20%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20(%5Cn%20%20%20%20%20%20module%2C%5Cn%20%20%20%20%20%20__unused_webpack_exports%2C%5Cn%20%20%20%20%20%20__webpack_require__%5Cn%20%20%20%20)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20(module)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20__webpack_module_cache__%20%3D%20%7B%7D%3B%5Cn%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%5Cn%20%20%20%20%2F%2F%20Check%20if%20module%20is%20in%20cache%5Cn%20%20%20%20var%20cachedModule%20%3D%20__webpack_module_cache__%5BmoduleId%5D%3B%5Cn%20%20%20%20if%20(cachedModule%20!%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20%20%20return%20cachedModule.exports%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Create%20a%20new%20module%20(and%20put%20it%20into%20the%20cache)%5Cn%20%20%20%20var%20module%20%3D%20(__webpack_module_cache__%5BmoduleId%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.id%20needed%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.loaded%20needed%5Cn%20%20%20%20%20%20exports%3A%20%7B%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Execute%20the%20module%20function%5Cn%20%20%20%20__webpack_modules__%5BmoduleId%5D(module%2C%20module.exports%2C%20__webpack_require__)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Return%20the%20exports%20of%20the%20module%5Cn%20%20%20%20return%20module.exports%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20startup%5Cn%20%20%2F%2F%20Load%20entry%20module%20and%20return%20exports%5Cn%20%20%2F%2F%20This%20entry%20module%20is%20referenced%20by%20other%20modules%20so%20it%20can't%20be%20inlined%5Cn%20%20var%20__webpack_exports__%20%3D%20__webpack_require__(%5C%22.%2Fsrc%2Findex.js%5C%22)%3B%5Cn%7D)()%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22zHDmq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u600828a9\" id=\"u600828a9\"><span data-lake-id=\"u03bcb17b\" id=\"u03bcb17b\">我们可以看到打包后是一个</span><code data-lake-id=\"uf9eba627\" id=\"uf9eba627\"><span data-lake-id=\"u84773a1d\" id=\"u84773a1d\">IIFE</span></code><span data-lake-id=\"u8c55377a\" id=\"u8c55377a\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 data-lake-id=\"HhrYq\" id=\"HhrYq\"><span data-lake-id=\"u1a7c8d95\" id=\"u1a7c8d95\">单文件打包执行流程解析</span></h2><card type=\"inline\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A-59%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%7D%2C%22id%22%3A%226669b8dc-fa82-4872-8823-4893ab0254a6%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A57%2C%22y%22%3A58.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22width%22%3A184.5332341865888%2C%22height%22%3A66.73837868480723%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%7D%2C%22id%22%3A%22e3c7a5ee-2fa9-4e35-aadb-b2d27f8a05fb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A174.73837868480723%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%7D%2C%22id%22%3A%225580b9eb-9fe0-45f1-a19a-ccd496182b50%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A90.12698418658881%2C%22y%22%3A283.52522016015774%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22width%22%3A119.1396329067056%2C%22height%22%3A56.5363088151928%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22S%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%7D%2C%22id%22%3A%226b33501f-df2f-4bf7-ba1a-30a1b2676eb2%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A293.77020056635905%2C%22y%22%3A278.54390581775414%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ewebpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22width%22%3A200.51965603759936%2C%22height%22%3A66.49893750000001%2C%22zIndex%22%3A8%2C%22rotate%22%3A0.07125669764285547%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%7D%2C%22id%22%3A%2205ff8484-a15a-48ce-ab39-714b047d4da4%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A292.8142665277654%2C%22y%22%3A133.56857243480704%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22width%22%3A201.51810658682035%2C%22height%22%3A101.16980625000019%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%7D%2C%22id%22%3A%22f950e8e6-dfb4-440d-aeb2-d769b03a34b7%22%2C%22zIndex%22%3A11%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A261.1370412360169%2C%22y%22%3A-69.43662343749997%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%3C%2Fdiv%3E%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Emodules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%3C%2Fdiv%3E%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22width%22%3A264.87255717031735%2C%22height%22%3A142.87324687499995%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%7D%2C%22id%22%3A%22b0382646-4e8d-45db-bf7d-cee542902add%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A557.59375%2C%22y%22%3A-52.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%3C%2Fdiv%3E%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22width%22%3A216.20788875780175%2C%22height%22%3A108.80597485591898%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%7D%2C%22id%22%3A%2239255463-3751-45a5-a12f-8f642c1e1d06%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A123.15347555980713%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3C%2Fdiv%3E%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A16%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%7D%2C%22id%22%3A%22710e27a8-94d8-4017-aa54-731318925607%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A299.48530337207467%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%BB%93%E6%9D%9F%3C%2Fdiv%3E%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A18%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B40.40081787109375%2C-90.6339340209961%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A528%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg%22%2C%22search%22%3A%22%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82webpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8modules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%BB%93%E6%9D%9F%22%2C%22__height%22%3A510%2C%22id%22%3A%22Zny3Z%22%2C%22height%22%3A510%7D\"></card><p data-lake-id=\"ufb76936d\" id=\"ufb76936d\"><br></p><h2 data-lake-id=\"yQxYU\" id=\"yQxYU\"><span data-lake-id=\"ucf54ba8b\" id=\"ucf54ba8b\">Webpack打包主流程分析</span></h2><p data-lake-id=\"u781aa9cc\" id=\"u781aa9cc\"><span data-lake-id=\"u5236427d\" id=\"u5236427d\">编写调试代码，新建</span><code data-lake-id=\"u2fa4cc92\" id=\"u2fa4cc92\"><span data-lake-id=\"u71e802dc\" id=\"u71e802dc\">debug.js</span></code><span data-lake-id=\"u88a0df04\" id=\"u88a0df04\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20webpack%20%3D%20require(%5C%22webpack%5C%22)%3B%5Cnconst%20options%20%3D%20require(%5C%22.%2Fwebpack.config.js%5C%22)%3B%5Cn%5Cnconst%20compiler%20%3D%20webpack(options)%3B%5Cn%5Cncompiler.run((err%2C%20stats)%20%3D%3E%20%7B%5Cn%20%20console.log(err)%3B%5Cn%20%20console.log(%5Cn%20%20%20%20stats.toJson(%7B%5Cn%20%20%20%20%20%20entries%3A%20true%2C%5Cn%20%20%20%20%20%20chunks%3A%20false%2C%5Cn%20%20%20%20%20%20modules%3A%20false%2C%5Cn%20%20%20%20%20%20assets%3A%20false%2C%5Cn%20%20%20%20%7D)%5Cn%20%20)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Dfptt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub9bc307a\" id=\"ub9bc307a\"><span data-lake-id=\"u3b501924\" id=\"u3b501924\">打开</span><code data-lake-id=\"ub707ff06\" id=\"ub707ff06\"><span data-lake-id=\"ud75c4717\" id=\"ud75c4717\">VS Code</span></code><span data-lake-id=\"ubf78c5cb\" id=\"ubf78c5cb\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><card type=\"inline\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A0%2C%22y%22%3A-39%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%7D%2C%22id%22%3A%22e2c2d963-9193-44fa-a9eb-00ebf6fcb204%22%2C%22zIndex%22%3A1%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-22.140625%2C%22y%22%3A103%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22width%22%3A163.125%2C%22height%22%3A77.09375%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%7D%2C%22id%22%3A%22cecb7f2b-9e6f-446d-809f-216a1c5530cb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-42.78955078125%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%3C%2Fdiv%3E%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22width%22%3A204.4228515625%2C%22height%22%3A58.3125%2C%22zIndex%22%3A4%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%7D%2C%22id%22%3A%2292fc249a-bf54-4042-8d54-74d88eda10ee%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-65.4869384765625%2C%22y%22%3A299.35302734375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22width%22%3A249.817626953125%2C%22height%22%3A65.7939453125%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%7D%2C%22id%22%3A%22a087e3bb-ae98-45c6-87db-14cfab8230a8%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-2.890625%2C%22y%22%3A395.859375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22width%22%3A124.625%2C%22height%22%3A56.78125%2C%22zIndex%22%3A8%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%7D%2C%22id%22%3A%2247f65d3f-d86a-4541-9500-d77982f1be95%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-64.40455627441406%2C%22y%22%3A504.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%2C%22width%22%3A248.80911254882812%2C%22height%22%3A121.370361328125%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22W%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%7D%2C%22id%22%3A%2249514239-3a50-4016-90ab-7d68f04120e8%22%2C%22zIndex%22%3A11%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Astart%3B%5C%22%3E%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A363.9462890625%2C%22y%22%3A-32.5%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeRun%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22width%22%3A170.4296875%2C%22height%22%3A53.5%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%7D%2C%22id%22%3A%22b98f8946-9eaa-495c-99c8-1626e0232b03%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A347.0537109375%2C%22y%22%3A90.046875%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22width%22%3A204.21484375%2C%22height%22%3A50.5%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%7D%2C%22id%22%3A%225a659f35-b290-428b-8311-9987645680ef%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A331.0537109375%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeCompile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22width%22%3A236.21484375%2C%22height%22%3A49.25%2C%22zIndex%22%3A16%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%7D%2C%22id%22%3A%22775e1574-70a0-4a22-a2f3-4b45bcbfcb17%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A358.25%2C%22y%22%3A333.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.compile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22width%22%3A181.822265625%2C%22height%22%3A45.625%2C%22zIndex%22%3A18%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%7D%2C%22id%22%3A%22489d791f-6151-410c-b24f-aa6dd4eb3792%22%2C%22zIndex%22%3A19%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A360.107421875%2C%22y%22%3A454.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.make(%E6%A0%B8%E5%BF%83)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%2C%22width%22%3A178.107421875%2C%22height%22%3A48%2C%22zIndex%22%3A20%2C%22rotate%22%3A0%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-103.10919189453125%2C-66.989013671875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A753%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg%22%2C%22search%22%3A%22%E5%BC%80%E5%A7%8B%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeRuncompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeCompilecompiler.compilecompiler.make(%E6%A0%B8%E5%BF%83)%22%2C%22__height%22%3A735%2C%22id%22%3A%22vD0QU%22%2C%22height%22%3A735%7D\"></card><p data-lake-id=\"u958b2523\" id=\"u958b2523\"><br></p><p data-lake-id=\"u20012e7c\" id=\"u20012e7c\"><br></p><p data-lake-id=\"u272a6b93\" id=\"u272a6b93\"><br></p><p data-lake-id=\"ud9a35259\" id=\"ud9a35259\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-07-01T05:40:08.000Z",
    "deleted_at": null,
    "created_at": "2021-06-27T03:49:50.000Z",
    "updated_at": "2021-07-01T05:40:08.000Z",
    "published_at": "2021-07-01T05:40:08.000Z",
    "first_published_at": "2021-06-27T03:53:34.000Z",
    "word_count": 624,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg",
    "description": "对于Webpack来说，它本质上就是一个模块打包器，正是由于有了Loader和Plugin，才让Webpack有了其他各种各样的功能。Webpack打包后的文件创建项目mkdir demo && cd demo npm init -y安装依赖yarn add webpack webpack-c...",
    "custom_description": "",
    "hits": 2,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46697798,
    "slug": "eoh5tn",
    "title": "前端工程化",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！<br />\n\n<a name=\"kTUlJ\"></a>\n## 工程化概述\n前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。<br />\n<br />当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：\n\n- 想要使用ES6+新特性，但是兼容有问题\n- 想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。\n- 想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。\n- 部署上线前需要**手动**压缩代码及资源文件，部署过程需要**手动**上传代码到服务器。\n- 多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。\n- 部分功能开发时需要等待后端服务接口提前完成\n<a name=\"EW0lj\"></a>\n### 工程化主要解决的问题\n\n- 传统语言或语法的弊端\n- 无法使用模块化/组件化\n- 重复的机械式工作\n- 代码风格统一、质量保证\n- 依赖后端服务接口支持\n- 整体依赖后端项目\n<a name=\"aUUhn\"></a>\n### 一个项目过程中工程化的表现\n一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。<br />一切重复的工作都应该被自动化，例如：创建项目一>编码一>预览/测试一>提交一>部署<br />\n\n<a name=\"aoiuJ\"></a>\n### 工程化不等工具\n工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)<br />一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli<br />\n<br />工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。<br />但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。<br />\n<br />从一个项目的开发过程开始，我们来了解前端工程化具体实现：\n<a name=\"ZxEVm\"></a>\n## 脚手架工具\n自动帮助我们创建项目基础结构，并且提供项目规范和约定。<br />看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者**提供了一套规范和约定**。<br />比如在开发类似项目时，他们都有以下特征：\n\n- 相同的组织结构\n- 相同的开发范式\n- 相同的模块依赖\n- 相同的工具配置\n- 相同的基础代码\n\n这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。<br />由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。\n<a name=\"n1S8J\"></a>\n### Yeoman\n是一个用于创建现代化web应用的脚手架工具。不同于`vue-cli`这样的工具，它更像一个脚手架的运行平台，我们可以通过`Yeoman`搭配不同的`generator`去创建任何类型的项目。也就是说，我们可以创建自己的`generator`，从而定制属于我们自己的前端的前端脚手架。<br />\n<br />但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用`vue-cli`这种专注于某个框架的脚手架。\n<a name=\"tgPov\"></a>\n### Yeoman基本使用\n<a name=\"kF8fE\"></a>\n#### 安装`Yeoman`\n```shell\nyarn global add yo\n```\nYeoman是搭配特定的generator才能使用的，所以还需要安装generator\n<a name=\"ZB9tX\"></a>\n#### 安装对应的`generator`\n```shell\nyarn global add generator-node\n```\n<a name=\"H0JOj\"></a>\n#### 通过`yo`运行`generator`\n```shell\nyo node\n```\n然后根据提示输入项目的相关信息，完成后会自动生成项目。<br />\n\n<a name=\"iGQPb\"></a>\n### Sub Generator\n有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。<br />\n<br />例如我们想运行`generator-node`子集下面的cli命令，创建一个cli应用。\n```shell\nyo node:cli\n```\n\n\n<a name=\"Vtd5i\"></a>\n## 自定义Generator\n虽然市面上也有很多`generator`，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的`generator`。<br />\n\n<a name=\"GOsVL\"></a>\n### 创建Generator模块\ngenerator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-<name>的格式命名。\n```shell\nmkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator\n```\n上述命令完成后，接下来我们打开项目，然后在项目根目录创建`generators/app/index.js`文件<br />这个文件会作为`Generator`的核心入口<br />它需要导出一个继承自`Yeoman Generator`的类<br />Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法<br />我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(\"temp.txt\"),\n             Math.random().toString()\n          )\n     }\n}\n```\n然后我们把这个模块，挂载到本地全局上\n```shell\nyarn link\n```\n接着就可以使用\n```shell\nyo simple  // simple 是上面创建项目定义的项目名称\n```\n<a name=\"K2W5G\"></a>\n### 根据模板创建文件\n很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。<br />在app目录下创建`templates/foo.txt`文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记`<%= title %>`动态输出内容，也可以做一些判断、循环的操作。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(\"foo.txt\")\n          // 输出目标路径\n          const output = this.destinationPath(\"foo.txt\")\n          // 模板数据上下文\n          const context = {title: \"Hello xsl~\"}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}\n```\n相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。<br />\n\n<a name=\"XepZf\"></a>\n### 接收用户输入\n```javascript\n// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: \"input\",\n      name: \"name\",\n      message:\"Your project name\",\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers => {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}\n```\n<a name=\"eXNQ4\"></a>\n## Plop\n一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。<br />在一个项目当中使用Plop，需要以下几个步骤：\n\n1. 将Plop模块作为项目开发依赖安装\n1. 在项目根目录下创建一个plopfile.js文件\n1. 在plopfile.js文件中定义脚手架任务\n1. 编写用于生成特定类型文件的模板\n1. 通过Plop提供的CLI运行脚手架任务\n\n\n\n<a name=\"bmH42\"></a>\n## 脚手架工作原理\n脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。<br />\n\n<a name=\"kzFtP\"></a>\n## 自动化构建\n> 一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。\n\n将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。<br />\n<br />自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。<br />\n\n<a name=\"We1Dg\"></a>\n## NPM Scripts自动构建工作流\n可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。<br />在启动serve之前构建项目：\n```json\n// ...\n\"scripts\": {\n\t\"preserve\": \"yarn build\",\n  \"serve\": \"browser-sync .\"\n}\n```\n同时执行多个任务：\n```shell\nyarn add npm-run-all\n```\n然后在scripts中添加：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync .\",\n  \"start\": \"run-p build serve\"\n}\n```\n监听文件变化并重新编译，监听文件变化并自动热更新：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync . --files \\“css/*.css\\\"\",\n  \"start\": \"run-p build serve\"\n}\n```\n\n\n<a name=\"MTfJX\"></a>\n## 常见的自动化构建工具\n> 严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处\n\n<a name=\"mUW98\"></a>\n### Grunt\n最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。<br />\n\n<a name=\"Gvli3\"></a>\n### Gulp\n对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。<br />\n\n<a name=\"c0d3i\"></a>\n### FIS\n百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。<br />​\n\n",
    "body_draft": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！<br />\n\n<a name=\"kTUlJ\"></a>\n## 工程化概述\n前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。<br />\n<br />当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：\n\n- 想要使用ES6+新特性，但是兼容有问题\n- 想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。\n- 想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。\n- 部署上线前需要**手动**压缩代码及资源文件，部署过程需要**手动**上传代码到服务器。\n- 多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。\n- 部分功能开发时需要等待后端服务接口提前完成\n<a name=\"EW0lj\"></a>\n### 工程化主要解决的问题\n\n- 传统语言或语法的弊端\n- 无法使用模块化/组件化\n- 重复的机械式工作\n- 代码风格统一、质量保证\n- 依赖后端服务接口支持\n- 整体依赖后端项目\n<a name=\"aUUhn\"></a>\n### 一个项目过程中工程化的表现\n一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。<br />一切重复的工作都应该被自动化，例如：创建项目一>编码一>预览/测试一>提交一>部署<br />\n\n<a name=\"aoiuJ\"></a>\n### 工程化不等工具\n工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)<br />一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli<br />\n<br />工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。<br />但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。<br />\n<br />从一个项目的开发过程开始，我们来了解前端工程化具体实现：\n<a name=\"ZxEVm\"></a>\n## 脚手架工具\n自动帮助我们创建项目基础结构，并且提供项目规范和约定。<br />看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者**提供了一套规范和约定**。<br />比如在开发类似项目时，他们都有以下特征：\n\n- 相同的组织结构\n- 相同的开发范式\n- 相同的模块依赖\n- 相同的工具配置\n- 相同的基础代码\n\n这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。<br />由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。\n<a name=\"n1S8J\"></a>\n### Yeoman\n是一个用于创建现代化web应用的脚手架工具。不同于`vue-cli`这样的工具，它更像一个脚手架的运行平台，我们可以通过`Yeoman`搭配不同的`generator`去创建任何类型的项目。也就是说，我们可以创建自己的`generator`，从而定制属于我们自己的前端的前端脚手架。<br />\n<br />但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用`vue-cli`这种专注于某个框架的脚手架。\n<a name=\"tgPov\"></a>\n### Yeoman基本使用\n<a name=\"kF8fE\"></a>\n#### 安装`Yeoman`\n```shell\nyarn global add yo\n```\nYeoman是搭配特定的generator才能使用的，所以还需要安装generator\n<a name=\"ZB9tX\"></a>\n#### 安装对应的`generator`\n```shell\nyarn global add generator-node\n```\n<a name=\"H0JOj\"></a>\n#### 通过`yo`运行`generator`\n```shell\nyo node\n```\n然后根据提示输入项目的相关信息，完成后会自动生成项目。<br />\n\n<a name=\"iGQPb\"></a>\n### Sub Generator\n有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。<br />\n<br />例如我们想运行`generator-node`子集下面的cli命令，创建一个cli应用。\n```shell\nyo node:cli\n```\n\n\n<a name=\"Vtd5i\"></a>\n## 自定义Generator\n虽然市面上也有很多`generator`，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的`generator`。<br />\n\n<a name=\"GOsVL\"></a>\n### 创建Generator模块\ngenerator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-<name>的格式命名。\n```shell\nmkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator\n```\n上述命令完成后，接下来我们打开项目，然后在项目根目录创建`generators/app/index.js`文件<br />这个文件会作为`Generator`的核心入口<br />它需要导出一个继承自`Yeoman Generator`的类<br />Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法<br />我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(\"temp.txt\"),\n             Math.random().toString()\n          )\n     }\n}\n```\n然后我们把这个模块，挂载到本地全局上\n```shell\nyarn link\n```\n接着就可以使用\n```shell\nyo simple  // simple 是上面创建项目定义的项目名称\n```\n<a name=\"K2W5G\"></a>\n### 根据模板创建文件\n很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。<br />在app目录下创建`templates/foo.txt`文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记`<%= title %>`动态输出内容，也可以做一些判断、循环的操作。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(\"foo.txt\")\n          // 输出目标路径\n          const output = this.destinationPath(\"foo.txt\")\n          // 模板数据上下文\n          const context = {title: \"Hello xsl~\"}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}\n```\n相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。<br />\n\n<a name=\"XepZf\"></a>\n### 接收用户输入\n```javascript\n// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: \"input\",\n      name: \"name\",\n      message:\"Your project name\",\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers => {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}\n```\n<a name=\"eXNQ4\"></a>\n## Plop\n一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。<br />在一个项目当中使用Plop，需要以下几个步骤：\n\n1. 将Plop模块作为项目开发依赖安装\n1. 在项目根目录下创建一个plopfile.js文件\n1. 在plopfile.js文件中定义脚手架任务\n1. 编写用于生成特定类型文件的模板\n1. 通过Plop提供的CLI运行脚手架任务\n\n\n\n<a name=\"bmH42\"></a>\n## 脚手架工作原理\n脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。<br />\n\n<a name=\"kzFtP\"></a>\n## 自动化构建\n> 一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。\n\n将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。<br />\n<br />自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。<br />\n\n<a name=\"We1Dg\"></a>\n## NPM Scripts自动构建工作流\n可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。<br />在启动serve之前构建项目：\n```json\n// ...\n\"scripts\": {\n\t\"preserve\": \"yarn build\",\n  \"serve\": \"browser-sync .\"\n}\n```\n同时执行多个任务：\n```shell\nyarn add npm-run-all\n```\n然后在scripts中添加：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync .\",\n  \"start\": \"run-p build serve\"\n}\n```\n监听文件变化并重新编译，监听文件变化并自动热更新：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync . --files \\“css/*.css\\\"\",\n  \"start\": \"run-p build serve\"\n}\n```\n\n\n<a name=\"MTfJX\"></a>\n## 常见的自动化构建工具\n> 严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处\n\n<a name=\"mUW98\"></a>\n### Grunt\n最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。<br />\n\n<a name=\"Gvli3\"></a>\n### Gulp\n对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。<br />\n\n<a name=\"c0d3i\"></a>\n### FIS\n百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。<br />​\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u9ddc50d1\" class=\"ne-p\"><span class=\"ne-text\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p id=\"uf0f329f4\" class=\"ne-p\"><br></p><h2 id=\"kTUlJ\"><span class=\"ne-text\">工程化概述</span></h2><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p id=\"6efeacd3a74808736dedf22c13f949b0\" class=\"ne-p\"><br></p><p id=\"638e06fe26f9d475437043417e1dd76c\" class=\"ne-p\"><span class=\"ne-text\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul class=\"ne-ul\"><li id=\"ab33ea1b686b0d774237deffb978b2f5\"><span class=\"ne-text\">想要使用ES6+新特性，但是兼容有问题</span></li><li id=\"199af443a534e422015c599a4f8afcc9\"><span class=\"ne-text\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"bf807345cbfb59260dd244e15c149048\"><span class=\"ne-text\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li id=\"0647cb8916ab6dd14c1c60f189fed828\"><span class=\"ne-text\">部署上线前需要</span><strong><span class=\"ne-text\">手动</span></strong><span class=\"ne-text\">压缩代码及资源文件，部署过程需要</span><strong><span class=\"ne-text\">手动</span></strong><span class=\"ne-text\">上传代码到服务器。</span></li></ul><ul start=\"5\" class=\"ne-ul\"><li id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span class=\"ne-text\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span class=\"ne-text\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 id=\"EW0lj\"><span class=\"ne-text\">工程化主要解决的问题</span></h3><ul class=\"ne-ul\"><li id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span class=\"ne-text\">传统语言或语法的弊端</span></li><li id=\"b1413b1dec964eedb0c14c6e0073b405\"><span class=\"ne-text\">无法使用模块化/组件化</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span class=\"ne-text\">重复的机械式工作</span></li><li id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span class=\"ne-text\">代码风格统一、质量保证</span></li></ul><ul start=\"5\" class=\"ne-ul\"><li id=\"4c96aa6412fe73da068032bc006c0afc\"><span class=\"ne-text\">依赖后端服务接口支持</span></li><li id=\"c9581f1f56c99656de37e16688b62a45\"><span class=\"ne-text\">整体依赖后端项目</span></li></ul><h3 id=\"aUUhn\"><span class=\"ne-text\">一个项目过程中工程化的表现</span></h3><p id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" class=\"ne-p\"><span class=\"ne-text\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p id=\"81fce7b94d8a1033e43d9b09f91936f7\" class=\"ne-p\"><span class=\"ne-text\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p id=\"0eafa88a5a209274f9772ac08839ed66\" class=\"ne-p\"><br></p><h3 id=\"aoiuJ\"><span class=\"ne-text\">工程化不等工具</span></h3><p id=\"605fba2d907b03ccc9f7a4cb7200a137\" class=\"ne-p\"><span class=\"ne-text\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p id=\"7495a9a64e5d44a4ef77aeb5478a3256\" class=\"ne-p\"><span class=\"ne-text\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p id=\"f41ffd19c6ee7218bb8477898486d794\" class=\"ne-p\"><br></p><p id=\"3b67633b8d3aae6a09e2304dc77d51dd\" class=\"ne-p\"><span class=\"ne-text\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p id=\"4c36f1941103668570c2b99c1d0acd78\" class=\"ne-p\"><span class=\"ne-text\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p id=\"b98204a37bcc3bd5d801a110f29659ab\" class=\"ne-p\"><br></p><p id=\"72ec9097adc26d851b0eb8359f703474\" class=\"ne-p\"><span class=\"ne-text\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 id=\"ZxEVm\"><span class=\"ne-text\">脚手架工具</span></h2><p id=\"6702e0d0af26abea5d8b361fcec1ffe1\" class=\"ne-p\"><span class=\"ne-text\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p id=\"07f4feba31b01fa3081db7367cdffb18\" class=\"ne-p\"><span class=\"ne-text\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span class=\"ne-text\">提供了一套规范和约定</span></strong><span class=\"ne-text\">。</span></p><p id=\"cdae1020279af93b28bdf120d48fccda\" class=\"ne-p\"><span class=\"ne-text\">比如在开发类似项目时，他们都有以下特征：</span></p><ul class=\"ne-ul\"><li id=\"87f50a971760378fff4399a2eef909ec\"><span class=\"ne-text\">相同的组织结构</span></li><li id=\"ade3ab0adab563b6694aefea1a2bad95\"><span class=\"ne-text\">相同的开发范式</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"39c9bdc8966936673935c53ee4607e41\"><span class=\"ne-text\">相同的模块依赖</span></li><li id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span class=\"ne-text\">相同的工具配置</span></li></ul><ul start=\"5\" class=\"ne-ul\"><li id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span class=\"ne-text\">相同的基础代码</span></li></ul><p id=\"45f28bf233bd5a54a4c435c34b774829\" class=\"ne-p\"><span class=\"ne-text\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p id=\"2a402333b402665c5d003778c04649aa\" class=\"ne-p\"><span class=\"ne-text\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 id=\"n1S8J\"><span class=\"ne-text\">Yeoman</span></h3><p id=\"6e71447cdf53b36bca75977dd78e40f9\" class=\"ne-p\"><span class=\"ne-text\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code class=\"ne-code\"><span class=\"ne-text\">vue-cli</span></code><span class=\"ne-text\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman</span></code><span class=\"ne-text\">搭配不同的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p id=\"947ac1ac2bff3be7bacd231e8849d926\" class=\"ne-p\"><br></p><p id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" class=\"ne-p\"><span class=\"ne-text\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code class=\"ne-code\"><span class=\"ne-text\">vue-cli</span></code><span class=\"ne-text\">这种专注于某个框架的脚手架。</span></p><h3 id=\"tgPov\"><span class=\"ne-text\">Yeoman基本使用</span></h3><h4 id=\"kF8fE\"><span class=\"ne-text\">安装</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman</span></code></h4><pre data-language=\"shell\" id=\"UctVY\" class=\"ne-codeblock\">yarn global add yo</pre><p id=\"f7709d684c14977c491c71417b926a40\" class=\"ne-p\"><span class=\"ne-text\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 id=\"ZB9tX\"><span class=\"ne-text\">安装对应的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code></h4><pre data-language=\"shell\" id=\"AjYIe\" class=\"ne-codeblock\">yarn global add generator-node</pre><h4 id=\"H0JOj\"><span class=\"ne-text\">通过</span><code class=\"ne-code\"><span class=\"ne-text\">yo</span></code><span class=\"ne-text\">运行</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code></h4><pre data-language=\"shell\" id=\"A4OVz\" class=\"ne-codeblock\">yo node</pre><p id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" class=\"ne-p\"><span class=\"ne-text\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p id=\"567970277a390e29489bb7abcc78fc9b\" class=\"ne-p\"><br></p><h3 id=\"iGQPb\"><span class=\"ne-text\">Sub Generator</span></h3><p id=\"63764b123afef28b5719a6f559b476ec\" class=\"ne-p\"><span class=\"ne-text\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" class=\"ne-p\"><br></p><p id=\"80d578d3bc0a21e1d8325c6e51f6537d\" class=\"ne-p\"><span class=\"ne-text\">例如我们想运行</span><code class=\"ne-code\"><span class=\"ne-text\">generator-node</span></code><span class=\"ne-text\">子集下面的cli命令，创建一个cli应用。</span></p><pre data-language=\"shell\" id=\"itHe0\" class=\"ne-codeblock\">yo node:cli</pre><p id=\"ceac8b3ad92013955a96917234e89a6a\" class=\"ne-p\"><br></p><h2 id=\"Vtd5i\"><span class=\"ne-text\">自定义Generator</span></h2><p id=\"e7777b3396c25ee50253db223ca52e92\" class=\"ne-p\"><span class=\"ne-text\">虽然市面上也有很多</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">。</span></p><p id=\"97205b7f70cc38df9bdd6381147ad581\" class=\"ne-p\"><br></p><h3 id=\"GOsVL\"><span class=\"ne-text\">创建Generator模块</span></h3><p id=\"d6afb45aa645a0838bd647331fb54173\" class=\"ne-p\"><span class=\"ne-text\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><pre data-language=\"shell\" id=\"kEYzQ\" class=\"ne-codeblock\">mkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator</pre><p id=\"3d884f7ed0face815245f6a5ac2a9a9e\" class=\"ne-p\"><span class=\"ne-text\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code class=\"ne-code\"><span class=\"ne-text\">generators/app/index.js</span></code><span class=\"ne-text\">文件</span></p><p id=\"1d49178701cccbb5059d5fb0a91c8f5f\" class=\"ne-p\"><span class=\"ne-text\">这个文件会作为</span><code class=\"ne-code\"><span class=\"ne-text\">Generator</span></code><span class=\"ne-text\">的核心入口</span></p><p id=\"7619f32339a07d42bf6dc2f080f2193d\" class=\"ne-p\"><span class=\"ne-text\">它需要导出一个继承自</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman Generator</span></code><span class=\"ne-text\">的类</span></p><p id=\"bacc3f5ab6b162acb14404949722f40a\" class=\"ne-p\"><span class=\"ne-text\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p id=\"9d5006b75fdc3bc94b297dcc927f628b\" class=\"ne-p\"><span class=\"ne-text\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><pre data-language=\"javascript\" id=\"DZpLB\" class=\"ne-codeblock\">const Genetator = require(&quot;yeoman-generator&quot;)\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(&quot;temp.txt&quot;),\n             Math.random().toString()\n          )\n     }\n}</pre><p id=\"4931ef260fa23ecf2763bf7e84a8541b\" class=\"ne-p\"><span class=\"ne-text\">然后我们把这个模块，挂载到本地全局上</span></p><pre data-language=\"shell\" id=\"pJuu8\" class=\"ne-codeblock\">yarn link</pre><p id=\"f91fb4526321f3e477467a49d911317a\" class=\"ne-p\"><span class=\"ne-text\">接着就可以使用</span></p><pre data-language=\"shell\" id=\"r7HSb\" class=\"ne-codeblock\">yo simple  // simple 是上面创建项目定义的项目名称</pre><h3 id=\"K2W5G\"><span class=\"ne-text\">根据模板创建文件</span></h3><p id=\"a1fb2fda7663118ce3a48917cbb98917\" class=\"ne-p\"><span class=\"ne-text\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p id=\"8dc055009d114168f171f6a1dc5181f9\" class=\"ne-p\"><span class=\"ne-text\">在app目录下创建</span><code class=\"ne-code\"><span class=\"ne-text\">templates/foo.txt</span></code><span class=\"ne-text\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;%= title %&gt;</span></code><span class=\"ne-text\">动态输出内容，也可以做一些判断、循环的操作。</span></p><pre data-language=\"javascript\" id=\"NRHkn\" class=\"ne-codeblock\">const Genetator = require(&quot;yeoman-generator&quot;)\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(&quot;foo.txt&quot;)\n          // 输出目标路径\n          const output = this.destinationPath(&quot;foo.txt&quot;)\n          // 模板数据上下文\n          const context = {title: &quot;Hello xsl~&quot;}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}</pre><p id=\"41d4df42f2e1c49170cdd872db525534\" class=\"ne-p\"><span class=\"ne-text\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p id=\"59b219ee88b413579d46edbf26ff0cd2\" class=\"ne-p\"><br></p><h3 id=\"XepZf\"><span class=\"ne-text\">接收用户输入</span></h3><pre data-language=\"javascript\" id=\"qEFYB\" class=\"ne-codeblock\">// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: &quot;input&quot;,\n      name: &quot;name&quot;,\n      message:&quot;Your project name&quot;,\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers =&gt; {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}</pre><h2 id=\"eXNQ4\"><span class=\"ne-text\">Plop</span></h2><p id=\"04bb18225809481c4cbc3d41eae336cc\" class=\"ne-p\"><span class=\"ne-text\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p id=\"36e30a882a7a8d73579aaf52e808f7fb\" class=\"ne-p\"><span class=\"ne-text\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol class=\"ne-ol\"><li id=\"u6eb65025\"><span class=\"ne-text\">将Plop模块作为项目开发依赖安装</span></li><li id=\"u8596f26f\"><span class=\"ne-text\">在项目根目录下创建一个plopfile.js文件</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u05d99019\"><span class=\"ne-text\">在plopfile.js文件中定义脚手架任务</span></li><li id=\"uaa4745c1\"><span class=\"ne-text\">编写用于生成特定类型文件的模板</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"ud5c3be8a\"><span class=\"ne-text\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" class=\"ne-p\"><br></p><h2 id=\"bmH42\"><span class=\"ne-text\">脚手架工作原理</span></h2><p id=\"ufc46286c\" class=\"ne-p\"><span class=\"ne-text\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p id=\"45a1809166e515f21f299c74efed1e27\" class=\"ne-p\"><br></p><h2 id=\"kzFtP\"><span class=\"ne-text\">自动化构建</span></h2><div class=\"ne-quote\"><p id=\"ub7e5f02f\" class=\"ne-p\"><span class=\"ne-text\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></div><p id=\"9a32ced10e6459e239a05a1a1e5df1bb\" class=\"ne-p\"><span class=\"ne-text\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p id=\"d18acf5af7787992ff284a698d01d418\" class=\"ne-p\"><br></p><p id=\"2736b42029477f90d7bcd9cd0cf4929d\" class=\"ne-p\"><span class=\"ne-text\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p id=\"96334d6e3c97e357fbf85c11c11ccd26\" class=\"ne-p\"><br></p><h2 id=\"We1Dg\"><span class=\"ne-text\">NPM Scripts自动构建工作流</span></h2><p id=\"u05daf93d\" class=\"ne-p\"><span class=\"ne-text\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p id=\"u75895150\" class=\"ne-p\"><span class=\"ne-text\">在启动serve之前构建项目：</span></p><pre data-language=\"json\" id=\"HwiWx\" class=\"ne-codeblock\">// ...\n&quot;scripts&quot;: {\n\t&quot;preserve&quot;: &quot;yarn build&quot;,\n  &quot;serve&quot;: &quot;browser-sync .&quot;\n}</pre><p id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" class=\"ne-p\"><span class=\"ne-text\">同时执行多个任务：</span></p><pre data-language=\"shell\" id=\"SkcZV\" class=\"ne-codeblock\">yarn add npm-run-all</pre><p id=\"u390d0a26\" class=\"ne-p\"><span class=\"ne-text\">然后在scripts中添加：</span></p><pre data-language=\"json\" id=\"vQPuB\" class=\"ne-codeblock\">// ...\n&quot;scripts&quot;: {\n\t&quot;build&quot;: &quot;sass scss/main.scss css/style.css --watch&quot;,\n  &quot;serve&quot;: &quot;browser-sync .&quot;,\n  &quot;start&quot;: &quot;run-p build serve&quot;\n}</pre><p id=\"30746ddfc4aee0df1a14a5759fbd2da0\" class=\"ne-p\"><span class=\"ne-text\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><pre data-language=\"json\" id=\"BTiLz\" class=\"ne-codeblock\">// ...\n&quot;scripts&quot;: {\n\t&quot;build&quot;: &quot;sass scss/main.scss css/style.css --watch&quot;,\n  &quot;serve&quot;: &quot;browser-sync . --files \\“css/*.css\\&quot;&quot;,\n  &quot;start&quot;: &quot;run-p build serve&quot;\n}</pre><p id=\"924fbd896dfc87f378125e354a4653cd\" class=\"ne-p\"><br></p><h2 id=\"MTfJX\"><span class=\"ne-text\">常见的自动化构建工具</span></h2><div class=\"ne-quote\"><p id=\"077ede272d301418bbaba7486729e376\" class=\"ne-p\"><span class=\"ne-text\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></div><h3 id=\"mUW98\"><span class=\"ne-text\">Grunt</span></h3><p id=\"ufef91aad\" class=\"ne-p\"><span class=\"ne-text\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p id=\"u5de15af5\" class=\"ne-p\"><br></p><h3 id=\"Gvli3\"><span class=\"ne-text\">Gulp</span></h3><p id=\"ua9d9c760\" class=\"ne-p\"><span class=\"ne-text\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p id=\"ud3041ade\" class=\"ne-p\"><br></p><h3 id=\"c0d3i\"><span class=\"ne-text\">FIS</span></h3><p id=\"u7282cedc\" class=\"ne-p\"><span class=\"ne-text\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p id=\"u327bc84a\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8ac951e3\" class=\"ne-p\"><br></p><p id=\"u375590bd\" class=\"ne-p\"><br></p><p id=\"uf6653213\" class=\"ne-p\"><br></p><p id=\"u628e2d18\" class=\"ne-p\"><br></p><p id=\"u61ca0a14\" class=\"ne-p\"><br></p><p id=\"u84a9f2af\" class=\"ne-p\"><br></p><p id=\"udc9acb9f\" class=\"ne-p\"><br></p><p id=\"u23533efc\" class=\"ne-p\"><br></p><p id=\"uf7120598\" class=\"ne-p\"><br></p><p id=\"u00128f39\" class=\"ne-p\"><br></p><p id=\"u16ba130f\" class=\"ne-p\"><br></p><p id=\"u710f7f9f\" class=\"ne-p\"><br></p><p id=\"u66d7a1fe\" class=\"ne-p\"><br></p><p id=\"u82dfb0b3\" class=\"ne-p\"><br></p><p id=\"ue4c6d16f\" class=\"ne-p\"><br></p><p id=\"u4a729b96\" class=\"ne-p\"><br></p><p id=\"uf23cedb5\" class=\"ne-p\"><br></p><p id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" class=\"ne-p\"><br></p><p id=\"c6dbb935ccf191afd0f115adcd1c3681\" class=\"ne-p\"><br></p><p id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" class=\"ne-p\"><br></p><p id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" class=\"ne-p\"><br></p><p id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" class=\"ne-p\"><br></p><p id=\"807a0f067997266561dbadbcac84799d\" class=\"ne-p\"><br></p><p id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" class=\"ne-p\"><br></p><p id=\"7b918194a737f5e23fe42f911e7b2f41\" class=\"ne-p\"><br></p><p id=\"6e415308ee3e17698f477ae2b17a36b3\" class=\"ne-p\"><br></p><p id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" class=\"ne-p\"><br></p><p id=\"a93901365cafffe8b0094d5fc1649a2c\" class=\"ne-p\"><br></p><p id=\"b0dffc3ac245c3c336a8904992538e80\" class=\"ne-p\"><br></p><p id=\"f9b156de99ec06197292f284ee10c9f5\" class=\"ne-p\"><br></p><p id=\"4f63866ba6b48598c77497227be68e3e\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9ddc50d1\" id=\"u9ddc50d1\"><span data-lake-id=\"uf2e308aa\" id=\"uf2e308aa\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p data-lake-id=\"uf0f329f4\" id=\"uf0f329f4\"><br></p><h2 data-lake-id=\"kTUlJ\" id=\"kTUlJ\"><span data-lake-id=\"u2f7b6809\" id=\"u2f7b6809\">工程化概述</span></h2><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u4abef9cf\" id=\"u4abef9cf\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p data-lake-id=\"6efeacd3a74808736dedf22c13f949b0\" id=\"6efeacd3a74808736dedf22c13f949b0\"><br></p><p data-lake-id=\"638e06fe26f9d475437043417e1dd76c\" id=\"638e06fe26f9d475437043417e1dd76c\"><span data-lake-id=\"u56306bb9\" id=\"u56306bb9\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul list=\"u714c65b3\"><li fid=\"u95242760\" data-lake-id=\"ab33ea1b686b0d774237deffb978b2f5\" id=\"ab33ea1b686b0d774237deffb978b2f5\"><span data-lake-id=\"u8c6735b6\" id=\"u8c6735b6\">想要使用ES6+新特性，但是兼容有问题</span></li><li fid=\"u95242760\" data-lake-id=\"199af443a534e422015c599a4f8afcc9\" id=\"199af443a534e422015c599a4f8afcc9\"><span data-lake-id=\"u0bc6ac94\" id=\"u0bc6ac94\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"bf807345cbfb59260dd244e15c149048\" id=\"bf807345cbfb59260dd244e15c149048\"><span data-lake-id=\"u262fc89a\" id=\"u262fc89a\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"0647cb8916ab6dd14c1c60f189fed828\" id=\"0647cb8916ab6dd14c1c60f189fed828\"><span data-lake-id=\"u6d3d2bb8\" id=\"u6d3d2bb8\">部署上线前需要</span><strong><span data-lake-id=\"u7952b03d\" id=\"u7952b03d\">手动</span></strong><span data-lake-id=\"ua57d8783\" id=\"ua57d8783\">压缩代码及资源文件，部署过程需要</span><strong><span data-lake-id=\"u51bad8b5\" id=\"u51bad8b5\">手动</span></strong><span data-lake-id=\"u5dd930e1\" id=\"u5dd930e1\">上传代码到服务器。</span></li><li fid=\"u95242760\" data-lake-id=\"46f8f24838060c6b72af26d04c6c3d4a\" id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span data-lake-id=\"u4b14d467\" id=\"u4b14d467\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li fid=\"u95242760\" data-lake-id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\" id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span data-lake-id=\"ucdc8558c\" id=\"ucdc8558c\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 data-lake-id=\"EW0lj\" id=\"EW0lj\"><span data-lake-id=\"ucd3a5627\" id=\"ucd3a5627\">工程化主要解决的问题</span></h3><ul list=\"u7fb76746\"><li fid=\"ud6f1a7d6\" data-lake-id=\"09cf688bab0662a0ab07ba59e1ab53bd\" id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span data-lake-id=\"u520d9080\" id=\"u520d9080\">传统语言或语法的弊端</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"b1413b1dec964eedb0c14c6e0073b405\" id=\"b1413b1dec964eedb0c14c6e0073b405\"><span data-lake-id=\"u8f76db5a\" id=\"u8f76db5a\">无法使用模块化/组件化</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4b7a29e20de450b4cfdf835c27bceb3d\" id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span data-lake-id=\"ubd00e10c\" id=\"ubd00e10c\">重复的机械式工作</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"62fccefaae81ecb0ca6610d6be7c6c72\" id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span data-lake-id=\"ua6d16299\" id=\"ua6d16299\">代码风格统一、质量保证</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4c96aa6412fe73da068032bc006c0afc\" id=\"4c96aa6412fe73da068032bc006c0afc\"><span data-lake-id=\"ue9b02c0e\" id=\"ue9b02c0e\">依赖后端服务接口支持</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"c9581f1f56c99656de37e16688b62a45\" id=\"c9581f1f56c99656de37e16688b62a45\"><span data-lake-id=\"u400174a9\" id=\"u400174a9\">整体依赖后端项目</span></li></ul><h3 data-lake-id=\"aUUhn\" id=\"aUUhn\"><span data-lake-id=\"u82965b43\" id=\"u82965b43\">一个项目过程中工程化的表现</span></h3><p data-lake-id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" id=\"a2a28a1300caa6fb05f0c1d29a9ec939\"><span data-lake-id=\"ua6c463e0\" id=\"ua6c463e0\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p data-lake-id=\"81fce7b94d8a1033e43d9b09f91936f7\" id=\"81fce7b94d8a1033e43d9b09f91936f7\"><span data-lake-id=\"uae54f73d\" id=\"uae54f73d\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p data-lake-id=\"0eafa88a5a209274f9772ac08839ed66\" id=\"0eafa88a5a209274f9772ac08839ed66\"><br></p><h3 data-lake-id=\"aoiuJ\" id=\"aoiuJ\"><span data-lake-id=\"u33f50391\" id=\"u33f50391\">工程化不等工具</span></h3><p data-lake-id=\"605fba2d907b03ccc9f7a4cb7200a137\" id=\"605fba2d907b03ccc9f7a4cb7200a137\"><span data-lake-id=\"u2214cc6a\" id=\"u2214cc6a\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p data-lake-id=\"7495a9a64e5d44a4ef77aeb5478a3256\" id=\"7495a9a64e5d44a4ef77aeb5478a3256\"><span data-lake-id=\"uc4bb710a\" id=\"uc4bb710a\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p data-lake-id=\"f41ffd19c6ee7218bb8477898486d794\" id=\"f41ffd19c6ee7218bb8477898486d794\"><br></p><p data-lake-id=\"3b67633b8d3aae6a09e2304dc77d51dd\" id=\"3b67633b8d3aae6a09e2304dc77d51dd\"><span data-lake-id=\"u5f48dae7\" id=\"u5f48dae7\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p data-lake-id=\"4c36f1941103668570c2b99c1d0acd78\" id=\"4c36f1941103668570c2b99c1d0acd78\"><span data-lake-id=\"u3cad878d\" id=\"u3cad878d\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p data-lake-id=\"b98204a37bcc3bd5d801a110f29659ab\" id=\"b98204a37bcc3bd5d801a110f29659ab\"><br></p><p data-lake-id=\"72ec9097adc26d851b0eb8359f703474\" id=\"72ec9097adc26d851b0eb8359f703474\"><span data-lake-id=\"u7e625936\" id=\"u7e625936\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 data-lake-id=\"ZxEVm\" id=\"ZxEVm\"><span data-lake-id=\"ube28f0c6\" id=\"ube28f0c6\">脚手架工具</span></h2><p data-lake-id=\"6702e0d0af26abea5d8b361fcec1ffe1\" id=\"6702e0d0af26abea5d8b361fcec1ffe1\"><span data-lake-id=\"uba2c3ac9\" id=\"uba2c3ac9\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p data-lake-id=\"07f4feba31b01fa3081db7367cdffb18\" id=\"07f4feba31b01fa3081db7367cdffb18\"><span data-lake-id=\"u1ed9bf66\" id=\"u1ed9bf66\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span data-lake-id=\"u5fbe1612\" id=\"u5fbe1612\">提供了一套规范和约定</span></strong><span data-lake-id=\"ue851e0dd\" id=\"ue851e0dd\">。</span></p><p data-lake-id=\"cdae1020279af93b28bdf120d48fccda\" id=\"cdae1020279af93b28bdf120d48fccda\"><span data-lake-id=\"u9201fabb\" id=\"u9201fabb\">比如在开发类似项目时，他们都有以下特征：</span></p><ul list=\"u9c7b0d6a\"><li fid=\"ue5007b75\" data-lake-id=\"87f50a971760378fff4399a2eef909ec\" id=\"87f50a971760378fff4399a2eef909ec\"><span data-lake-id=\"u61247e35\" id=\"u61247e35\">相同的组织结构</span></li><li fid=\"ue5007b75\" data-lake-id=\"ade3ab0adab563b6694aefea1a2bad95\" id=\"ade3ab0adab563b6694aefea1a2bad95\"><span data-lake-id=\"uf02418de\" id=\"uf02418de\">相同的开发范式</span></li><li fid=\"ue5007b75\" data-lake-id=\"39c9bdc8966936673935c53ee4607e41\" id=\"39c9bdc8966936673935c53ee4607e41\"><span data-lake-id=\"uf8754778\" id=\"uf8754778\">相同的模块依赖</span></li><li fid=\"ue5007b75\" data-lake-id=\"07f5c73b4fefd013fffb949ed9c71bba\" id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span data-lake-id=\"u70fdc6d0\" id=\"u70fdc6d0\">相同的工具配置</span></li><li fid=\"ue5007b75\" data-lake-id=\"3dc5321383ac48f068b7ccd8db3b84cd\" id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span data-lake-id=\"u24d59e3e\" id=\"u24d59e3e\">相同的基础代码</span></li></ul><p data-lake-id=\"45f28bf233bd5a54a4c435c34b774829\" id=\"45f28bf233bd5a54a4c435c34b774829\"><span data-lake-id=\"u13a4fbc4\" id=\"u13a4fbc4\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p data-lake-id=\"2a402333b402665c5d003778c04649aa\" id=\"2a402333b402665c5d003778c04649aa\"><span data-lake-id=\"ube532606\" id=\"ube532606\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 data-lake-id=\"n1S8J\" id=\"n1S8J\"><span data-lake-id=\"u4588e8c7\" id=\"u4588e8c7\">Yeoman</span></h3><p data-lake-id=\"6e71447cdf53b36bca75977dd78e40f9\" id=\"6e71447cdf53b36bca75977dd78e40f9\"><span data-lake-id=\"uab762e2c\" id=\"uab762e2c\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code data-lake-id=\"uf24d8ce4\" id=\"uf24d8ce4\"><span data-lake-id=\"ueadd0cf3\" id=\"ueadd0cf3\">vue-cli</span></code><span data-lake-id=\"uc0677493\" id=\"uc0677493\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code data-lake-id=\"u724533e3\" id=\"u724533e3\"><span data-lake-id=\"udd9465e0\" id=\"udd9465e0\">Yeoman</span></code><span data-lake-id=\"u57f1a7a4\" id=\"u57f1a7a4\">搭配不同的</span><code data-lake-id=\"u8704cb4a\" id=\"u8704cb4a\"><span data-lake-id=\"u83aeafdf\" id=\"u83aeafdf\">generator</span></code><span data-lake-id=\"uafcb805a\" id=\"uafcb805a\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code data-lake-id=\"u16522b31\" id=\"u16522b31\"><span data-lake-id=\"u39a4b215\" id=\"u39a4b215\">generator</span></code><span data-lake-id=\"u9481d789\" id=\"u9481d789\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p data-lake-id=\"947ac1ac2bff3be7bacd231e8849d926\" id=\"947ac1ac2bff3be7bacd231e8849d926\"><br></p><p data-lake-id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\"><span data-lake-id=\"ud4d799b8\" id=\"ud4d799b8\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code data-lake-id=\"uce81b59f\" id=\"uce81b59f\"><span data-lake-id=\"u7a2c9589\" id=\"u7a2c9589\">vue-cli</span></code><span data-lake-id=\"u36681221\" id=\"u36681221\">这种专注于某个框架的脚手架。</span></p><h3 data-lake-id=\"tgPov\" id=\"tgPov\"><span data-lake-id=\"u27ed86c5\" id=\"u27ed86c5\">Yeoman基本使用</span></h3><h4 data-lake-id=\"kF8fE\" id=\"kF8fE\"><span data-lake-id=\"u32a5dec5\" id=\"u32a5dec5\">安装</span><code data-lake-id=\"ud08c2796\" id=\"ud08c2796\"><span data-lake-id=\"u6907f0a9\" id=\"u6907f0a9\">Yeoman</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20yo%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22UctVY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f7709d684c14977c491c71417b926a40\" id=\"f7709d684c14977c491c71417b926a40\"><span data-lake-id=\"u293a1e59\" id=\"u293a1e59\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 data-lake-id=\"ZB9tX\" id=\"ZB9tX\"><span data-lake-id=\"u79fe4734\" id=\"u79fe4734\">安装对应的</span><code data-lake-id=\"u6185a7da\" id=\"u6185a7da\"><span data-lake-id=\"u12849491\" id=\"u12849491\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20generator-node%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22AjYIe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"H0JOj\" id=\"H0JOj\"><span data-lake-id=\"u2947582c\" id=\"u2947582c\">通过</span><code data-lake-id=\"ua95853b0\" id=\"ua95853b0\"><span data-lake-id=\"ue5b291ec\" id=\"ue5b291ec\">yo</span></code><span data-lake-id=\"u9143c573\" id=\"u9143c573\">运行</span><code data-lake-id=\"u4a99be42\" id=\"u4a99be42\"><span data-lake-id=\"u75955163\" id=\"u75955163\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22A4OVz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" id=\"813cbeb31ce8bdce63bccb7753ebc0ac\"><span data-lake-id=\"u7869bcc6\" id=\"u7869bcc6\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p data-lake-id=\"567970277a390e29489bb7abcc78fc9b\" id=\"567970277a390e29489bb7abcc78fc9b\"><br></p><h3 data-lake-id=\"iGQPb\" id=\"iGQPb\"><span data-lake-id=\"u13581dc9\" id=\"u13581dc9\">Sub Generator</span></h3><p data-lake-id=\"63764b123afef28b5719a6f559b476ec\" id=\"63764b123afef28b5719a6f559b476ec\"><span data-lake-id=\"u3df000dd\" id=\"u3df000dd\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p data-lake-id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\"><br></p><p data-lake-id=\"80d578d3bc0a21e1d8325c6e51f6537d\" id=\"80d578d3bc0a21e1d8325c6e51f6537d\"><span data-lake-id=\"uf79d2bee\" id=\"uf79d2bee\">例如我们想运行</span><code data-lake-id=\"u0681e65d\" id=\"u0681e65d\"><span data-lake-id=\"u6eef3108\" id=\"u6eef3108\">generator-node</span></code><span data-lake-id=\"uffbc1618\" id=\"uffbc1618\">子集下面的cli命令，创建一个cli应用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%3Acli%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22itHe0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceac8b3ad92013955a96917234e89a6a\" id=\"ceac8b3ad92013955a96917234e89a6a\"><br></p><h2 data-lake-id=\"Vtd5i\" id=\"Vtd5i\"><span data-lake-id=\"ub8f2d24b\" id=\"ub8f2d24b\">自定义Generator</span></h2><p data-lake-id=\"e7777b3396c25ee50253db223ca52e92\" id=\"e7777b3396c25ee50253db223ca52e92\"><span data-lake-id=\"uee5b990d\" id=\"uee5b990d\">虽然市面上也有很多</span><code data-lake-id=\"ufbebab81\" id=\"ufbebab81\"><span data-lake-id=\"uc831a5fa\" id=\"uc831a5fa\">generator</span></code><span data-lake-id=\"uedf94604\" id=\"uedf94604\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code data-lake-id=\"u6240c313\" id=\"u6240c313\"><span data-lake-id=\"u53de307f\" id=\"u53de307f\">generator</span></code><span data-lake-id=\"u8385b73b\" id=\"u8385b73b\">。</span></p><p data-lake-id=\"97205b7f70cc38df9bdd6381147ad581\" id=\"97205b7f70cc38df9bdd6381147ad581\"><br></p><h3 data-lake-id=\"GOsVL\" id=\"GOsVL\"><span data-lake-id=\"ucee9cf39\" id=\"ucee9cf39\">创建Generator模块</span></h3><p data-lake-id=\"d6afb45aa645a0838bd647331fb54173\" id=\"d6afb45aa645a0838bd647331fb54173\"><span data-lake-id=\"ub265eadd\" id=\"ub265eadd\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22mkdir%20generator%5Cncd%20generator%5Cnyarn%20init%5Cnyarn%20add%20yeoman-generator%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kEYzQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3d884f7ed0face815245f6a5ac2a9a9e\" id=\"3d884f7ed0face815245f6a5ac2a9a9e\"><span data-lake-id=\"u797e24cf\" id=\"u797e24cf\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code data-lake-id=\"u5e955203\" id=\"u5e955203\"><span data-lake-id=\"ud6c4de0c\" id=\"ud6c4de0c\">generators/app/index.js</span></code><span data-lake-id=\"uda487af5\" id=\"uda487af5\">文件</span></p><p data-lake-id=\"1d49178701cccbb5059d5fb0a91c8f5f\" id=\"1d49178701cccbb5059d5fb0a91c8f5f\"><span data-lake-id=\"uf5e978c6\" id=\"uf5e978c6\">这个文件会作为</span><code data-lake-id=\"ud516e490\" id=\"ud516e490\"><span data-lake-id=\"u43447756\" id=\"u43447756\">Generator</span></code><span data-lake-id=\"u32837693\" id=\"u32837693\">的核心入口</span></p><p data-lake-id=\"7619f32339a07d42bf6dc2f080f2193d\" id=\"7619f32339a07d42bf6dc2f080f2193d\"><span data-lake-id=\"u553260c2\" id=\"u553260c2\">它需要导出一个继承自</span><code data-lake-id=\"u3d11baac\" id=\"u3d11baac\"><span data-lake-id=\"ub5d856f9\" id=\"ub5d856f9\">Yeoman Generator</span></code><span data-lake-id=\"u0be39170\" id=\"u0be39170\">的类</span></p><p data-lake-id=\"bacc3f5ab6b162acb14404949722f40a\" id=\"bacc3f5ab6b162acb14404949722f40a\"><span data-lake-id=\"u2e3050e7\" id=\"u2e3050e7\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p data-lake-id=\"9d5006b75fdc3bc94b297dcc927f628b\" id=\"9d5006b75fdc3bc94b297dcc927f628b\"><span data-lake-id=\"ucde9e4b9\" id=\"ucde9e4b9\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.write(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20this.destinationPath(%5C%22temp.txt%5C%22)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Math.random().toString()%5Cn%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22DZpLB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4931ef260fa23ecf2763bf7e84a8541b\" id=\"4931ef260fa23ecf2763bf7e84a8541b\"><span data-lake-id=\"u5c9cc00c\" id=\"u5c9cc00c\">然后我们把这个模块，挂载到本地全局上</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20link%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22pJuu8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f91fb4526321f3e477467a49d911317a\" id=\"f91fb4526321f3e477467a49d911317a\"><span data-lake-id=\"u75cfc814\" id=\"u75cfc814\">接着就可以使用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20simple%20%20%2F%2F%20simple%20%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22r7HSb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"K2W5G\" id=\"K2W5G\"><span data-lake-id=\"ub127323c\" id=\"ub127323c\">根据模板创建文件</span></h3><p data-lake-id=\"a1fb2fda7663118ce3a48917cbb98917\" id=\"a1fb2fda7663118ce3a48917cbb98917\"><span data-lake-id=\"u7a7c45dd\" id=\"u7a7c45dd\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p data-lake-id=\"8dc055009d114168f171f6a1dc5181f9\" id=\"8dc055009d114168f171f6a1dc5181f9\"><span data-lake-id=\"u2cb80fe9\" id=\"u2cb80fe9\">在app目录下创建</span><code data-lake-id=\"ubda2118b\" id=\"ubda2118b\"><span data-lake-id=\"ub5c9d701\" id=\"ub5c9d701\">templates/foo.txt</span></code><span data-lake-id=\"u081027aa\" id=\"u081027aa\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code data-lake-id=\"uf304d685\" id=\"uf304d685\"><span data-lake-id=\"u993498ab\" id=\"u993498ab\">&lt;%= title %&gt;</span></code><span data-lake-id=\"u280436be\" id=\"u280436be\">动态输出内容，也可以做一些判断、循环的操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20tmpl%20%3D%20this.templatePath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BE%93%E5%87%BA%E7%9B%AE%E6%A0%87%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20output%20%3D%20this.destinationPath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87%5Cn%20%20%20%20%20%20%20%20%20%20const%20context%20%3D%20%7Btitle%3A%20%5C%22Hello%20xsl~%5C%22%7D%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20context)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22NRHkn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"41d4df42f2e1c49170cdd872db525534\" id=\"41d4df42f2e1c49170cdd872db525534\"><span data-lake-id=\"u378646ce\" id=\"u378646ce\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p data-lake-id=\"59b219ee88b413579d46edbf26ff0cd2\" id=\"59b219ee88b413579d46edbf26ff0cd2\"><br></p><h3 data-lake-id=\"XepZf\" id=\"XepZf\"><span data-lake-id=\"u2fcaf512\" id=\"u2fcaf512\">接收用户输入</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20...%5Cnprompting()%20%7B%5Cn%20%20%20%2F%2F%20Yeoman%20%E5%9C%A8%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E8%8A%82%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%2F%2F%20%20%E5%9C%A8%E6%AD%A4%E6%96%B9%E6%B3%95%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84prompt()%20%E6%96%B9%E6%B3%95%E5%8F%91%E5%87%BA%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A2%E9%97%AE%5Cn%20%20%20return%20this.prompt(%5B%7B%5Cn%20%20%20%20%20%20type%3A%20%5C%22input%5C%22%2C%5Cn%20%20%20%20%20%20name%3A%20%5C%22name%5C%22%2C%5Cn%20%20%20%20%20%20message%3A%5C%22Your%20project%20name%5C%22%2C%5Cn%20%20%20%20%20%20default%3A%20this.appname%2C%20%2F%2F%20appname%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%7D%5D).then(answers%20%3D%3E%20%7B%5Cn%20%20%20%20%20this.answers%20%3D%20answers%5Cn%20%20%20%7D)%5Cn%7D%5Cnwriting()%7B%5Cn%20%20%20%2F%2F%20...%5Cn%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20this.answers)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qEFYB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"eXNQ4\" id=\"eXNQ4\"><span data-lake-id=\"u425a213f\" id=\"u425a213f\">Plop</span></h2><p data-lake-id=\"04bb18225809481c4cbc3d41eae336cc\" id=\"04bb18225809481c4cbc3d41eae336cc\"><span data-lake-id=\"ud698a0eb\" id=\"ud698a0eb\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p data-lake-id=\"36e30a882a7a8d73579aaf52e808f7fb\" id=\"36e30a882a7a8d73579aaf52e808f7fb\"><span data-lake-id=\"uec65ea81\" id=\"uec65ea81\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol list=\"u0551e1dd\"><li fid=\"u5ffd975a\" data-lake-id=\"u6eb65025\" id=\"u6eb65025\"><span data-lake-id=\"u0ff7b416\" id=\"u0ff7b416\">将Plop模块作为项目开发依赖安装</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u8596f26f\" id=\"u8596f26f\"><span data-lake-id=\"u9dc9bc31\" id=\"u9dc9bc31\">在项目根目录下创建一个plopfile.js文件</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u05d99019\" id=\"u05d99019\"><span data-lake-id=\"u0749f652\" id=\"u0749f652\">在plopfile.js文件中定义脚手架任务</span></li><li fid=\"u5ffd975a\" data-lake-id=\"uaa4745c1\" id=\"uaa4745c1\"><span data-lake-id=\"u1f9c54c0\" id=\"u1f9c54c0\">编写用于生成特定类型文件的模板</span></li><li fid=\"u5ffd975a\" data-lake-id=\"ud5c3be8a\" id=\"ud5c3be8a\"><span data-lake-id=\"u4c64d8f6\" id=\"u4c64d8f6\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p data-lake-id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" id=\"ee85b5bcf99f1e2988f97c5b711bcd34\"><br></p><h2 data-lake-id=\"bmH42\" id=\"bmH42\"><span data-lake-id=\"u5bd4c3e7\" id=\"u5bd4c3e7\">脚手架工作原理</span></h2><p data-lake-id=\"ufc46286c\" id=\"ufc46286c\"><span data-lake-id=\"ufa24ebd6\" id=\"ufa24ebd6\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p data-lake-id=\"45a1809166e515f21f299c74efed1e27\" id=\"45a1809166e515f21f299c74efed1e27\"><br></p><h2 data-lake-id=\"kzFtP\" id=\"kzFtP\"><span data-lake-id=\"u84bad02b\" id=\"u84bad02b\">自动化构建</span></h2><blockquote data-lake-id=\"u6fd49020\" id=\"u6fd49020\"><p data-lake-id=\"ub7e5f02f\" id=\"ub7e5f02f\"><span data-lake-id=\"u7e9be0b0\" id=\"u7e9be0b0\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></blockquote><p data-lake-id=\"9a32ced10e6459e239a05a1a1e5df1bb\" id=\"9a32ced10e6459e239a05a1a1e5df1bb\"><span data-lake-id=\"uf529b7e4\" id=\"uf529b7e4\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p data-lake-id=\"d18acf5af7787992ff284a698d01d418\" id=\"d18acf5af7787992ff284a698d01d418\"><br></p><p data-lake-id=\"2736b42029477f90d7bcd9cd0cf4929d\" id=\"2736b42029477f90d7bcd9cd0cf4929d\"><span data-lake-id=\"u294e7de4\" id=\"u294e7de4\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p data-lake-id=\"96334d6e3c97e357fbf85c11c11ccd26\" id=\"96334d6e3c97e357fbf85c11c11ccd26\"><br></p><h2 data-lake-id=\"We1Dg\" id=\"We1Dg\"><span data-lake-id=\"uce2467ce\" id=\"uce2467ce\">NPM Scripts自动构建工作流</span></h2><p data-lake-id=\"u05daf93d\" id=\"u05daf93d\"><span data-lake-id=\"uc1dee9cc\" id=\"uc1dee9cc\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p data-lake-id=\"u75895150\" id=\"u75895150\"><span data-lake-id=\"u493035c0\" id=\"u493035c0\">在启动serve之前构建项目：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22preserve%5C%22%3A%20%5C%22yarn%20build%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HwiWx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\"><span data-lake-id=\"ua5a9349c\" id=\"ua5a9349c\">同时执行多个任务：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20add%20npm-run-all%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22SkcZV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u390d0a26\" id=\"u390d0a26\"><span data-lake-id=\"ub13e0d6a\" id=\"ub13e0d6a\">然后在scripts中添加：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22vQPuB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"30746ddfc4aee0df1a14a5759fbd2da0\" id=\"30746ddfc4aee0df1a14a5759fbd2da0\"><span data-lake-id=\"u16ae39d6\" id=\"u16ae39d6\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%20--files%20%5C%5C%E2%80%9Ccss%2F*.css%5C%5C%5C%22%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22BTiLz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"924fbd896dfc87f378125e354a4653cd\" id=\"924fbd896dfc87f378125e354a4653cd\"><br></p><h2 data-lake-id=\"MTfJX\" id=\"MTfJX\"><span data-lake-id=\"u499bea89\" id=\"u499bea89\">常见的自动化构建工具</span></h2><blockquote data-lake-id=\"u2e8dadc2\" id=\"u2e8dadc2\"><p data-lake-id=\"077ede272d301418bbaba7486729e376\" id=\"077ede272d301418bbaba7486729e376\"><span data-lake-id=\"ubbab3705\" id=\"ubbab3705\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></blockquote><h3 data-lake-id=\"mUW98\" id=\"mUW98\"><span data-lake-id=\"u30b1b51f\" id=\"u30b1b51f\">Grunt</span></h3><p data-lake-id=\"ufef91aad\" id=\"ufef91aad\"><span data-lake-id=\"uc9638db0\" id=\"uc9638db0\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p data-lake-id=\"u5de15af5\" id=\"u5de15af5\"><br></p><h3 data-lake-id=\"Gvli3\" id=\"Gvli3\"><span data-lake-id=\"u100cd57c\" id=\"u100cd57c\">Gulp</span></h3><p data-lake-id=\"ua9d9c760\" id=\"ua9d9c760\"><span data-lake-id=\"u8710bd46\" id=\"u8710bd46\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p data-lake-id=\"ud3041ade\" id=\"ud3041ade\"><br></p><h3 data-lake-id=\"c0d3i\" id=\"c0d3i\"><span data-lake-id=\"ubeea5e24\" id=\"ubeea5e24\">FIS</span></h3><p data-lake-id=\"u7282cedc\" id=\"u7282cedc\"><span data-lake-id=\"ud0645e9a\" id=\"ud0645e9a\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p data-lake-id=\"u327bc84a\" id=\"u327bc84a\"><span data-lake-id=\"u0bd847d8\" id=\"u0bd847d8\">​</span><br></p><p data-lake-id=\"u8ac951e3\" id=\"u8ac951e3\"><br></p><p data-lake-id=\"u375590bd\" id=\"u375590bd\"><br></p><p data-lake-id=\"uf6653213\" id=\"uf6653213\"><br></p><p data-lake-id=\"u628e2d18\" id=\"u628e2d18\"><br></p><p data-lake-id=\"u61ca0a14\" id=\"u61ca0a14\"><br></p><p data-lake-id=\"u84a9f2af\" id=\"u84a9f2af\"><br></p><p data-lake-id=\"udc9acb9f\" id=\"udc9acb9f\"><br></p><p data-lake-id=\"u23533efc\" id=\"u23533efc\"><br></p><p data-lake-id=\"uf7120598\" id=\"uf7120598\"><br></p><p data-lake-id=\"u00128f39\" id=\"u00128f39\"><br></p><p data-lake-id=\"u16ba130f\" id=\"u16ba130f\"><br></p><p data-lake-id=\"u710f7f9f\" id=\"u710f7f9f\"><br></p><p data-lake-id=\"u66d7a1fe\" id=\"u66d7a1fe\"><br></p><p data-lake-id=\"u82dfb0b3\" id=\"u82dfb0b3\"><br></p><p data-lake-id=\"ue4c6d16f\" id=\"ue4c6d16f\"><br></p><p data-lake-id=\"u4a729b96\" id=\"u4a729b96\"><br></p><p data-lake-id=\"uf23cedb5\" id=\"uf23cedb5\"><br></p><p data-lake-id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" id=\"99e89eccc910a5e2ae2e84c93d83ad4d\"><br></p><p data-lake-id=\"c6dbb935ccf191afd0f115adcd1c3681\" id=\"c6dbb935ccf191afd0f115adcd1c3681\"><br></p><p data-lake-id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\"><br></p><p data-lake-id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" id=\"c5d22b80c6cd657f1844c8fcb207b7f8\"><br></p><p data-lake-id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" id=\"60d72f9f7aa1cf6553c00edc441f2fc5\"><br></p><p data-lake-id=\"807a0f067997266561dbadbcac84799d\" id=\"807a0f067997266561dbadbcac84799d\"><br></p><p data-lake-id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\"><br></p><p data-lake-id=\"7b918194a737f5e23fe42f911e7b2f41\" id=\"7b918194a737f5e23fe42f911e7b2f41\"><br></p><p data-lake-id=\"6e415308ee3e17698f477ae2b17a36b3\" id=\"6e415308ee3e17698f477ae2b17a36b3\"><br></p><p data-lake-id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\"><br></p><p data-lake-id=\"a93901365cafffe8b0094d5fc1649a2c\" id=\"a93901365cafffe8b0094d5fc1649a2c\"><br></p><p data-lake-id=\"b0dffc3ac245c3c336a8904992538e80\" id=\"b0dffc3ac245c3c336a8904992538e80\"><br></p><p data-lake-id=\"f9b156de99ec06197292f284ee10c9f5\" id=\"f9b156de99ec06197292f284ee10c9f5\"><br></p><p data-lake-id=\"4f63866ba6b48598c77497227be68e3e\" id=\"4f63866ba6b48598c77497227be68e3e\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9ddc50d1\" id=\"u9ddc50d1\"><span data-lake-id=\"uf2e308aa\" id=\"uf2e308aa\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p data-lake-id=\"uf0f329f4\" id=\"uf0f329f4\"><br></p><h2 data-lake-id=\"kTUlJ\" id=\"kTUlJ\"><span data-lake-id=\"u2f7b6809\" id=\"u2f7b6809\">工程化概述</span></h2><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u4abef9cf\" id=\"u4abef9cf\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p data-lake-id=\"6efeacd3a74808736dedf22c13f949b0\" id=\"6efeacd3a74808736dedf22c13f949b0\"><br></p><p data-lake-id=\"638e06fe26f9d475437043417e1dd76c\" id=\"638e06fe26f9d475437043417e1dd76c\"><span data-lake-id=\"u56306bb9\" id=\"u56306bb9\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul list=\"u714c65b3\"><li fid=\"u95242760\" data-lake-id=\"ab33ea1b686b0d774237deffb978b2f5\" id=\"ab33ea1b686b0d774237deffb978b2f5\"><span data-lake-id=\"u8c6735b6\" id=\"u8c6735b6\">想要使用ES6+新特性，但是兼容有问题</span></li><li fid=\"u95242760\" data-lake-id=\"199af443a534e422015c599a4f8afcc9\" id=\"199af443a534e422015c599a4f8afcc9\"><span data-lake-id=\"u0bc6ac94\" id=\"u0bc6ac94\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"bf807345cbfb59260dd244e15c149048\" id=\"bf807345cbfb59260dd244e15c149048\"><span data-lake-id=\"u262fc89a\" id=\"u262fc89a\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"0647cb8916ab6dd14c1c60f189fed828\" id=\"0647cb8916ab6dd14c1c60f189fed828\"><span data-lake-id=\"u6d3d2bb8\" id=\"u6d3d2bb8\">部署上线前需要</span><strong><span data-lake-id=\"u7952b03d\" id=\"u7952b03d\">手动</span></strong><span data-lake-id=\"ua57d8783\" id=\"ua57d8783\">压缩代码及资源文件，部署过程需要</span><strong><span data-lake-id=\"u51bad8b5\" id=\"u51bad8b5\">手动</span></strong><span data-lake-id=\"u5dd930e1\" id=\"u5dd930e1\">上传代码到服务器。</span></li><li fid=\"u95242760\" data-lake-id=\"46f8f24838060c6b72af26d04c6c3d4a\" id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span data-lake-id=\"u4b14d467\" id=\"u4b14d467\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li fid=\"u95242760\" data-lake-id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\" id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span data-lake-id=\"ucdc8558c\" id=\"ucdc8558c\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 data-lake-id=\"EW0lj\" id=\"EW0lj\"><span data-lake-id=\"ucd3a5627\" id=\"ucd3a5627\">工程化主要解决的问题</span></h3><ul list=\"u7fb76746\"><li fid=\"ud6f1a7d6\" data-lake-id=\"09cf688bab0662a0ab07ba59e1ab53bd\" id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span data-lake-id=\"u520d9080\" id=\"u520d9080\">传统语言或语法的弊端</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"b1413b1dec964eedb0c14c6e0073b405\" id=\"b1413b1dec964eedb0c14c6e0073b405\"><span data-lake-id=\"u8f76db5a\" id=\"u8f76db5a\">无法使用模块化/组件化</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4b7a29e20de450b4cfdf835c27bceb3d\" id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span data-lake-id=\"ubd00e10c\" id=\"ubd00e10c\">重复的机械式工作</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"62fccefaae81ecb0ca6610d6be7c6c72\" id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span data-lake-id=\"ua6d16299\" id=\"ua6d16299\">代码风格统一、质量保证</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4c96aa6412fe73da068032bc006c0afc\" id=\"4c96aa6412fe73da068032bc006c0afc\"><span data-lake-id=\"ue9b02c0e\" id=\"ue9b02c0e\">依赖后端服务接口支持</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"c9581f1f56c99656de37e16688b62a45\" id=\"c9581f1f56c99656de37e16688b62a45\"><span data-lake-id=\"u400174a9\" id=\"u400174a9\">整体依赖后端项目</span></li></ul><h3 data-lake-id=\"aUUhn\" id=\"aUUhn\"><span data-lake-id=\"u82965b43\" id=\"u82965b43\">一个项目过程中工程化的表现</span></h3><p data-lake-id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" id=\"a2a28a1300caa6fb05f0c1d29a9ec939\"><span data-lake-id=\"ua6c463e0\" id=\"ua6c463e0\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p data-lake-id=\"81fce7b94d8a1033e43d9b09f91936f7\" id=\"81fce7b94d8a1033e43d9b09f91936f7\"><span data-lake-id=\"uae54f73d\" id=\"uae54f73d\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p data-lake-id=\"0eafa88a5a209274f9772ac08839ed66\" id=\"0eafa88a5a209274f9772ac08839ed66\"><br></p><h3 data-lake-id=\"aoiuJ\" id=\"aoiuJ\"><span data-lake-id=\"u33f50391\" id=\"u33f50391\">工程化不等工具</span></h3><p data-lake-id=\"605fba2d907b03ccc9f7a4cb7200a137\" id=\"605fba2d907b03ccc9f7a4cb7200a137\"><span data-lake-id=\"u2214cc6a\" id=\"u2214cc6a\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p data-lake-id=\"7495a9a64e5d44a4ef77aeb5478a3256\" id=\"7495a9a64e5d44a4ef77aeb5478a3256\"><span data-lake-id=\"uc4bb710a\" id=\"uc4bb710a\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p data-lake-id=\"f41ffd19c6ee7218bb8477898486d794\" id=\"f41ffd19c6ee7218bb8477898486d794\"><br></p><p data-lake-id=\"3b67633b8d3aae6a09e2304dc77d51dd\" id=\"3b67633b8d3aae6a09e2304dc77d51dd\"><span data-lake-id=\"u5f48dae7\" id=\"u5f48dae7\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p data-lake-id=\"4c36f1941103668570c2b99c1d0acd78\" id=\"4c36f1941103668570c2b99c1d0acd78\"><span data-lake-id=\"u3cad878d\" id=\"u3cad878d\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p data-lake-id=\"b98204a37bcc3bd5d801a110f29659ab\" id=\"b98204a37bcc3bd5d801a110f29659ab\"><br></p><p data-lake-id=\"72ec9097adc26d851b0eb8359f703474\" id=\"72ec9097adc26d851b0eb8359f703474\"><span data-lake-id=\"u7e625936\" id=\"u7e625936\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 data-lake-id=\"ZxEVm\" id=\"ZxEVm\"><span data-lake-id=\"ube28f0c6\" id=\"ube28f0c6\">脚手架工具</span></h2><p data-lake-id=\"6702e0d0af26abea5d8b361fcec1ffe1\" id=\"6702e0d0af26abea5d8b361fcec1ffe1\"><span data-lake-id=\"uba2c3ac9\" id=\"uba2c3ac9\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p data-lake-id=\"07f4feba31b01fa3081db7367cdffb18\" id=\"07f4feba31b01fa3081db7367cdffb18\"><span data-lake-id=\"u1ed9bf66\" id=\"u1ed9bf66\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span data-lake-id=\"u5fbe1612\" id=\"u5fbe1612\">提供了一套规范和约定</span></strong><span data-lake-id=\"ue851e0dd\" id=\"ue851e0dd\">。</span></p><p data-lake-id=\"cdae1020279af93b28bdf120d48fccda\" id=\"cdae1020279af93b28bdf120d48fccda\"><span data-lake-id=\"u9201fabb\" id=\"u9201fabb\">比如在开发类似项目时，他们都有以下特征：</span></p><ul list=\"u9c7b0d6a\"><li fid=\"ue5007b75\" data-lake-id=\"87f50a971760378fff4399a2eef909ec\" id=\"87f50a971760378fff4399a2eef909ec\"><span data-lake-id=\"u61247e35\" id=\"u61247e35\">相同的组织结构</span></li><li fid=\"ue5007b75\" data-lake-id=\"ade3ab0adab563b6694aefea1a2bad95\" id=\"ade3ab0adab563b6694aefea1a2bad95\"><span data-lake-id=\"uf02418de\" id=\"uf02418de\">相同的开发范式</span></li><li fid=\"ue5007b75\" data-lake-id=\"39c9bdc8966936673935c53ee4607e41\" id=\"39c9bdc8966936673935c53ee4607e41\"><span data-lake-id=\"uf8754778\" id=\"uf8754778\">相同的模块依赖</span></li><li fid=\"ue5007b75\" data-lake-id=\"07f5c73b4fefd013fffb949ed9c71bba\" id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span data-lake-id=\"u70fdc6d0\" id=\"u70fdc6d0\">相同的工具配置</span></li><li fid=\"ue5007b75\" data-lake-id=\"3dc5321383ac48f068b7ccd8db3b84cd\" id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span data-lake-id=\"u24d59e3e\" id=\"u24d59e3e\">相同的基础代码</span></li></ul><p data-lake-id=\"45f28bf233bd5a54a4c435c34b774829\" id=\"45f28bf233bd5a54a4c435c34b774829\"><span data-lake-id=\"u13a4fbc4\" id=\"u13a4fbc4\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p data-lake-id=\"2a402333b402665c5d003778c04649aa\" id=\"2a402333b402665c5d003778c04649aa\"><span data-lake-id=\"ube532606\" id=\"ube532606\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 data-lake-id=\"n1S8J\" id=\"n1S8J\"><span data-lake-id=\"u4588e8c7\" id=\"u4588e8c7\">Yeoman</span></h3><p data-lake-id=\"6e71447cdf53b36bca75977dd78e40f9\" id=\"6e71447cdf53b36bca75977dd78e40f9\"><span data-lake-id=\"uab762e2c\" id=\"uab762e2c\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code data-lake-id=\"uf24d8ce4\" id=\"uf24d8ce4\"><span data-lake-id=\"ueadd0cf3\" id=\"ueadd0cf3\">vue-cli</span></code><span data-lake-id=\"uc0677493\" id=\"uc0677493\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code data-lake-id=\"u724533e3\" id=\"u724533e3\"><span data-lake-id=\"udd9465e0\" id=\"udd9465e0\">Yeoman</span></code><span data-lake-id=\"u57f1a7a4\" id=\"u57f1a7a4\">搭配不同的</span><code data-lake-id=\"u8704cb4a\" id=\"u8704cb4a\"><span data-lake-id=\"u83aeafdf\" id=\"u83aeafdf\">generator</span></code><span data-lake-id=\"uafcb805a\" id=\"uafcb805a\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code data-lake-id=\"u16522b31\" id=\"u16522b31\"><span data-lake-id=\"u39a4b215\" id=\"u39a4b215\">generator</span></code><span data-lake-id=\"u9481d789\" id=\"u9481d789\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p data-lake-id=\"947ac1ac2bff3be7bacd231e8849d926\" id=\"947ac1ac2bff3be7bacd231e8849d926\"><br></p><p data-lake-id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\"><span data-lake-id=\"ud4d799b8\" id=\"ud4d799b8\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code data-lake-id=\"uce81b59f\" id=\"uce81b59f\"><span data-lake-id=\"u7a2c9589\" id=\"u7a2c9589\">vue-cli</span></code><span data-lake-id=\"u36681221\" id=\"u36681221\">这种专注于某个框架的脚手架。</span></p><h3 data-lake-id=\"tgPov\" id=\"tgPov\"><span data-lake-id=\"u27ed86c5\" id=\"u27ed86c5\">Yeoman基本使用</span></h3><h4 data-lake-id=\"kF8fE\" id=\"kF8fE\"><span data-lake-id=\"u32a5dec5\" id=\"u32a5dec5\">安装</span><code data-lake-id=\"ud08c2796\" id=\"ud08c2796\"><span data-lake-id=\"u6907f0a9\" id=\"u6907f0a9\">Yeoman</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20yo%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22UctVY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f7709d684c14977c491c71417b926a40\" id=\"f7709d684c14977c491c71417b926a40\"><span data-lake-id=\"u293a1e59\" id=\"u293a1e59\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 data-lake-id=\"ZB9tX\" id=\"ZB9tX\"><span data-lake-id=\"u79fe4734\" id=\"u79fe4734\">安装对应的</span><code data-lake-id=\"u6185a7da\" id=\"u6185a7da\"><span data-lake-id=\"u12849491\" id=\"u12849491\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20generator-node%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22AjYIe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"H0JOj\" id=\"H0JOj\"><span data-lake-id=\"u2947582c\" id=\"u2947582c\">通过</span><code data-lake-id=\"ua95853b0\" id=\"ua95853b0\"><span data-lake-id=\"ue5b291ec\" id=\"ue5b291ec\">yo</span></code><span data-lake-id=\"u9143c573\" id=\"u9143c573\">运行</span><code data-lake-id=\"u4a99be42\" id=\"u4a99be42\"><span data-lake-id=\"u75955163\" id=\"u75955163\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22A4OVz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" id=\"813cbeb31ce8bdce63bccb7753ebc0ac\"><span data-lake-id=\"u7869bcc6\" id=\"u7869bcc6\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p data-lake-id=\"567970277a390e29489bb7abcc78fc9b\" id=\"567970277a390e29489bb7abcc78fc9b\"><br></p><h3 data-lake-id=\"iGQPb\" id=\"iGQPb\"><span data-lake-id=\"u13581dc9\" id=\"u13581dc9\">Sub Generator</span></h3><p data-lake-id=\"63764b123afef28b5719a6f559b476ec\" id=\"63764b123afef28b5719a6f559b476ec\"><span data-lake-id=\"u3df000dd\" id=\"u3df000dd\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p data-lake-id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\"><br></p><p data-lake-id=\"80d578d3bc0a21e1d8325c6e51f6537d\" id=\"80d578d3bc0a21e1d8325c6e51f6537d\"><span data-lake-id=\"uf79d2bee\" id=\"uf79d2bee\">例如我们想运行</span><code data-lake-id=\"u0681e65d\" id=\"u0681e65d\"><span data-lake-id=\"u6eef3108\" id=\"u6eef3108\">generator-node</span></code><span data-lake-id=\"uffbc1618\" id=\"uffbc1618\">子集下面的cli命令，创建一个cli应用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%3Acli%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22itHe0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceac8b3ad92013955a96917234e89a6a\" id=\"ceac8b3ad92013955a96917234e89a6a\"><br></p><h2 data-lake-id=\"Vtd5i\" id=\"Vtd5i\"><span data-lake-id=\"ub8f2d24b\" id=\"ub8f2d24b\">自定义Generator</span></h2><p data-lake-id=\"e7777b3396c25ee50253db223ca52e92\" id=\"e7777b3396c25ee50253db223ca52e92\"><span data-lake-id=\"uee5b990d\" id=\"uee5b990d\">虽然市面上也有很多</span><code data-lake-id=\"ufbebab81\" id=\"ufbebab81\"><span data-lake-id=\"uc831a5fa\" id=\"uc831a5fa\">generator</span></code><span data-lake-id=\"uedf94604\" id=\"uedf94604\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code data-lake-id=\"u6240c313\" id=\"u6240c313\"><span data-lake-id=\"u53de307f\" id=\"u53de307f\">generator</span></code><span data-lake-id=\"u8385b73b\" id=\"u8385b73b\">。</span></p><p data-lake-id=\"97205b7f70cc38df9bdd6381147ad581\" id=\"97205b7f70cc38df9bdd6381147ad581\"><br></p><h3 data-lake-id=\"GOsVL\" id=\"GOsVL\"><span data-lake-id=\"ucee9cf39\" id=\"ucee9cf39\">创建Generator模块</span></h3><p data-lake-id=\"d6afb45aa645a0838bd647331fb54173\" id=\"d6afb45aa645a0838bd647331fb54173\"><span data-lake-id=\"ub265eadd\" id=\"ub265eadd\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22mkdir%20generator%5Cncd%20generator%5Cnyarn%20init%5Cnyarn%20add%20yeoman-generator%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kEYzQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3d884f7ed0face815245f6a5ac2a9a9e\" id=\"3d884f7ed0face815245f6a5ac2a9a9e\"><span data-lake-id=\"u797e24cf\" id=\"u797e24cf\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code data-lake-id=\"u5e955203\" id=\"u5e955203\"><span data-lake-id=\"ud6c4de0c\" id=\"ud6c4de0c\">generators/app/index.js</span></code><span data-lake-id=\"uda487af5\" id=\"uda487af5\">文件</span></p><p data-lake-id=\"1d49178701cccbb5059d5fb0a91c8f5f\" id=\"1d49178701cccbb5059d5fb0a91c8f5f\"><span data-lake-id=\"uf5e978c6\" id=\"uf5e978c6\">这个文件会作为</span><code data-lake-id=\"ud516e490\" id=\"ud516e490\"><span data-lake-id=\"u43447756\" id=\"u43447756\">Generator</span></code><span data-lake-id=\"u32837693\" id=\"u32837693\">的核心入口</span></p><p data-lake-id=\"7619f32339a07d42bf6dc2f080f2193d\" id=\"7619f32339a07d42bf6dc2f080f2193d\"><span data-lake-id=\"u553260c2\" id=\"u553260c2\">它需要导出一个继承自</span><code data-lake-id=\"u3d11baac\" id=\"u3d11baac\"><span data-lake-id=\"ub5d856f9\" id=\"ub5d856f9\">Yeoman Generator</span></code><span data-lake-id=\"u0be39170\" id=\"u0be39170\">的类</span></p><p data-lake-id=\"bacc3f5ab6b162acb14404949722f40a\" id=\"bacc3f5ab6b162acb14404949722f40a\"><span data-lake-id=\"u2e3050e7\" id=\"u2e3050e7\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p data-lake-id=\"9d5006b75fdc3bc94b297dcc927f628b\" id=\"9d5006b75fdc3bc94b297dcc927f628b\"><span data-lake-id=\"ucde9e4b9\" id=\"ucde9e4b9\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.write(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20this.destinationPath(%5C%22temp.txt%5C%22)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Math.random().toString()%5Cn%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22DZpLB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4931ef260fa23ecf2763bf7e84a8541b\" id=\"4931ef260fa23ecf2763bf7e84a8541b\"><span data-lake-id=\"u5c9cc00c\" id=\"u5c9cc00c\">然后我们把这个模块，挂载到本地全局上</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20link%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22pJuu8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f91fb4526321f3e477467a49d911317a\" id=\"f91fb4526321f3e477467a49d911317a\"><span data-lake-id=\"u75cfc814\" id=\"u75cfc814\">接着就可以使用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20simple%20%20%2F%2F%20simple%20%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22r7HSb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"K2W5G\" id=\"K2W5G\"><span data-lake-id=\"ub127323c\" id=\"ub127323c\">根据模板创建文件</span></h3><p data-lake-id=\"a1fb2fda7663118ce3a48917cbb98917\" id=\"a1fb2fda7663118ce3a48917cbb98917\"><span data-lake-id=\"u7a7c45dd\" id=\"u7a7c45dd\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p data-lake-id=\"8dc055009d114168f171f6a1dc5181f9\" id=\"8dc055009d114168f171f6a1dc5181f9\"><span data-lake-id=\"u2cb80fe9\" id=\"u2cb80fe9\">在app目录下创建</span><code data-lake-id=\"ubda2118b\" id=\"ubda2118b\"><span data-lake-id=\"ub5c9d701\" id=\"ub5c9d701\">templates/foo.txt</span></code><span data-lake-id=\"u081027aa\" id=\"u081027aa\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code data-lake-id=\"uf304d685\" id=\"uf304d685\"><span data-lake-id=\"u993498ab\" id=\"u993498ab\">&lt;%= title %&gt;</span></code><span data-lake-id=\"u280436be\" id=\"u280436be\">动态输出内容，也可以做一些判断、循环的操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20tmpl%20%3D%20this.templatePath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BE%93%E5%87%BA%E7%9B%AE%E6%A0%87%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20output%20%3D%20this.destinationPath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87%5Cn%20%20%20%20%20%20%20%20%20%20const%20context%20%3D%20%7Btitle%3A%20%5C%22Hello%20xsl~%5C%22%7D%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20context)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22NRHkn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"41d4df42f2e1c49170cdd872db525534\" id=\"41d4df42f2e1c49170cdd872db525534\"><span data-lake-id=\"u378646ce\" id=\"u378646ce\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p data-lake-id=\"59b219ee88b413579d46edbf26ff0cd2\" id=\"59b219ee88b413579d46edbf26ff0cd2\"><br></p><h3 data-lake-id=\"XepZf\" id=\"XepZf\"><span data-lake-id=\"u2fcaf512\" id=\"u2fcaf512\">接收用户输入</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20...%5Cnprompting()%20%7B%5Cn%20%20%20%2F%2F%20Yeoman%20%E5%9C%A8%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E8%8A%82%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%2F%2F%20%20%E5%9C%A8%E6%AD%A4%E6%96%B9%E6%B3%95%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84prompt()%20%E6%96%B9%E6%B3%95%E5%8F%91%E5%87%BA%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A2%E9%97%AE%5Cn%20%20%20return%20this.prompt(%5B%7B%5Cn%20%20%20%20%20%20type%3A%20%5C%22input%5C%22%2C%5Cn%20%20%20%20%20%20name%3A%20%5C%22name%5C%22%2C%5Cn%20%20%20%20%20%20message%3A%5C%22Your%20project%20name%5C%22%2C%5Cn%20%20%20%20%20%20default%3A%20this.appname%2C%20%2F%2F%20appname%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%7D%5D).then(answers%20%3D%3E%20%7B%5Cn%20%20%20%20%20this.answers%20%3D%20answers%5Cn%20%20%20%7D)%5Cn%7D%5Cnwriting()%7B%5Cn%20%20%20%2F%2F%20...%5Cn%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20this.answers)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qEFYB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"eXNQ4\" id=\"eXNQ4\"><span data-lake-id=\"u425a213f\" id=\"u425a213f\">Plop</span></h2><p data-lake-id=\"04bb18225809481c4cbc3d41eae336cc\" id=\"04bb18225809481c4cbc3d41eae336cc\"><span data-lake-id=\"ud698a0eb\" id=\"ud698a0eb\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p data-lake-id=\"36e30a882a7a8d73579aaf52e808f7fb\" id=\"36e30a882a7a8d73579aaf52e808f7fb\"><span data-lake-id=\"uec65ea81\" id=\"uec65ea81\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol list=\"u0551e1dd\"><li fid=\"u5ffd975a\" data-lake-id=\"u6eb65025\" id=\"u6eb65025\"><span data-lake-id=\"u0ff7b416\" id=\"u0ff7b416\">将Plop模块作为项目开发依赖安装</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u8596f26f\" id=\"u8596f26f\"><span data-lake-id=\"u9dc9bc31\" id=\"u9dc9bc31\">在项目根目录下创建一个plopfile.js文件</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u05d99019\" id=\"u05d99019\"><span data-lake-id=\"u0749f652\" id=\"u0749f652\">在plopfile.js文件中定义脚手架任务</span></li><li fid=\"u5ffd975a\" data-lake-id=\"uaa4745c1\" id=\"uaa4745c1\"><span data-lake-id=\"u1f9c54c0\" id=\"u1f9c54c0\">编写用于生成特定类型文件的模板</span></li><li fid=\"u5ffd975a\" data-lake-id=\"ud5c3be8a\" id=\"ud5c3be8a\"><span data-lake-id=\"u4c64d8f6\" id=\"u4c64d8f6\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p data-lake-id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" id=\"ee85b5bcf99f1e2988f97c5b711bcd34\"><br></p><h2 data-lake-id=\"bmH42\" id=\"bmH42\"><span data-lake-id=\"u5bd4c3e7\" id=\"u5bd4c3e7\">脚手架工作原理</span></h2><p data-lake-id=\"ufc46286c\" id=\"ufc46286c\"><span data-lake-id=\"ufa24ebd6\" id=\"ufa24ebd6\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p data-lake-id=\"45a1809166e515f21f299c74efed1e27\" id=\"45a1809166e515f21f299c74efed1e27\"><br></p><h2 data-lake-id=\"kzFtP\" id=\"kzFtP\"><span data-lake-id=\"u84bad02b\" id=\"u84bad02b\">自动化构建</span></h2><blockquote data-lake-id=\"u6fd49020\" id=\"u6fd49020\"><p data-lake-id=\"ub7e5f02f\" id=\"ub7e5f02f\"><span data-lake-id=\"u7e9be0b0\" id=\"u7e9be0b0\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></blockquote><p data-lake-id=\"9a32ced10e6459e239a05a1a1e5df1bb\" id=\"9a32ced10e6459e239a05a1a1e5df1bb\"><span data-lake-id=\"uf529b7e4\" id=\"uf529b7e4\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p data-lake-id=\"d18acf5af7787992ff284a698d01d418\" id=\"d18acf5af7787992ff284a698d01d418\"><br></p><p data-lake-id=\"2736b42029477f90d7bcd9cd0cf4929d\" id=\"2736b42029477f90d7bcd9cd0cf4929d\"><span data-lake-id=\"u294e7de4\" id=\"u294e7de4\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p data-lake-id=\"96334d6e3c97e357fbf85c11c11ccd26\" id=\"96334d6e3c97e357fbf85c11c11ccd26\"><br></p><h2 data-lake-id=\"We1Dg\" id=\"We1Dg\"><span data-lake-id=\"uce2467ce\" id=\"uce2467ce\">NPM Scripts自动构建工作流</span></h2><p data-lake-id=\"u05daf93d\" id=\"u05daf93d\"><span data-lake-id=\"uc1dee9cc\" id=\"uc1dee9cc\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p data-lake-id=\"u75895150\" id=\"u75895150\"><span data-lake-id=\"u493035c0\" id=\"u493035c0\">在启动serve之前构建项目：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22preserve%5C%22%3A%20%5C%22yarn%20build%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HwiWx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\"><span data-lake-id=\"ua5a9349c\" id=\"ua5a9349c\">同时执行多个任务：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20add%20npm-run-all%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22SkcZV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u390d0a26\" id=\"u390d0a26\"><span data-lake-id=\"ub13e0d6a\" id=\"ub13e0d6a\">然后在scripts中添加：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22vQPuB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"30746ddfc4aee0df1a14a5759fbd2da0\" id=\"30746ddfc4aee0df1a14a5759fbd2da0\"><span data-lake-id=\"u16ae39d6\" id=\"u16ae39d6\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%20--files%20%5C%5C%E2%80%9Ccss%2F*.css%5C%5C%5C%22%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22BTiLz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"924fbd896dfc87f378125e354a4653cd\" id=\"924fbd896dfc87f378125e354a4653cd\"><br></p><h2 data-lake-id=\"MTfJX\" id=\"MTfJX\"><span data-lake-id=\"u499bea89\" id=\"u499bea89\">常见的自动化构建工具</span></h2><blockquote data-lake-id=\"u2e8dadc2\" id=\"u2e8dadc2\"><p data-lake-id=\"077ede272d301418bbaba7486729e376\" id=\"077ede272d301418bbaba7486729e376\"><span data-lake-id=\"ubbab3705\" id=\"ubbab3705\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></blockquote><h3 data-lake-id=\"mUW98\" id=\"mUW98\"><span data-lake-id=\"u30b1b51f\" id=\"u30b1b51f\">Grunt</span></h3><p data-lake-id=\"ufef91aad\" id=\"ufef91aad\"><span data-lake-id=\"uc9638db0\" id=\"uc9638db0\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p data-lake-id=\"u5de15af5\" id=\"u5de15af5\"><br></p><h3 data-lake-id=\"Gvli3\" id=\"Gvli3\"><span data-lake-id=\"u100cd57c\" id=\"u100cd57c\">Gulp</span></h3><p data-lake-id=\"ua9d9c760\" id=\"ua9d9c760\"><span data-lake-id=\"u8710bd46\" id=\"u8710bd46\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p data-lake-id=\"ud3041ade\" id=\"ud3041ade\"><br></p><h3 data-lake-id=\"c0d3i\" id=\"c0d3i\"><span data-lake-id=\"ubeea5e24\" id=\"ubeea5e24\">FIS</span></h3><p data-lake-id=\"u7282cedc\" id=\"u7282cedc\"><span data-lake-id=\"ud0645e9a\" id=\"ud0645e9a\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p data-lake-id=\"u327bc84a\" id=\"u327bc84a\"><span data-lake-id=\"u0bd847d8\" id=\"u0bd847d8\">​</span><br></p><p data-lake-id=\"u8ac951e3\" id=\"u8ac951e3\"><br></p><p data-lake-id=\"u375590bd\" id=\"u375590bd\"><br></p><p data-lake-id=\"uf6653213\" id=\"uf6653213\"><br></p><p data-lake-id=\"u628e2d18\" id=\"u628e2d18\"><br></p><p data-lake-id=\"u61ca0a14\" id=\"u61ca0a14\"><br></p><p data-lake-id=\"u84a9f2af\" id=\"u84a9f2af\"><br></p><p data-lake-id=\"udc9acb9f\" id=\"udc9acb9f\"><br></p><p data-lake-id=\"u23533efc\" id=\"u23533efc\"><br></p><p data-lake-id=\"uf7120598\" id=\"uf7120598\"><br></p><p data-lake-id=\"u00128f39\" id=\"u00128f39\"><br></p><p data-lake-id=\"u16ba130f\" id=\"u16ba130f\"><br></p><p data-lake-id=\"u710f7f9f\" id=\"u710f7f9f\"><br></p><p data-lake-id=\"u66d7a1fe\" id=\"u66d7a1fe\"><br></p><p data-lake-id=\"u82dfb0b3\" id=\"u82dfb0b3\"><br></p><p data-lake-id=\"ue4c6d16f\" id=\"ue4c6d16f\"><br></p><p data-lake-id=\"u4a729b96\" id=\"u4a729b96\"><br></p><p data-lake-id=\"uf23cedb5\" id=\"uf23cedb5\"><br></p><p data-lake-id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" id=\"99e89eccc910a5e2ae2e84c93d83ad4d\"><br></p><p data-lake-id=\"c6dbb935ccf191afd0f115adcd1c3681\" id=\"c6dbb935ccf191afd0f115adcd1c3681\"><br></p><p data-lake-id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\"><br></p><p data-lake-id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" id=\"c5d22b80c6cd657f1844c8fcb207b7f8\"><br></p><p data-lake-id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" id=\"60d72f9f7aa1cf6553c00edc441f2fc5\"><br></p><p data-lake-id=\"807a0f067997266561dbadbcac84799d\" id=\"807a0f067997266561dbadbcac84799d\"><br></p><p data-lake-id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\"><br></p><p data-lake-id=\"7b918194a737f5e23fe42f911e7b2f41\" id=\"7b918194a737f5e23fe42f911e7b2f41\"><br></p><p data-lake-id=\"6e415308ee3e17698f477ae2b17a36b3\" id=\"6e415308ee3e17698f477ae2b17a36b3\"><br></p><p data-lake-id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\"><br></p><p data-lake-id=\"a93901365cafffe8b0094d5fc1649a2c\" id=\"a93901365cafffe8b0094d5fc1649a2c\"><br></p><p data-lake-id=\"b0dffc3ac245c3c336a8904992538e80\" id=\"b0dffc3ac245c3c336a8904992538e80\"><br></p><p data-lake-id=\"f9b156de99ec06197292f284ee10c9f5\" id=\"f9b156de99ec06197292f284ee10c9f5\"><br></p><p data-lake-id=\"4f63866ba6b48598c77497227be68e3e\" id=\"4f63866ba6b48598c77497227be68e3e\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-06-27T03:49:40.000Z",
    "deleted_at": null,
    "created_at": "2021-06-07T01:49:08.000Z",
    "updated_at": "2021-06-27T03:49:40.000Z",
    "published_at": "2021-06-27T03:49:40.000Z",
    "first_published_at": "2021-06-07T07:07:06.000Z",
    "word_count": 2917,
    "cover": null,
    "description": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！工程化概述前端工程化是指遵循一定...",
    "custom_description": null,
    "hits": 5,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46070568,
    "slug": "cmdzmq",
    "title": "JS性能优化",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"i1eB3\"></a>\n## 内存管理\n内存为什么需要管理？<br />如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。\n\n- 内存：由可读写单元组成，表示一片可操作空间\n- 管理：人为的去操作一片空间的申请、使用和释放。\n- 内存管理: 开发者主动申请空间、使用空间、释放空间。\n- 管理流程:申请一使用一释放\n```javascript\n// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）\nlet obj = {}\n// 使用空间\nobj.name = 1\n// 释放空间\nobj = null\n```\n\n\n<a name=\"OWSFc\"></a>\n## JS中的垃圾回收\n对象在什么情况下会被视为垃圾？\n\n- JS中的垃圾回收是自动的\n- 当对象不再被引用时，被视为垃圾\n- 对象不能从根(全局执行上下文)上访问到时是垃圾\n```javascript\nlet obj = {name: 11} \nlet ali = obj\nobj = null // {name: 11} 被ali引用，不是一个垃圾\n```\n\n\n<a name=\"SJ4dA\"></a>\n## GC算法\nGC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。<br />那么什么样的东西可以被当作垃圾呢？\n\n- 程序中不再使用的对象\n- 程序中能再访问的对象\n\nGC算法：算法就是工作时查找和回收所遵循的规则。<br />常见的GC算法有：\n\n- 引用计数\n\n     判断对象的引用来决定是不是垃圾\n\n- 标记清除\n\n     给活动对象添加标记，来判断他是不是垃圾\n\n- 标记整理\n\n     类似标记清除\n\n- 分代回收\n\n\n\n<a name=\"a4eQ0\"></a>\n## 引用计数算法实现原理\n核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。<br />\n<br />当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。<br />引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。<br />\n\n<a name=\"KSzgb\"></a>\n### 引用计数算法的优缺点\n<a name=\"NYKWp\"></a>\n#### 优点\n\n- 发现垃圾时立即回收\n\n如果引用为0就会立即进行回收、释放\n\n- 最大限度减少程序暂停\n\n由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。<br />\n\n<a name=\"JQ2ki\"></a>\n#### 缺点\n\n- 无法回收循环引用的对象\n```javascript\nfunction fn() {\n\tconst obj1 = {}\n  const obj2 = {}\n  // 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了\n  // 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。\n  obj1.name = obj2\n  obj2.name = obj1\n  \n  return 'ok'\n}\nfn() // 当函数执行完毕，会释放里面的空间\n```\n\n- 时间开销大\n\n需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点<br />\n\n<a name=\"l6fT2\"></a>\n## 标记清除算法实现原理\n> 标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。\n\n核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。\n<a name=\"ZuPlu\"></a>\n### 标记清除算法的优缺点\n<a name=\"MDeW8\"></a>\n#### 优点\n\n- 解决了引用计数算法中对象循环引用无法回收的问题\n\n标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。\n<a name=\"sXQJL\"></a>\n#### 缺点\n\n- 不会立即回收对象\n\n       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。\n\n- 空间碎片化\n\n回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。<br />\n\n<a name=\"CcfMF\"></a>\n## 标记整理算法实现原理\n> 和标记清除算法一样，标记整理算法在V8也被频繁使用\n\n标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。<br />\n<br />但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。<br />\n<br />这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。<br />\n\n<a name=\"hPlDu\"></a>\n### 标记整理算法优缺点\n<a name=\"x4mSu\"></a>\n#### 优点\n减少碎片化空间\n<a name=\"eMzeK\"></a>\n#### 缺点\n不会立即回收垃圾对象<br />\n\n<a name=\"kkh47\"></a>\n## V8\nV8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。<br />V8内存的上限设定：64位1.5G   32位800M\n<a name=\"pazTz\"></a>\n### V8垃圾回收策略\n采用分代回收的思想，把内存空间按照一定的规则分为两类，**新生代**存储区和**老生代**存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。<br />\n\n<a name=\"nfYoM\"></a>\n### V8中常用的GC算法\n\n- 分代回收\n- 空间复制\n- 标记清除\n- 标记整理\n- 标记增量\n<a name=\"yplWV\"></a>\n### V8如何回收新生代对象\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png#align=left&display=inline&height=89&id=ubca4cc3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=831&size=12542&status=done&style=shadow&width=749)<br />如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；<br />**新生代指的是存活时间较短的对象**。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。<br />那么，V8是如何完成新生代对象回收的呢？\n<a name=\"f2HMO\"></a>\n#### 新生代对象回收实现\n回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。\n<a name=\"ChXnK\"></a>\n#### 回收细节\n如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生**晋升**的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。<br />判断是否晋升的条件有以下几个：\n\n- 经过一轮GC还存活的新生代对象需要晋升\n\n如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。\n\n- 在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。\n\nTo空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。<br />\n\n<a name=\"qM202\"></a>\n### V8如何回收老生代对象\n如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。\n<a name=\"BOoO7\"></a>\n### 老生代对象回收实现\n主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。\n<a name=\"UN1OR\"></a>\n#### 新老代细节对比\n新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。<br />\n\n<a name=\"wyMkD\"></a>\n## 标记增量如何优化垃圾回收\n当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。\n",
    "body_draft": "<a name=\"i1eB3\"></a>\n## 内存管理\n内存为什么需要管理？<br />如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。\n\n- 内存：由可读写单元组成，表示一片可操作空间\n- 管理：人为的去操作一片空间的申请、使用和释放。\n- 内存管理: 开发者主动申请空间、使用空间、释放空间。\n- 管理流程:申请一使用一释放\n```javascript\n// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）\nlet obj = {}\n// 使用空间\nobj.name = 1\n// 释放空间\nobj = null\n```\n\n\n<a name=\"OWSFc\"></a>\n## JS中的垃圾回收\n对象在什么情况下会被视为垃圾？\n\n- JS中的垃圾回收是自动的\n- 当对象不再被引用时，被视为垃圾\n- 对象不能从根(全局执行上下文)上访问到时是垃圾\n```javascript\nlet obj = {name: 11} \nlet ali = obj\nobj = null // {name: 11} 被ali引用，不是一个垃圾\n```\n\n\n<a name=\"SJ4dA\"></a>\n## GC算法\nGC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。<br />那么什么样的东西可以被当作垃圾呢？\n\n- 程序中不再使用的对象\n- 程序中能再访问的对象\n\nGC算法：算法就是工作时查找和回收所遵循的规则。<br />常见的GC算法有：\n\n- 引用计数\n\n     判断对象的引用来决定是不是垃圾\n\n- 标记清除\n\n     给活动对象添加标记，来判断他是不是垃圾\n\n- 标记整理\n\n     类似标记清除\n\n- 分代回收\n\n\n\n<a name=\"a4eQ0\"></a>\n## 引用计数算法实现原理\n核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。<br />\n<br />当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。<br />引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。<br />\n\n<a name=\"KSzgb\"></a>\n### 引用计数算法的优缺点\n<a name=\"NYKWp\"></a>\n#### 优点\n\n- 发现垃圾时立即回收\n\n如果引用为0就会立即进行回收、释放\n\n- 最大限度减少程序暂停\n\n由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。<br />\n\n<a name=\"JQ2ki\"></a>\n#### 缺点\n\n- 无法回收循环引用的对象\n```javascript\nfunction fn() {\n\tconst obj1 = {}\n  const obj2 = {}\n  // 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了\n  // 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。\n  obj1.name = obj2\n  obj2.name = obj1\n  \n  return 'ok'\n}\nfn() // 当函数执行完毕，会释放里面的空间\n```\n\n- 时间开销大\n\n需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点<br />\n\n<a name=\"l6fT2\"></a>\n## 标记清除算法实现原理\n> 标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。\n\n核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。\n<a name=\"ZuPlu\"></a>\n### 标记清除算法的优缺点\n<a name=\"MDeW8\"></a>\n#### 优点\n\n- 解决了引用计数算法中对象循环引用无法回收的问题\n\n标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。\n<a name=\"sXQJL\"></a>\n#### 缺点\n\n- 不会立即回收对象\n\n       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。\n\n- 空间碎片化\n\n回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。<br />\n\n<a name=\"CcfMF\"></a>\n## 标记整理算法实现原理\n> 和标记清除算法一样，标记整理算法在V8也被频繁使用\n\n标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。<br />\n<br />但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。<br />\n<br />这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。<br />\n\n<a name=\"hPlDu\"></a>\n### 标记整理算法优缺点\n<a name=\"x4mSu\"></a>\n#### 优点\n减少碎片化空间\n<a name=\"eMzeK\"></a>\n#### 缺点\n不会立即回收垃圾对象<br />\n\n<a name=\"kkh47\"></a>\n## V8\nV8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。<br />V8内存的上限设定：64位1.5G   32位800M\n<a name=\"pazTz\"></a>\n### V8垃圾回收策略\n采用分代回收的思想，把内存空间按照一定的规则分为两类，**新生代**存储区和**老生代**存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。<br />\n\n<a name=\"nfYoM\"></a>\n### V8中常用的GC算法\n\n- 分代回收\n- 空间复制\n- 标记清除\n- 标记整理\n- 标记增量\n<a name=\"yplWV\"></a>\n### V8如何回收新生代对象\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png#align=left&display=inline&height=89&id=ubca4cc3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=831&size=12542&status=done&style=shadow&width=749)<br />如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；<br />**新生代指的是存活时间较短的对象**。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。<br />那么，V8是如何完成新生代对象回收的呢？\n<a name=\"f2HMO\"></a>\n#### 新生代对象回收实现\n回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。\n<a name=\"ChXnK\"></a>\n#### 回收细节\n如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生**晋升**的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。<br />判断是否晋升的条件有以下几个：\n\n- 经过一轮GC还存活的新生代对象需要晋升\n\n如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。\n\n- 在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。\n\nTo空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。<br />\n\n<a name=\"qM202\"></a>\n### V8如何回收老生代对象\n如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。\n<a name=\"BOoO7\"></a>\n### 老生代对象回收实现\n主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。\n<a name=\"UN1OR\"></a>\n#### 新老代细节对比\n新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。<br />\n\n<a name=\"wyMkD\"></a>\n## 标记增量如何优化垃圾回收\n当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional show-placeholder\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%5D%2C%5B0%5D%5D%2C%22active%22%3Atrue%7D\"><h2 data-lake-id=\"i1eB3\" id=\"i1eB3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>内存管理</span></h2><p data-lake-id=\"3ed4a301309484107f017d569b990dd1\" id=\"3ed4a301309484107f017d569b990dd1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>内存为什么需要管理？</span></p><p data-lake-id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span></p><ul data-lake-id=\"a8192eaf983bf0332e78374d8c6d0f09_ul_0\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span>内存：由可读写单元组成，表示一片可操作空间</span></li><li data-lake-id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span>管理：人为的去操作一片空间的申请、使用和释放。</span></li><li data-lake-id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span>内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li data-lake-id=\"3dd0a478e0ac8848f92a72dc70441467\"><span>管理流程:申请一使用一释放</span></li></ul><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"lOC05\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 使用空间</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 释放空间</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span></span></span></pre></div></div></div><p data-lake-id=\"b0081576b73a0fd9875ea9d6235b58a7\" id=\"b0081576b73a0fd9875ea9d6235b58a7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"OWSFc\" id=\"OWSFc\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>JS中的垃圾回收</span></h2><p data-lake-id=\"u999b7739\" id=\"u999b7739\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>对象在什么情况下会被视为垃圾？</span></p><ul data-lake-id=\"405e022c89cfb8f5849fc65c03c208b6_ul_1\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span>JS中的垃圾回收是自动的</span></li><li data-lake-id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span>当对象不再被引用时，被视为垃圾</span></li><li data-lake-id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span>对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"HWLSc\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">11</span>} \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ali</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span> <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// {name: 11} 被ali引用，不是一个垃圾</span></span></span></pre></div></div></div><p data-lake-id=\"744a212f9e7d0ca5bf8db2d102991b55\" id=\"744a212f9e7d0ca5bf8db2d102991b55\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"SJ4dA\" id=\"SJ4dA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>GC算法</span></h2><p data-lake-id=\"ab4d248ed5019a210126e0c8c16f4bbf\" id=\"ab4d248ed5019a210126e0c8c16f4bbf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p data-lake-id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>那么什么样的东西可以被当作垃圾呢？</span></p><ul data-lake-id=\"dcbd052414dfae5745a366dd48a067c2_ul_2\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"a6ff021f080f8cc705e48cb4517b1492\"><span>程序中不再使用的对象</span></li><li data-lake-id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span>程序中能再访问的对象</span></li></ul><p data-lake-id=\"411f9a0e735a919d55003880da3bd660\" id=\"411f9a0e735a919d55003880da3bd660\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p data-lake-id=\"8798931f20afa627222e13ef6c35359b\" id=\"8798931f20afa627222e13ef6c35359b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>常见的GC算法有：</span></p><ul data-lake-id=\"1cb9421d91bb5406bb3954ff63fb5079_ul_3\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span>引用计数</span></li></ul><p data-lake-id=\"98731bd03a205e78a79da038ba1045a8\" id=\"98731bd03a205e78a79da038ba1045a8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>     判断对象的引用来决定是不是垃圾</span></p><ul data-lake-id=\"bd92a44c12ee3a5ffbb559ecbb59988f_ul_4\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"c425fbcbd3e712658fccd70b64f7d877\"><span>标记清除</span></li></ul><p data-lake-id=\"48fd1e6ab75d04887058f1b595603458\" id=\"48fd1e6ab75d04887058f1b595603458\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>     给活动对象添加标记，来判断他是不是垃圾</span></p><ul data-lake-id=\"6cfd6253bf8464133095877661b6ee6d_ul_5\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"97d2b53baa97ae25f5357791db807563\"><span>标记整理</span></li></ul><p data-lake-id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>     类似标记清除</span></p><ul data-lake-id=\"4fadd3e3356b5ce30c26959055703153_ul_6\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"d17f0a5311a8746763290ba5074f7b80\"><span>分代回收</span></li></ul><p data-lake-id=\"77511a1169f5d183b2ef7207363ccbaa\" id=\"77511a1169f5d183b2ef7207363ccbaa\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"a4eQ0\" id=\"a4eQ0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>引用计数算法实现原理</span></h2><p data-lake-id=\"ebcf02bb5e61ef0dd4f012c200870762\" id=\"ebcf02bb5e61ef0dd4f012c200870762\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p data-lake-id=\"ucc3bdc85\" id=\"ucc3bdc85\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"180498aa3cae6ce1130ab6ac43da55c6\" id=\"180498aa3cae6ce1130ab6ac43da55c6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p data-lake-id=\"u902d73f2\" id=\"u902d73f2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p data-lake-id=\"uae16e0aa\" id=\"uae16e0aa\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 data-lake-id=\"KSzgb\" id=\"KSzgb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>引用计数算法的优缺点</span></h3><h4 data-lake-id=\"NYKWp\" id=\"NYKWp\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>优点</span></h4><ul data-lake-id=\"24c602bdba2f0f8c27ddb851be5ab865_ul_7\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ube1b554e\"><span>发现垃圾时立即回收</span></li></ul><p data-lake-id=\"u6f712f22\" id=\"u6f712f22\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果引用为0就会立即进行回收、释放</span></p><ul data-lake-id=\"011585729a50b631dda0f35fc66cd306_ul_8\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"udc2e1992\"><span>最大限度减少程序暂停</span></li></ul><p data-lake-id=\"ue027de04\" id=\"ue027de04\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p data-lake-id=\"ua7150238\" id=\"ua7150238\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h4 data-lake-id=\"JQ2ki\" id=\"JQ2ki\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>缺点</span></h4><ul data-lake-id=\"6fcf7074a7d5bf90e565fcf627abe64b_ul_9\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"uac835717\"><span>无法回收循环引用的对象</span></li></ul><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"u84h9\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>() {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj1</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj2</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj1</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj2</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj2</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">obj1</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'ok'</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>() <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 当函数执行完毕，会释放里面的空间</span></span></span></pre></div></div></div><ul data-lake-id=\"36c1397d1811637e78e1a1bca86079b3_ul_10\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ud3c4ce49\"><span>时间开销大</span></li></ul><p data-lake-id=\"ude675e9f\" id=\"ude675e9f\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p data-lake-id=\"ue7480f80\" id=\"ue7480f80\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"l6fT2\" id=\"l6fT2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>标记清除算法实现原理</span></h2><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"uea79233d\" id=\"uea79233d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></blockquote><p data-lake-id=\"u47c36318\" id=\"u47c36318\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 data-lake-id=\"ZuPlu\" id=\"ZuPlu\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>标记清除算法的优缺点</span></h3><h4 data-lake-id=\"MDeW8\" id=\"MDeW8\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>优点</span></h4><ul data-lake-id=\"509748cecf99eda2e22c9f583f60d0dc_ul_11\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"u1f059613\"><span>解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p data-lake-id=\"u4ea8692f\" id=\"u4ea8692f\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 data-lake-id=\"sXQJL\" id=\"sXQJL\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>缺点</span></h4><ul data-lake-id=\"7199d803182e8291996da34b43e8cd1e_ul_12\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"u5d173730\"><span>不会立即回收对象</span></li></ul><p data-lake-id=\"c196c8cd1b1c3af12971cc33a795c11f\" id=\"c196c8cd1b1c3af12971cc33a795c11f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul data-lake-id=\"259396135a66569a717e52c61c0d836e_ul_13\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"c66739eb16ad7259c0f8c6266f067a18\"><span>空间碎片化</span></li></ul><p data-lake-id=\"u35c36092\" id=\"u35c36092\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p data-lake-id=\"3e4e66ed660724cc8561b95418fe4194\" id=\"3e4e66ed660724cc8561b95418fe4194\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"CcfMF\" id=\"CcfMF\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>标记整理算法实现原理</span></h2><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"u4ef6d3db\" id=\"u4ef6d3db\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></blockquote><p data-lake-id=\"1210fe16630370d68dc58f767d5f064a\" id=\"1210fe16630370d68dc58f767d5f064a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p data-lake-id=\"7ea118596bad803afe4343db54d62fac\" id=\"7ea118596bad803afe4343db54d62fac\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e6ec6769e8dddc37df070278172754a2\" id=\"e6ec6769e8dddc37df070278172754a2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p data-lake-id=\"4e60332e04d2aedeb479c71764b2f763\" id=\"4e60332e04d2aedeb479c71764b2f763\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c64cc78c8b336099f356cc72e10e6b69\" id=\"c64cc78c8b336099f356cc72e10e6b69\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p data-lake-id=\"10da3079833c154f76295ef3264ba8fc\" id=\"10da3079833c154f76295ef3264ba8fc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 data-lake-id=\"hPlDu\" id=\"hPlDu\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>标记整理算法优缺点</span></h3><h4 data-lake-id=\"x4mSu\" id=\"x4mSu\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>优点</span></h4><p data-lake-id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>减少碎片化空间</span></p><h4 data-lake-id=\"eMzeK\" id=\"eMzeK\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>缺点</span></h4><p data-lake-id=\"18f8cbb8e47a4bd5092de7dccfed182b\" id=\"18f8cbb8e47a4bd5092de7dccfed182b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>不会立即回收垃圾对象</span></p><p data-lake-id=\"df7f29a51628e2757fb1455d7100be71\" id=\"df7f29a51628e2757fb1455d7100be71\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"kkh47\" id=\"kkh47\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>V8</span></h2><p data-lake-id=\"b201485eb2f8942dec72d83b9f9850f3\" id=\"b201485eb2f8942dec72d83b9f9850f3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p data-lake-id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>V8内存的上限设定：64位1.5G   32位800M</span></p><h3 data-lake-id=\"pazTz\" id=\"pazTz\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>V8垃圾回收策略</span></h3><p data-lake-id=\"u9c685dac\" id=\"u9c685dac\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span>新生代</span></strong><span>存储区和</span><strong><span>老生代</span></strong><span>存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><div data-card-type=\"block\" data-lake-card=\"flowchart2\" id=\"ol4HT\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg\" height=\"443/\"></div><p data-lake-id=\"06e4b36b0241a2becc72994d2292356c\" id=\"06e4b36b0241a2becc72994d2292356c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 data-lake-id=\"nfYoM\" id=\"nfYoM\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>V8中常用的GC算法</span></h3><ul data-lake-id=\"56650efc42c729bb0c1116ee46327943_ul_14\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"u04b5b087\"><span>分代回收</span></li><li data-lake-id=\"u9084b809\"><span>空间复制</span></li><li data-lake-id=\"udb480781\"><span>标记清除</span></li><li data-lake-id=\"u9209e5b2\"><span>标记整理</span></li><li data-lake-id=\"ub48e7a64\"><span>标记增量</span></li></ul><h3 data-lake-id=\"yplWV\" id=\"yplWV\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>V8如何回收新生代对象</span></h3><p data-lake-id=\"ucb62e279\" id=\"ucb62e279\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" id=\"ubca4cc3b\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"89px\" style=\"visibility: visible; width: 749px;\"></span></p><p data-lake-id=\"ub4e6f2f7\" id=\"ub4e6f2f7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p data-lake-id=\"ub7fcb526\" id=\"ub7fcb526\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>新生代指的是存活时间较短的对象</span></strong><span>。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p data-lake-id=\"u6462d8cf\" id=\"u6462d8cf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>那么，V8是如何完成新生代对象回收的呢？</span></p><h4 data-lake-id=\"f2HMO\" id=\"f2HMO\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>新生代对象回收实现</span></h4><p data-lake-id=\"u0edc7469\" id=\"u0edc7469\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 data-lake-id=\"ChXnK\" id=\"ChXnK\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>回收细节</span></h4><p data-lake-id=\"u2a6a5439\" id=\"u2a6a5439\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span>晋升</span></strong><span>的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p data-lake-id=\"u6f89bcf8\" id=\"u6f89bcf8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>判断是否晋升的条件有以下几个：</span></p><ul data-lake-id=\"329df46bb89a28a3eaf34031c211aa8b_ul_15\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"uc587a861\"><span>经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p data-lake-id=\"ue13d4ee4\" id=\"ue13d4ee4\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul data-lake-id=\"2b1ef40efdeb1554c71540208d25a31c_ul_16\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ue5e2206a\"><span>在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p data-lake-id=\"u1cc36f07\" id=\"u1cc36f07\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p data-lake-id=\"u2e97449b\" id=\"u2e97449b\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 data-lake-id=\"qM202\" id=\"qM202\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>V8如何回收老生代对象</span></h3><p data-lake-id=\"da1723261339c23350c949641abbe4cf\" id=\"da1723261339c23350c949641abbe4cf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 data-lake-id=\"BOoO7\" id=\"BOoO7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>老生代对象回收实现</span></h3><p data-lake-id=\"9a3270127d0f0fc475d5faa883e4bdb2\" id=\"9a3270127d0f0fc475d5faa883e4bdb2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 data-lake-id=\"UN1OR\" id=\"UN1OR\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>新老代细节对比</span></h4><p data-lake-id=\"ea1437ffcfb5ee946525ad5611952daf\" id=\"ea1437ffcfb5ee946525ad5611952daf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p data-lake-id=\"73715c27eeed9d41f97645118fb3a358\" id=\"73715c27eeed9d41f97645118fb3a358\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"wyMkD\" id=\"wyMkD\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>标记增量如何优化垃圾回收</span></h2><p data-lake-id=\"2bdebdbb7be7635c016ca00a3388a500\" id=\"2bdebdbb7be7635c016ca00a3388a500\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><h2 data-lake-id=\"i1eB3\" id=\"i1eB3\"><span>内存管理</span></h2><p data-lake-id=\"3ed4a301309484107f017d569b990dd1\" id=\"3ed4a301309484107f017d569b990dd1\"><span>内存为什么需要管理？</span></p><p data-lake-id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\"><span>如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span></p><ul data-lake-id=\"a8192eaf983bf0332e78374d8c6d0f09_ul_0\"><li data-lake-id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span>内存：由可读写单元组成，表示一片可操作空间</span></li><li data-lake-id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span>管理：人为的去操作一片空间的申请、使用和释放。</span></li><li data-lake-id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span>内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li data-lake-id=\"3dd0a478e0ac8848f92a72dc70441467\"><span>管理流程:申请一使用一释放</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%88%E7%94%B1%E4%BA%8EJavaScript%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%85%B3api%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87JS%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%EF%BC%8C%E9%81%87%E5%88%B0%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8E%BB%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%89%5Cnlet%20obj%20%3D%20%7B%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E9%97%B4%5Cnobj.name%20%3D%201%5Cn%2F%2F%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%5Cnobj%20%3D%20null%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22lOC05%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b0081576b73a0fd9875ea9d6235b58a7\" id=\"b0081576b73a0fd9875ea9d6235b58a7\"><br /></p><h2 data-lake-id=\"OWSFc\" id=\"OWSFc\"><span>JS中的垃圾回收</span></h2><p data-lake-id=\"u999b7739\" id=\"u999b7739\"><span>对象在什么情况下会被视为垃圾？</span></p><ul data-lake-id=\"405e022c89cfb8f5849fc65c03c208b6_ul_1\"><li data-lake-id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span>JS中的垃圾回收是自动的</span></li><li data-lake-id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span>当对象不再被引用时，被视为垃圾</span></li><li data-lake-id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span>对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj%20%3D%20%7Bname%3A%2011%7D%20%5Cnlet%20ali%20%3D%20obj%5Cnobj%20%3D%20null%20%2F%2F%20%7Bname%3A%2011%7D%20%E8%A2%ABali%E5%BC%95%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9E%83%E5%9C%BE%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__height%22%3A103%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HWLSc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A103%7D\"></card><p data-lake-id=\"744a212f9e7d0ca5bf8db2d102991b55\" id=\"744a212f9e7d0ca5bf8db2d102991b55\"><br /></p><h2 data-lake-id=\"SJ4dA\" id=\"SJ4dA\"><span>GC算法</span></h2><p data-lake-id=\"ab4d248ed5019a210126e0c8c16f4bbf\" id=\"ab4d248ed5019a210126e0c8c16f4bbf\"><span>GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p data-lake-id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" id=\"e30385dfe8aee2e067f087a9a3a3c4b7\"><span>那么什么样的东西可以被当作垃圾呢？</span></p><ul data-lake-id=\"dcbd052414dfae5745a366dd48a067c2_ul_2\"><li data-lake-id=\"a6ff021f080f8cc705e48cb4517b1492\"><span>程序中不再使用的对象</span></li><li data-lake-id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span>程序中能再访问的对象</span></li></ul><p data-lake-id=\"411f9a0e735a919d55003880da3bd660\" id=\"411f9a0e735a919d55003880da3bd660\"><span>GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p data-lake-id=\"8798931f20afa627222e13ef6c35359b\" id=\"8798931f20afa627222e13ef6c35359b\"><span>常见的GC算法有：</span></p><ul data-lake-id=\"1cb9421d91bb5406bb3954ff63fb5079_ul_3\"><li data-lake-id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span>引用计数</span></li></ul><p data-lake-id=\"98731bd03a205e78a79da038ba1045a8\" id=\"98731bd03a205e78a79da038ba1045a8\"><span>     判断对象的引用来决定是不是垃圾</span></p><ul data-lake-id=\"bd92a44c12ee3a5ffbb559ecbb59988f_ul_4\"><li data-lake-id=\"c425fbcbd3e712658fccd70b64f7d877\"><span>标记清除</span></li></ul><p data-lake-id=\"48fd1e6ab75d04887058f1b595603458\" id=\"48fd1e6ab75d04887058f1b595603458\"><span>     给活动对象添加标记，来判断他是不是垃圾</span></p><ul data-lake-id=\"6cfd6253bf8464133095877661b6ee6d_ul_5\"><li data-lake-id=\"97d2b53baa97ae25f5357791db807563\"><span>标记整理</span></li></ul><p data-lake-id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" id=\"eb2b7fbe2867cde5cec64a59db0abbdb\"><span>     类似标记清除</span></p><ul data-lake-id=\"4fadd3e3356b5ce30c26959055703153_ul_6\"><li data-lake-id=\"d17f0a5311a8746763290ba5074f7b80\"><span>分代回收</span></li></ul><p data-lake-id=\"77511a1169f5d183b2ef7207363ccbaa\" id=\"77511a1169f5d183b2ef7207363ccbaa\"><br /></p><h2 data-lake-id=\"a4eQ0\" id=\"a4eQ0\"><span>引用计数算法实现原理</span></h2><p data-lake-id=\"ebcf02bb5e61ef0dd4f012c200870762\" id=\"ebcf02bb5e61ef0dd4f012c200870762\"><span>核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p data-lake-id=\"ucc3bdc85\" id=\"ucc3bdc85\"><br /></p><p data-lake-id=\"180498aa3cae6ce1130ab6ac43da55c6\" id=\"180498aa3cae6ce1130ab6ac43da55c6\"><span>当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p data-lake-id=\"u902d73f2\" id=\"u902d73f2\"><span>引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p data-lake-id=\"uae16e0aa\" id=\"uae16e0aa\"><br /></p><h3 data-lake-id=\"KSzgb\" id=\"KSzgb\"><span>引用计数算法的优缺点</span></h3><h4 data-lake-id=\"NYKWp\" id=\"NYKWp\"><span>优点</span></h4><ul data-lake-id=\"24c602bdba2f0f8c27ddb851be5ab865_ul_7\"><li data-lake-id=\"ube1b554e\"><span>发现垃圾时立即回收</span></li></ul><p data-lake-id=\"u6f712f22\" id=\"u6f712f22\" style=\"text-indent: 2em;\"><span>如果引用为0就会立即进行回收、释放</span></p><ul data-lake-id=\"011585729a50b631dda0f35fc66cd306_ul_8\"><li data-lake-id=\"udc2e1992\"><span>最大限度减少程序暂停</span></li></ul><p data-lake-id=\"ue027de04\" id=\"ue027de04\" style=\"text-indent: 2em;\"><span>由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p data-lake-id=\"ua7150238\" id=\"ua7150238\" style=\"text-indent: 2em;\"><br /></p><h4 data-lake-id=\"JQ2ki\" id=\"JQ2ki\"><span>缺点</span></h4><ul data-lake-id=\"6fcf7074a7d5bf90e565fcf627abe64b_ul_9\"><li data-lake-id=\"uac835717\"><span>无法回收循环引用的对象</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20fn()%20%7B%5Cn%5Ctconst%20obj1%20%3D%20%7B%7D%5Cn%20%20const%20obj2%20%3D%20%7B%7D%5Cn%20%20%2F%2F%20%E5%9C%A8%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E5%88%B0%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E4%BB%96%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86%5Cn%20%20%2F%2F%20%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95%E6%97%B6%EF%BC%8C%E4%BB%96%E4%BB%8D%E7%84%B6%E8%BF%98%E6%98%AF%E6%9C%89%E5%BC%95%E7%94%A8%E5%B9%B6%E4%B8%94%E4%B8%8D%E4%B8%BA0%EF%BC%8C%E5%9B%A0%E6%AD%A4GC%E6%97%A0%E6%B3%95%E5%AF%B9%E5%85%B6%E5%9B%9E%E6%94%B6%E3%80%82%5Cn%20%20obj1.name%20%3D%20obj2%5Cn%20%20obj2.name%20%3D%20obj1%5Cn%20%20%5Cn%20%20return%20'ok'%5Cn%7D%5Cnfn()%20%2F%2F%20%E5%BD%93%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E4%BC%9A%E9%87%8A%E6%94%BE%E9%87%8C%E9%9D%A2%E7%9A%84%E7%A9%BA%E9%97%B4%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22u84h9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul data-lake-id=\"36c1397d1811637e78e1a1bca86079b3_ul_10\"><li data-lake-id=\"ud3c4ce49\"><span>时间开销大</span></li></ul><p data-lake-id=\"ude675e9f\" id=\"ude675e9f\" style=\"text-indent: 2em;\"><span>需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p data-lake-id=\"ue7480f80\" id=\"ue7480f80\" style=\"text-indent: 2em;\"><br /></p><h2 data-lake-id=\"l6fT2\" id=\"l6fT2\"><span>标记清除算法实现原理</span></h2><blockquote><p data-lake-id=\"uea79233d\" id=\"uea79233d\"><span>标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></blockquote><p data-lake-id=\"u47c36318\" id=\"u47c36318\"><span>核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 data-lake-id=\"ZuPlu\" id=\"ZuPlu\"><span>标记清除算法的优缺点</span></h3><h4 data-lake-id=\"MDeW8\" id=\"MDeW8\"><span>优点</span></h4><ul data-lake-id=\"509748cecf99eda2e22c9f583f60d0dc_ul_11\"><li data-lake-id=\"u1f059613\"><span>解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p data-lake-id=\"u4ea8692f\" id=\"u4ea8692f\" style=\"text-indent: 2em;\"><span>标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 data-lake-id=\"sXQJL\" id=\"sXQJL\"><span>缺点</span></h4><ul data-lake-id=\"7199d803182e8291996da34b43e8cd1e_ul_12\"><li data-lake-id=\"u5d173730\"><span>不会立即回收对象</span></li></ul><p data-lake-id=\"c196c8cd1b1c3af12971cc33a795c11f\" id=\"c196c8cd1b1c3af12971cc33a795c11f\"><span>       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul data-lake-id=\"259396135a66569a717e52c61c0d836e_ul_13\"><li data-lake-id=\"c66739eb16ad7259c0f8c6266f067a18\"><span>空间碎片化</span></li></ul><p data-lake-id=\"u35c36092\" id=\"u35c36092\" style=\"text-indent: 2em;\"><span>回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p data-lake-id=\"3e4e66ed660724cc8561b95418fe4194\" id=\"3e4e66ed660724cc8561b95418fe4194\"><br /></p><h2 data-lake-id=\"CcfMF\" id=\"CcfMF\"><span>标记整理算法实现原理</span></h2><blockquote><p data-lake-id=\"u4ef6d3db\" id=\"u4ef6d3db\"><span>和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></blockquote><p data-lake-id=\"1210fe16630370d68dc58f767d5f064a\" id=\"1210fe16630370d68dc58f767d5f064a\"><span>标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p data-lake-id=\"7ea118596bad803afe4343db54d62fac\" id=\"7ea118596bad803afe4343db54d62fac\"><br /></p><p data-lake-id=\"e6ec6769e8dddc37df070278172754a2\" id=\"e6ec6769e8dddc37df070278172754a2\"><span>但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p data-lake-id=\"4e60332e04d2aedeb479c71764b2f763\" id=\"4e60332e04d2aedeb479c71764b2f763\"><br /></p><p data-lake-id=\"c64cc78c8b336099f356cc72e10e6b69\" id=\"c64cc78c8b336099f356cc72e10e6b69\"><span>这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p data-lake-id=\"10da3079833c154f76295ef3264ba8fc\" id=\"10da3079833c154f76295ef3264ba8fc\"><br /></p><h3 data-lake-id=\"hPlDu\" id=\"hPlDu\"><span>标记整理算法优缺点</span></h3><h4 data-lake-id=\"x4mSu\" id=\"x4mSu\"><span>优点</span></h4><p data-lake-id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" id=\"8458ad6bbf1e961255bb2cd302e6a5b5\"><span>减少碎片化空间</span></p><h4 data-lake-id=\"eMzeK\" id=\"eMzeK\"><span>缺点</span></h4><p data-lake-id=\"18f8cbb8e47a4bd5092de7dccfed182b\" id=\"18f8cbb8e47a4bd5092de7dccfed182b\"><span>不会立即回收垃圾对象</span></p><p data-lake-id=\"df7f29a51628e2757fb1455d7100be71\" id=\"df7f29a51628e2757fb1455d7100be71\"><br /></p><h2 data-lake-id=\"kkh47\" id=\"kkh47\"><span>V8</span></h2><p data-lake-id=\"b201485eb2f8942dec72d83b9f9850f3\" id=\"b201485eb2f8942dec72d83b9f9850f3\"><span>V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p data-lake-id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\"><span>V8内存的上限设定：64位1.5G   32位800M</span></p><h3 data-lake-id=\"pazTz\" id=\"pazTz\"><span>V8垃圾回收策略</span></h3><p data-lake-id=\"u9c685dac\" id=\"u9c685dac\"><span>采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span>新生代</span></strong><span>存储区和</span><strong><span>老生代</span></strong><span>存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><card type=\"block\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22W%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%7D%2C%22id%22%3A%2272e8ba29-f571-4976-9887-f8f35c28899b%22%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%7D%2C%22id%22%3A%22b0ec9b09-66bd-4dd7-b477-3eb405497aca%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%7D%2C%22id%22%3A%22ece33aaf-fd6a-4999-873b-1c3c486306e0%22%2C%22zIndex%22%3A2%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%7D%2C%22id%22%3A%22e9690d3f-8140-45f6-a23c-0007ee7288f9%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A-23%2C%22y%22%3A-314%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3EV8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A8%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-305.5%2C-322%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A461%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg%22%2C%22search%22%3A%22%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%5Cn%20%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%5Cn%20V8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%5Cn%20%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%5Cn%20%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%5Cn%22%2C%22__height%22%3A443%2C%22id%22%3A%22ol4HT%22%2C%22height%22%3A443%7D\"></card><p data-lake-id=\"06e4b36b0241a2becc72994d2292356c\" id=\"06e4b36b0241a2becc72994d2292356c\"><br /></p><h3 data-lake-id=\"nfYoM\" id=\"nfYoM\"><span>V8中常用的GC算法</span></h3><ul data-lake-id=\"56650efc42c729bb0c1116ee46327943_ul_14\"><li data-lake-id=\"u04b5b087\"><span>分代回收</span></li><li data-lake-id=\"u9084b809\"><span>空间复制</span></li><li data-lake-id=\"udb480781\"><span>标记清除</span></li><li data-lake-id=\"u9209e5b2\"><span>标记整理</span></li><li data-lake-id=\"ub48e7a64\"><span>标记增量</span></li></ul><h3 data-lake-id=\"yplWV\" id=\"yplWV\"><span>V8如何回收新生代对象</span></h3><p data-lake-id=\"ucb62e279\" id=\"ucb62e279\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png%22%2C%22originWidth%22%3A831%2C%22originHeight%22%3A99%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12542%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A371.20895%2C%22y%22%3A41.943043%2C%22width%22%3A85.69268999999997%2C%22height%22%3A16.674186999999996%2C%22text%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%22%7D%2C%7B%22x%22%3A152.04552%2C%22y%22%3A43.356525%2C%22width%22%3A20.57271%2C%22height%22%3A13.644950999999999%2C%22text%22%3A%22To%22%7D%2C%7B%22x%22%3A40.085224%2C%22y%22%3A43.81187%2C%22width%22%3A37.553816%2C%22height%22%3A12.758973000000005%2C%22text%22%3A%22From%22%7D%5D%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%20To%20From%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A749%2C%22height%22%3A89%2C%22id%22%3A%22ubca4cc3b%22%7D\"></card></p><p data-lake-id=\"ub4e6f2f7\" id=\"ub4e6f2f7\"><span>如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p data-lake-id=\"ub7fcb526\" id=\"ub7fcb526\"><strong><span>新生代指的是存活时间较短的对象</span></strong><span>。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p data-lake-id=\"u6462d8cf\" id=\"u6462d8cf\"><span>那么，V8是如何完成新生代对象回收的呢？</span></p><h4 data-lake-id=\"f2HMO\" id=\"f2HMO\"><span>新生代对象回收实现</span></h4><p data-lake-id=\"u0edc7469\" id=\"u0edc7469\"><span>回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 data-lake-id=\"ChXnK\" id=\"ChXnK\"><span>回收细节</span></h4><p data-lake-id=\"u2a6a5439\" id=\"u2a6a5439\"><span>如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span>晋升</span></strong><span>的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p data-lake-id=\"u6f89bcf8\" id=\"u6f89bcf8\"><span>判断是否晋升的条件有以下几个：</span></p><ul data-lake-id=\"329df46bb89a28a3eaf34031c211aa8b_ul_15\"><li data-lake-id=\"uc587a861\"><span>经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p data-lake-id=\"ue13d4ee4\" id=\"ue13d4ee4\" style=\"text-indent: 2em;\"><span>如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul data-lake-id=\"2b1ef40efdeb1554c71540208d25a31c_ul_16\"><li data-lake-id=\"ue5e2206a\"><span>在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p data-lake-id=\"u1cc36f07\" id=\"u1cc36f07\" style=\"text-indent: 2em;\"><span>To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p data-lake-id=\"u2e97449b\" id=\"u2e97449b\" style=\"text-indent: 2em;\"><br /></p><h3 data-lake-id=\"qM202\" id=\"qM202\"><span>V8如何回收老生代对象</span></h3><p data-lake-id=\"da1723261339c23350c949641abbe4cf\" id=\"da1723261339c23350c949641abbe4cf\"><span>如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 data-lake-id=\"BOoO7\" id=\"BOoO7\"><span>老生代对象回收实现</span></h3><p data-lake-id=\"9a3270127d0f0fc475d5faa883e4bdb2\" id=\"9a3270127d0f0fc475d5faa883e4bdb2\"><span>主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 data-lake-id=\"UN1OR\" id=\"UN1OR\"><span>新老代细节对比</span></h4><p data-lake-id=\"ea1437ffcfb5ee946525ad5611952daf\" id=\"ea1437ffcfb5ee946525ad5611952daf\"><span>新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p data-lake-id=\"73715c27eeed9d41f97645118fb3a358\" id=\"73715c27eeed9d41f97645118fb3a358\"><br /></p><h2 data-lake-id=\"wyMkD\" id=\"wyMkD\"><span>标记增量如何优化垃圾回收</span></h2><p data-lake-id=\"2bdebdbb7be7635c016ca00a3388a500\" id=\"2bdebdbb7be7635c016ca00a3388a500\"><span>当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。<cursor /></span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><h2 data-lake-id=\"i1eB3\" id=\"i1eB3\"><span>内存管理</span></h2><p data-lake-id=\"3ed4a301309484107f017d569b990dd1\" id=\"3ed4a301309484107f017d569b990dd1\"><span>内存为什么需要管理？</span></p><p data-lake-id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\"><span>如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span></p><ul data-lake-id=\"a8192eaf983bf0332e78374d8c6d0f09_ul_0\"><li data-lake-id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span>内存：由可读写单元组成，表示一片可操作空间</span></li><li data-lake-id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span>管理：人为的去操作一片空间的申请、使用和释放。</span></li><li data-lake-id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span>内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li data-lake-id=\"3dd0a478e0ac8848f92a72dc70441467\"><span>管理流程:申请一使用一释放</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%88%E7%94%B1%E4%BA%8EJavaScript%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%85%B3api%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87JS%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%EF%BC%8C%E9%81%87%E5%88%B0%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8E%BB%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%89%5Cnlet%20obj%20%3D%20%7B%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E9%97%B4%5Cnobj.name%20%3D%201%5Cn%2F%2F%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%5Cnobj%20%3D%20null%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22lOC05%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b0081576b73a0fd9875ea9d6235b58a7\" id=\"b0081576b73a0fd9875ea9d6235b58a7\"><br /></p><h2 data-lake-id=\"OWSFc\" id=\"OWSFc\"><span>JS中的垃圾回收</span></h2><p data-lake-id=\"u999b7739\" id=\"u999b7739\"><span>对象在什么情况下会被视为垃圾？</span></p><ul data-lake-id=\"405e022c89cfb8f5849fc65c03c208b6_ul_1\"><li data-lake-id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span>JS中的垃圾回收是自动的</span></li><li data-lake-id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span>当对象不再被引用时，被视为垃圾</span></li><li data-lake-id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span>对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj%20%3D%20%7Bname%3A%2011%7D%20%5Cnlet%20ali%20%3D%20obj%5Cnobj%20%3D%20null%20%2F%2F%20%7Bname%3A%2011%7D%20%E8%A2%ABali%E5%BC%95%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9E%83%E5%9C%BE%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__height%22%3A103%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HWLSc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A103%7D\"></card><p data-lake-id=\"744a212f9e7d0ca5bf8db2d102991b55\" id=\"744a212f9e7d0ca5bf8db2d102991b55\"><br /></p><h2 data-lake-id=\"SJ4dA\" id=\"SJ4dA\"><span>GC算法</span></h2><p data-lake-id=\"ab4d248ed5019a210126e0c8c16f4bbf\" id=\"ab4d248ed5019a210126e0c8c16f4bbf\"><span>GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p data-lake-id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" id=\"e30385dfe8aee2e067f087a9a3a3c4b7\"><span>那么什么样的东西可以被当作垃圾呢？</span></p><ul data-lake-id=\"dcbd052414dfae5745a366dd48a067c2_ul_2\"><li data-lake-id=\"a6ff021f080f8cc705e48cb4517b1492\"><span>程序中不再使用的对象</span></li><li data-lake-id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span>程序中能再访问的对象</span></li></ul><p data-lake-id=\"411f9a0e735a919d55003880da3bd660\" id=\"411f9a0e735a919d55003880da3bd660\"><span>GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p data-lake-id=\"8798931f20afa627222e13ef6c35359b\" id=\"8798931f20afa627222e13ef6c35359b\"><span>常见的GC算法有：</span></p><ul data-lake-id=\"1cb9421d91bb5406bb3954ff63fb5079_ul_3\"><li data-lake-id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span>引用计数</span></li></ul><p data-lake-id=\"98731bd03a205e78a79da038ba1045a8\" id=\"98731bd03a205e78a79da038ba1045a8\"><span>     判断对象的引用来决定是不是垃圾</span></p><ul data-lake-id=\"bd92a44c12ee3a5ffbb559ecbb59988f_ul_4\"><li data-lake-id=\"c425fbcbd3e712658fccd70b64f7d877\"><span>标记清除</span></li></ul><p data-lake-id=\"48fd1e6ab75d04887058f1b595603458\" id=\"48fd1e6ab75d04887058f1b595603458\"><span>     给活动对象添加标记，来判断他是不是垃圾</span></p><ul data-lake-id=\"6cfd6253bf8464133095877661b6ee6d_ul_5\"><li data-lake-id=\"97d2b53baa97ae25f5357791db807563\"><span>标记整理</span></li></ul><p data-lake-id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" id=\"eb2b7fbe2867cde5cec64a59db0abbdb\"><span>     类似标记清除</span></p><ul data-lake-id=\"4fadd3e3356b5ce30c26959055703153_ul_6\"><li data-lake-id=\"d17f0a5311a8746763290ba5074f7b80\"><span>分代回收</span></li></ul><p data-lake-id=\"77511a1169f5d183b2ef7207363ccbaa\" id=\"77511a1169f5d183b2ef7207363ccbaa\"><br /></p><h2 data-lake-id=\"a4eQ0\" id=\"a4eQ0\"><span>引用计数算法实现原理</span></h2><p data-lake-id=\"ebcf02bb5e61ef0dd4f012c200870762\" id=\"ebcf02bb5e61ef0dd4f012c200870762\"><span>核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p data-lake-id=\"ucc3bdc85\" id=\"ucc3bdc85\"><br /></p><p data-lake-id=\"180498aa3cae6ce1130ab6ac43da55c6\" id=\"180498aa3cae6ce1130ab6ac43da55c6\"><span>当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p data-lake-id=\"u902d73f2\" id=\"u902d73f2\"><span>引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p data-lake-id=\"uae16e0aa\" id=\"uae16e0aa\"><br /></p><h3 data-lake-id=\"KSzgb\" id=\"KSzgb\"><span>引用计数算法的优缺点</span></h3><h4 data-lake-id=\"NYKWp\" id=\"NYKWp\"><span>优点</span></h4><ul data-lake-id=\"24c602bdba2f0f8c27ddb851be5ab865_ul_7\"><li data-lake-id=\"ube1b554e\"><span>发现垃圾时立即回收</span></li></ul><p data-lake-id=\"u6f712f22\" id=\"u6f712f22\" style=\"text-indent: 2em;\"><span>如果引用为0就会立即进行回收、释放</span></p><ul data-lake-id=\"011585729a50b631dda0f35fc66cd306_ul_8\"><li data-lake-id=\"udc2e1992\"><span>最大限度减少程序暂停</span></li></ul><p data-lake-id=\"ue027de04\" id=\"ue027de04\" style=\"text-indent: 2em;\"><span>由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p data-lake-id=\"ua7150238\" id=\"ua7150238\" style=\"text-indent: 2em;\"><br /></p><h4 data-lake-id=\"JQ2ki\" id=\"JQ2ki\"><span>缺点</span></h4><ul data-lake-id=\"6fcf7074a7d5bf90e565fcf627abe64b_ul_9\"><li data-lake-id=\"uac835717\"><span>无法回收循环引用的对象</span></li></ul><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20fn()%20%7B%5Cn%5Ctconst%20obj1%20%3D%20%7B%7D%5Cn%20%20const%20obj2%20%3D%20%7B%7D%5Cn%20%20%2F%2F%20%E5%9C%A8%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E5%88%B0%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E4%BB%96%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86%5Cn%20%20%2F%2F%20%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95%E6%97%B6%EF%BC%8C%E4%BB%96%E4%BB%8D%E7%84%B6%E8%BF%98%E6%98%AF%E6%9C%89%E5%BC%95%E7%94%A8%E5%B9%B6%E4%B8%94%E4%B8%8D%E4%B8%BA0%EF%BC%8C%E5%9B%A0%E6%AD%A4GC%E6%97%A0%E6%B3%95%E5%AF%B9%E5%85%B6%E5%9B%9E%E6%94%B6%E3%80%82%5Cn%20%20obj1.name%20%3D%20obj2%5Cn%20%20obj2.name%20%3D%20obj1%5Cn%20%20%5Cn%20%20return%20'ok'%5Cn%7D%5Cnfn()%20%2F%2F%20%E5%BD%93%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E4%BC%9A%E9%87%8A%E6%94%BE%E9%87%8C%E9%9D%A2%E7%9A%84%E7%A9%BA%E9%97%B4%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22u84h9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul data-lake-id=\"36c1397d1811637e78e1a1bca86079b3_ul_10\"><li data-lake-id=\"ud3c4ce49\"><span>时间开销大</span></li></ul><p data-lake-id=\"ude675e9f\" id=\"ude675e9f\" style=\"text-indent: 2em;\"><span>需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p data-lake-id=\"ue7480f80\" id=\"ue7480f80\" style=\"text-indent: 2em;\"><br /></p><h2 data-lake-id=\"l6fT2\" id=\"l6fT2\"><span>标记清除算法实现原理</span></h2><blockquote><p data-lake-id=\"uea79233d\" id=\"uea79233d\"><span>标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></blockquote><p data-lake-id=\"u47c36318\" id=\"u47c36318\"><span>核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 data-lake-id=\"ZuPlu\" id=\"ZuPlu\"><span>标记清除算法的优缺点</span></h3><h4 data-lake-id=\"MDeW8\" id=\"MDeW8\"><span>优点</span></h4><ul data-lake-id=\"509748cecf99eda2e22c9f583f60d0dc_ul_11\"><li data-lake-id=\"u1f059613\"><span>解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p data-lake-id=\"u4ea8692f\" id=\"u4ea8692f\" style=\"text-indent: 2em;\"><span>标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 data-lake-id=\"sXQJL\" id=\"sXQJL\"><span>缺点</span></h4><ul data-lake-id=\"7199d803182e8291996da34b43e8cd1e_ul_12\"><li data-lake-id=\"u5d173730\"><span>不会立即回收对象</span></li></ul><p data-lake-id=\"c196c8cd1b1c3af12971cc33a795c11f\" id=\"c196c8cd1b1c3af12971cc33a795c11f\"><span>       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul data-lake-id=\"259396135a66569a717e52c61c0d836e_ul_13\"><li data-lake-id=\"c66739eb16ad7259c0f8c6266f067a18\"><span>空间碎片化</span></li></ul><p data-lake-id=\"u35c36092\" id=\"u35c36092\" style=\"text-indent: 2em;\"><span>回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p data-lake-id=\"3e4e66ed660724cc8561b95418fe4194\" id=\"3e4e66ed660724cc8561b95418fe4194\"><br /></p><h2 data-lake-id=\"CcfMF\" id=\"CcfMF\"><span>标记整理算法实现原理</span></h2><blockquote><p data-lake-id=\"u4ef6d3db\" id=\"u4ef6d3db\"><span>和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></blockquote><p data-lake-id=\"1210fe16630370d68dc58f767d5f064a\" id=\"1210fe16630370d68dc58f767d5f064a\"><span>标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p data-lake-id=\"7ea118596bad803afe4343db54d62fac\" id=\"7ea118596bad803afe4343db54d62fac\"><br /></p><p data-lake-id=\"e6ec6769e8dddc37df070278172754a2\" id=\"e6ec6769e8dddc37df070278172754a2\"><span>但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p data-lake-id=\"4e60332e04d2aedeb479c71764b2f763\" id=\"4e60332e04d2aedeb479c71764b2f763\"><br /></p><p data-lake-id=\"c64cc78c8b336099f356cc72e10e6b69\" id=\"c64cc78c8b336099f356cc72e10e6b69\"><span>这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p data-lake-id=\"10da3079833c154f76295ef3264ba8fc\" id=\"10da3079833c154f76295ef3264ba8fc\"><br /></p><h3 data-lake-id=\"hPlDu\" id=\"hPlDu\"><span>标记整理算法优缺点</span></h3><h4 data-lake-id=\"x4mSu\" id=\"x4mSu\"><span>优点</span></h4><p data-lake-id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" id=\"8458ad6bbf1e961255bb2cd302e6a5b5\"><span>减少碎片化空间</span></p><h4 data-lake-id=\"eMzeK\" id=\"eMzeK\"><span>缺点</span></h4><p data-lake-id=\"18f8cbb8e47a4bd5092de7dccfed182b\" id=\"18f8cbb8e47a4bd5092de7dccfed182b\"><span>不会立即回收垃圾对象</span></p><p data-lake-id=\"df7f29a51628e2757fb1455d7100be71\" id=\"df7f29a51628e2757fb1455d7100be71\"><br /></p><h2 data-lake-id=\"kkh47\" id=\"kkh47\"><span>V8</span></h2><p data-lake-id=\"b201485eb2f8942dec72d83b9f9850f3\" id=\"b201485eb2f8942dec72d83b9f9850f3\"><span>V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p data-lake-id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\"><span>V8内存的上限设定：64位1.5G   32位800M</span></p><h3 data-lake-id=\"pazTz\" id=\"pazTz\"><span>V8垃圾回收策略</span></h3><p data-lake-id=\"u9c685dac\" id=\"u9c685dac\"><span>采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span>新生代</span></strong><span>存储区和</span><strong><span>老生代</span></strong><span>存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><card type=\"block\" name=\"flowchart2\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22W%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%7D%2C%22id%22%3A%2272e8ba29-f571-4976-9887-f8f35c28899b%22%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%7D%2C%22id%22%3A%22b0ec9b09-66bd-4dd7-b477-3eb405497aca%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%7D%2C%22id%22%3A%22ece33aaf-fd6a-4999-873b-1c3c486306e0%22%2C%22zIndex%22%3A2%7D%2C%7B%22type%22%3A%22edge%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%7D%2C%22id%22%3A%22e9690d3f-8140-45f6-a23c-0007ee7288f9%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A-23%2C%22y%22%3A-314%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3EV8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22flowchart%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A8%7D%5D%7D%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-305.5%2C-322%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A461%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg%22%2C%22search%22%3A%22%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E2%80%8B%5Cn%20%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%5Cn%20%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%5Cn%20V8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%5Cn%20%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%5Cn%20%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%5Cn%22%2C%22__height%22%3A443%2C%22id%22%3A%22ol4HT%22%2C%22height%22%3A443%7D\"></card><p data-lake-id=\"06e4b36b0241a2becc72994d2292356c\" id=\"06e4b36b0241a2becc72994d2292356c\"><br /></p><h3 data-lake-id=\"nfYoM\" id=\"nfYoM\"><span>V8中常用的GC算法</span></h3><ul data-lake-id=\"56650efc42c729bb0c1116ee46327943_ul_14\"><li data-lake-id=\"u04b5b087\"><span>分代回收</span></li><li data-lake-id=\"u9084b809\"><span>空间复制</span></li><li data-lake-id=\"udb480781\"><span>标记清除</span></li><li data-lake-id=\"u9209e5b2\"><span>标记整理</span></li><li data-lake-id=\"ub48e7a64\"><span>标记增量</span></li></ul><h3 data-lake-id=\"yplWV\" id=\"yplWV\"><span>V8如何回收新生代对象</span></h3><p data-lake-id=\"ucb62e279\" id=\"ucb62e279\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png%22%2C%22originWidth%22%3A831%2C%22originHeight%22%3A99%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12542%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A371.20895%2C%22y%22%3A41.943043%2C%22width%22%3A85.69268999999997%2C%22height%22%3A16.674186999999996%2C%22text%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%22%7D%2C%7B%22x%22%3A152.04552%2C%22y%22%3A43.356525%2C%22width%22%3A20.57271%2C%22height%22%3A13.644950999999999%2C%22text%22%3A%22To%22%7D%2C%7B%22x%22%3A40.085224%2C%22y%22%3A43.81187%2C%22width%22%3A37.553816%2C%22height%22%3A12.758973000000005%2C%22text%22%3A%22From%22%7D%5D%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%20To%20From%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A749%2C%22height%22%3A89%2C%22id%22%3A%22ubca4cc3b%22%7D\"></card></p><p data-lake-id=\"ub4e6f2f7\" id=\"ub4e6f2f7\"><span>如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p data-lake-id=\"ub7fcb526\" id=\"ub7fcb526\"><strong><span>新生代指的是存活时间较短的对象</span></strong><span>。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p data-lake-id=\"u6462d8cf\" id=\"u6462d8cf\"><span>那么，V8是如何完成新生代对象回收的呢？</span></p><h4 data-lake-id=\"f2HMO\" id=\"f2HMO\"><span>新生代对象回收实现</span></h4><p data-lake-id=\"u0edc7469\" id=\"u0edc7469\"><span>回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 data-lake-id=\"ChXnK\" id=\"ChXnK\"><span>回收细节</span></h4><p data-lake-id=\"u2a6a5439\" id=\"u2a6a5439\"><span>如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span>晋升</span></strong><span>的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p data-lake-id=\"u6f89bcf8\" id=\"u6f89bcf8\"><span>判断是否晋升的条件有以下几个：</span></p><ul data-lake-id=\"329df46bb89a28a3eaf34031c211aa8b_ul_15\"><li data-lake-id=\"uc587a861\"><span>经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p data-lake-id=\"ue13d4ee4\" id=\"ue13d4ee4\" style=\"text-indent: 2em;\"><span>如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul data-lake-id=\"2b1ef40efdeb1554c71540208d25a31c_ul_16\"><li data-lake-id=\"ue5e2206a\"><span>在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p data-lake-id=\"u1cc36f07\" id=\"u1cc36f07\" style=\"text-indent: 2em;\"><span>To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p data-lake-id=\"u2e97449b\" id=\"u2e97449b\" style=\"text-indent: 2em;\"><br /></p><h3 data-lake-id=\"qM202\" id=\"qM202\"><span>V8如何回收老生代对象</span></h3><p data-lake-id=\"da1723261339c23350c949641abbe4cf\" id=\"da1723261339c23350c949641abbe4cf\"><span>如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 data-lake-id=\"BOoO7\" id=\"BOoO7\"><span>老生代对象回收实现</span></h3><p data-lake-id=\"9a3270127d0f0fc475d5faa883e4bdb2\" id=\"9a3270127d0f0fc475d5faa883e4bdb2\"><span>主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 data-lake-id=\"UN1OR\" id=\"UN1OR\"><span>新老代细节对比</span></h4><p data-lake-id=\"ea1437ffcfb5ee946525ad5611952daf\" id=\"ea1437ffcfb5ee946525ad5611952daf\"><span>新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p data-lake-id=\"73715c27eeed9d41f97645118fb3a358\" id=\"73715c27eeed9d41f97645118fb3a358\"><br /></p><h2 data-lake-id=\"wyMkD\" id=\"wyMkD\"><span>标记增量如何优化垃圾回收</span></h2><p data-lake-id=\"2bdebdbb7be7635c016ca00a3388a500\" id=\"2bdebdbb7be7635c016ca00a3388a500\"><span>当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。<cursor /></span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-06-07T04:33:45.000Z",
    "deleted_at": null,
    "created_at": "2021-05-26T13:16:12.000Z",
    "updated_at": "2021-06-07T09:00:14.000Z",
    "published_at": "2021-06-07T04:33:45.000Z",
    "first_published_at": "2021-05-26T13:17:02.000Z",
    "word_count": 3282,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg",
    "description": "内存管理内存为什么需要管理？如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。内存：由可读写单元组成，表示一片可操作空间管理：人为的去操作一片空间的申请、使用和释放。内存管理: 开发者主动申请空间、使用空间、释放空间。管理流程:...",
    "custom_description": "",
    "hits": 34,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46031969,
    "slug": "ocmg9x",
    "title": "ES新特性与TypeScript",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。<br />\n<br />在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)<br />\n<br />在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)<br />\n<br />所以，JavaScript语言本身指的就是ECMAScript。<br />\n<br />由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。<br />\n\n<a name=\"HkOqc\"></a>\n## ES2015 let与块级作用域\nvar会被变量提升，let不会有这个问题<br />\n\n<a name=\"ZNvYJ\"></a>\n## ES2015 const\nconst声明的常量不能再次修改引用的内存地址。<br />\n\n<a name=\"J0cTK\"></a>\n## ES2015 数组的解构\nconst [a.b] = [100, 200]<br />可以根据位置提取对应的值<br />\n\n<a name=\"CZhW7\"></a>\n## ES2015 对象的解构\nconst {a} = {a:200}<br />和数组不同的是，它需要指定解构的属性名<br />\n\n<a name=\"e8qOh\"></a>\n## ES2015 模板字符串\n和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。<br />\n\n<a name=\"UjcAB\"></a>\n## ES2015 带标签的模板字符串\nconst str = console.log'hello wolrd'<br />模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。<br />\n\n<a name=\"fgbbo\"></a>\n## ES2015 字符串的扩展方法\nstartWith<br />endWith<br />includes<br />\n\n<a name=\"VA2FF\"></a>\n## ES 2015 参数默认值\nfunction fn(a = 100){}<br />可以在形参后面加上=值<br />一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:<br />function fn(a=100,b){}<br />fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。<br />因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。<br />\n\n<a name=\"dImiD\"></a>\n## ES2015 剩余参数\narguments<br />...args<br />\n\n<a name=\"BXrvd\"></a>\n## ES2015 展开数组\nconsole.log(...[100,200,300])<br />\n\n<a name=\"naD2s\"></a>\n## ES2015 箭头函数与this\n在箭头函数中没有this，它的this指向它的上级作用域。<br />\n\n<a name=\"p8QSG\"></a>\n## ES2015 对象字面量的增强\n对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。<br />\n\n<a name=\"tW994\"></a>\n## ES2015 Object.assign\nvar obj3=Object.assign(obj1, obj2)<br />用obj2覆盖obj1对象，返回的obj3它其实就是obj1<br />\n\n<a name=\"rYaWA\"></a>\n## ES2015 Object.is\n==只比较值，不比较类型，会自动类型转换<br />===比较值和类型，严格模式<br />NaN ===NaN //false<br />Object.is(NaN,NaN)//true<br />\n\n<a name=\"pYv7C\"></a>\n## ES2015 Proxy\n可以对对象的属性改动进行检测和拦截<br />\n\n<a name=\"j4sVE\"></a>\n## ES2015 Proxy对比Object.defineProperty\nProxy功能更强大一些。<br />proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用<br />可以对数组检测<br />Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。<br />\n\n<a name=\"B8pRM\"></a>\n## ES2015 Reflect\nReflect.get<br />Reflect.set<br />提供了一套对对象操作的api<br />以前的操作方式可能会被废弃掉<br />\n\n<a name=\"ScdtP\"></a>\n## ES2015 Promise\n异步编程解决方案<br />\n\n<a name=\"MH3LB\"></a>\n## ES2015 class\n\n\n<a name=\"KsCTY\"></a>\n## es2015 静态方法\n\n\n<a name=\"vfjM6\"></a>\n## es2015 类的继承\nsuper<br />\n\n<a name=\"S5ulm\"></a>\n## ES2015 Set\n不重复的数组  常用来去重<br />\n\n<a name=\"Lc8dG\"></a>\n## ES2015 Map\nlet obj ={a:100}<br />let o = new Map()<br />o.set(obj, 666) //它的键就是obj对象本身<br />严格的键值对集合，它的键可以是任意类型。<br />\n\n<a name=\"NNQQy\"></a>\n## ES2015 Symbol\nSymbol表示独一无二的值，他可以作为对象的键( key)。\n<a name=\"d4fdM\"></a>\n#### Symbol.for\n内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。\n```javascript\n// 因此Symbol.for(\"aa\") = Symbol. for(\"aa\") // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(\" true\") // true\n```\n<a name=\"kC8Ep\"></a>\n#### Symbol用途\n\n1. 我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用`Symbol`作为属性就不会出现这种问题。\n1. 可以为对象添加私有属性\n```javascript\nconst name = Symbol()\nclass Person {\n  [name]: \"xsl\",\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)\n```\n   3. `Symbol`提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：\n```javascript\n// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: \"XObject\"\n}\nconsole.log(obj.toString()) // [ object XObject]\n```\n对象的`Symbol`属性无法通过`for in`和`Object.keys`获取，`JSON.stringify`时`Symbol`的属性也会被忽略掉。<br />**可以使用**`**Object.getOwnPropertySymbols**`**获取对象的所有**`**Symbol**`**类型的属性。**<br />\n\n<a name=\"Th2zC\"></a>\n## ES2015 for of\n使用for of可以遍历所有数据类型<br />默认可以对数组遍历<br />需要实现统一的Iterable接口，数组默认内部已经实现了。<br />\n\n<a name=\"ynMdl\"></a>\n## ES2015 Iterable\n\n<br />\n\n<a name=\"k6z3d\"></a>\n## ES2016 概述\n\n\n<a name=\"gLEad\"></a>\n## ES2017 概述\n允许在参数和数组字面量后边加上小逗号\n",
    "body_draft": "我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。<br />\n<br />在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)<br />\n<br />在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)<br />\n<br />所以，JavaScript语言本身指的就是ECMAScript。<br />\n<br />由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。<br />\n\n<a name=\"HkOqc\"></a>\n## ES2015 let与块级作用域\nvar会被变量提升，let不会有这个问题<br />\n\n<a name=\"ZNvYJ\"></a>\n## ES2015 const\nconst声明的常量不能再次修改引用的内存地址。<br />\n\n<a name=\"J0cTK\"></a>\n## ES2015 数组的解构\nconst [a.b] = [100, 200]<br />可以根据位置提取对应的值<br />\n\n<a name=\"CZhW7\"></a>\n## ES2015 对象的解构\nconst {a} = {a:200}<br />和数组不同的是，它需要指定解构的属性名<br />\n\n<a name=\"e8qOh\"></a>\n## ES2015 模板字符串\n和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。<br />\n\n<a name=\"UjcAB\"></a>\n## ES2015 带标签的模板字符串\nconst str = console.log'hello wolrd'<br />模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。<br />\n\n<a name=\"fgbbo\"></a>\n## ES2015 字符串的扩展方法\nstartWith<br />endWith<br />includes<br />\n\n<a name=\"VA2FF\"></a>\n## ES 2015 参数默认值\nfunction fn(a = 100){}<br />可以在形参后面加上=值<br />一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:<br />function fn(a=100,b){}<br />fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。<br />因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。<br />\n\n<a name=\"dImiD\"></a>\n## ES2015 剩余参数\narguments<br />...args<br />\n\n<a name=\"BXrvd\"></a>\n## ES2015 展开数组\nconsole.log(...[100,200,300])<br />\n\n<a name=\"naD2s\"></a>\n## ES2015 箭头函数与this\n在箭头函数中没有this，它的this指向它的上级作用域。<br />\n\n<a name=\"p8QSG\"></a>\n## ES2015 对象字面量的增强\n对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。<br />\n\n<a name=\"tW994\"></a>\n## ES2015 Object.assign\nvar obj3=Object.assign(obj1, obj2)<br />用obj2覆盖obj1对象，返回的obj3它其实就是obj1<br />\n\n<a name=\"rYaWA\"></a>\n## ES2015 Object.is\n==只比较值，不比较类型，会自动类型转换<br />===比较值和类型，严格模式<br />NaN ===NaN //false<br />Object.is(NaN,NaN)//true<br />\n\n<a name=\"pYv7C\"></a>\n## ES2015 Proxy\n可以对对象的属性改动进行检测和拦截<br />\n\n<a name=\"j4sVE\"></a>\n## ES2015 Proxy对比Object.defineProperty\nProxy功能更强大一些。<br />proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用<br />可以对数组检测<br />Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。<br />\n\n<a name=\"B8pRM\"></a>\n## ES2015 Reflect\nReflect.get<br />Reflect.set<br />提供了一套对对象操作的api<br />以前的操作方式可能会被废弃掉<br />\n\n<a name=\"ScdtP\"></a>\n## ES2015 Promise\n异步编程解决方案<br />\n\n<a name=\"MH3LB\"></a>\n## ES2015 class\n\n\n<a name=\"KsCTY\"></a>\n## es2015 静态方法\n\n\n<a name=\"vfjM6\"></a>\n## es2015 类的继承\nsuper<br />\n\n<a name=\"S5ulm\"></a>\n## ES2015 Set\n不重复的数组  常用来去重<br />\n\n<a name=\"Lc8dG\"></a>\n## ES2015 Map\nlet obj ={a:100}<br />let o = new Map()<br />o.set(obj, 666) //它的键就是obj对象本身<br />严格的键值对集合，它的键可以是任意类型。<br />\n\n<a name=\"NNQQy\"></a>\n## ES2015 Symbol\nSymbol表示独一无二的值，他可以作为对象的键( key)。\n<a name=\"d4fdM\"></a>\n#### Symbol.for\n内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。\n```javascript\n// 因此Symbol.for(\"aa\") = Symbol. for(\"aa\") // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(\" true\") // true\n```\n<a name=\"kC8Ep\"></a>\n#### Symbol用途\n\n1. 我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用`Symbol`作为属性就不会出现这种问题。\n1. 可以为对象添加私有属性\n```javascript\nconst name = Symbol()\nclass Person {\n  [name]: \"xsl\",\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)\n```\n   3. `Symbol`提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：\n```javascript\n// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: \"XObject\"\n}\nconsole.log(obj.toString()) // [ object XObject]\n```\n对象的`Symbol`属性无法通过`for in`和`Object.keys`获取，`JSON.stringify`时`Symbol`的属性也会被忽略掉。<br />**可以使用**`**Object.getOwnPropertySymbols**`**获取对象的所有**`**Symbol**`**类型的属性。**<br />\n\n<a name=\"Th2zC\"></a>\n## ES2015 for of\n使用for of可以遍历所有数据类型<br />默认可以对数组遍历<br />需要实现统一的Iterable接口，数组默认内部已经实现了。<br />\n\n<a name=\"ynMdl\"></a>\n## ES2015 Iterable\n\n<br />\n\n<a name=\"k6z3d\"></a>\n## ES2016 概述\n\n\n<a name=\"gLEad\"></a>\n## ES2017 概述\n允许在参数和数组字面量后边加上小逗号\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p id=\"d3cbb52d6d52c80ccf2d65591448fab9\" class=\"ne-p\"><br></p><p id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" class=\"ne-p\"><span class=\"ne-text\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p id=\"ff3ffd5440184610f6f8d2e694398516\" class=\"ne-p\"><br></p><p id=\"81a82c175e6408af98467dc09c2c0870\" class=\"ne-p\"><span class=\"ne-text\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p id=\"48122c837e9e1e883a3abd1d8c31c74d\" class=\"ne-p\"><br></p><p id=\"a3f83d1af971926a0ebd593ef4ae133b\" class=\"ne-p\"><span class=\"ne-text\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p id=\"7d3162cfb13cf8cd0b519edb15ae2487\" class=\"ne-p\"><br></p><p id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" class=\"ne-p\"><span class=\"ne-text\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p id=\"ba4d4c35a4a0f1d53758b91bdd6a9a82\" class=\"ne-p\"><br></p><h2 id=\"HkOqc\"><span class=\"ne-text\">ES2015 let与块级作用域</span></h2><p id=\"a7d58fd87dfe4f73457cb2884320ffb8\" class=\"ne-p\"><span class=\"ne-text\">var会被变量提升，let不会有这个问题</span></p><p id=\"0013fb4aa6397b6b4655835fd2adb9d8\" class=\"ne-p\"><br></p><h2 id=\"ZNvYJ\"><span class=\"ne-text\">ES2015 const</span></h2><p id=\"7232ee60dc640e8c0fa206900fe41af0\" class=\"ne-p\"><span class=\"ne-text\">const声明的常量不能再次修改引用的内存地址。</span></p><p id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" class=\"ne-p\"><br></p><h2 id=\"J0cTK\"><span class=\"ne-text\">ES2015 数组的解构</span></h2><p id=\"0d50255207efb51be0471eeddf106559\" class=\"ne-p\"><span class=\"ne-text\">const [a.b] = [100, 200]</span></p><p id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" class=\"ne-p\"><span class=\"ne-text\">可以根据位置提取对应的值</span></p><p id=\"a909120279a6cc355c3098367cd76fc8\" class=\"ne-p\"><br></p><h2 id=\"CZhW7\"><span class=\"ne-text\">ES2015 对象的解构</span></h2><p id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" class=\"ne-p\"><span class=\"ne-text\">const {a} = {a:200}</span></p><p id=\"fc5a7abc8887d704b807426868c17df3\" class=\"ne-p\"><span class=\"ne-text\">和数组不同的是，它需要指定解构的属性名</span></p><p id=\"239a5af75036cda388b52e0a6977cd0e\" class=\"ne-p\"><br></p><h2 id=\"e8qOh\"><span class=\"ne-text\">ES2015 模板字符串</span></h2><p id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" class=\"ne-p\"><span class=\"ne-text\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" class=\"ne-p\"><br></p><h2 id=\"UjcAB\"><span class=\"ne-text\">ES2015 带标签的模板字符串</span></h2><p id=\"fa847889a38f60e93911037652d375c7\" class=\"ne-p\"><span class=\"ne-text\">const str = console.log'hello wolrd'</span></p><p id=\"f8c8c795f5f8836b2ead806315c9ddbc\" class=\"ne-p\"><span class=\"ne-text\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p id=\"2366c3dc2a42397f46f2404396517423\" class=\"ne-p\"><br></p><h2 id=\"fgbbo\"><span class=\"ne-text\">ES2015 字符串的扩展方法</span></h2><p id=\"57371814a3d7b11e0501c5af3faca3a5\" class=\"ne-p\"><span class=\"ne-text\">startWith</span></p><p id=\"f00a311809e779a530ea987f12288f1d\" class=\"ne-p\"><span class=\"ne-text\">endWith</span></p><p id=\"60969596c3ae112f93567cc5731e4dfc\" class=\"ne-p\"><span class=\"ne-text\">includes</span></p><p id=\"4a632fc50f8d951732842457a24b2019\" class=\"ne-p\"><br></p><h2 id=\"VA2FF\"><span class=\"ne-text\">ES 2015 参数默认值</span></h2><p id=\"558108fa39e43277eec2bb466f8ac466\" class=\"ne-p\"><span class=\"ne-text\">function fn(a = 100){}</span></p><p id=\"9948aefd5dd067496238fc9dc7b1b95b\" class=\"ne-p\"><span class=\"ne-text\">可以在形参后面加上=值</span></p><p id=\"a4c17d0d43f12f905c3304b9bd4451e5\" class=\"ne-p\"><span class=\"ne-text\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p id=\"a35a69e0ed7a099623ced3b2c442b5e2\" class=\"ne-p\"><span class=\"ne-text\">function fn(a=100,b){}</span></p><p id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" class=\"ne-p\"><span class=\"ne-text\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p id=\"4a3fd9b4f90969d634685e4e90d004c2\" class=\"ne-p\"><span class=\"ne-text\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p id=\"3ef505ff83aecba7c5ff389b1005f9d5\" class=\"ne-p\"><br></p><h2 id=\"dImiD\"><span class=\"ne-text\">ES2015 剩余参数</span></h2><p id=\"54c0c20b2fea16c59e29a2bb15f4700d\" class=\"ne-p\"><span class=\"ne-text\">arguments</span></p><p id=\"ef6d7a459ce386feaaa5c1c084eec86b\" class=\"ne-p\"><span class=\"ne-text\">...args</span></p><p id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" class=\"ne-p\"><br></p><h2 id=\"BXrvd\"><span class=\"ne-text\">ES2015 展开数组</span></h2><p id=\"d9e625370f98b10cd1303e97bfd831ca\" class=\"ne-p\"><span class=\"ne-text\">console.log(...[100,200,300])</span></p><p id=\"658964f1c65281a4d07047295f64ddea\" class=\"ne-p\"><br></p><h2 id=\"naD2s\"><span class=\"ne-text\">ES2015 箭头函数与this</span></h2><p id=\"019a46c230981e3ca8b889f0aeacb795\" class=\"ne-p\"><span class=\"ne-text\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p id=\"8d422cebc120b77563d29750149ffbf7\" class=\"ne-p\"><br></p><h2 id=\"p8QSG\"><span class=\"ne-text\">ES2015 对象字面量的增强</span></h2><p id=\"d6b42abd6a4978ff55469ddde4627a2f\" class=\"ne-p\"><span class=\"ne-text\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p id=\"92ca9371cc8a17915cd9de516397a95f\" class=\"ne-p\"><br></p><h2 id=\"tW994\"><span class=\"ne-text\">ES2015 Object.assign</span></h2><p id=\"ec09fd5129f5f645630a2fccdf53b7f9\" class=\"ne-p\"><span class=\"ne-text\">var obj3=Object.assign(obj1, obj2)</span></p><p id=\"0de6ed9e49306e6d0625664f541d2e23\" class=\"ne-p\"><span class=\"ne-text\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p id=\"41e5a6062d6db1bdcd247b00229e3087\" class=\"ne-p\"><br></p><h2 id=\"rYaWA\"><span class=\"ne-text\">ES2015 Object.is</span></h2><p id=\"0cc01364bf48f3357d49e870987c3b13\" class=\"ne-p\"><span class=\"ne-text\">==只比较值，不比较类型，会自动类型转换</span></p><p id=\"cd3806ab093d7491c684ae71b24e3272\" class=\"ne-p\"><span class=\"ne-text\">===比较值和类型，严格模式</span></p><p id=\"6d22ab8995f223b751af30ad66e36e36\" class=\"ne-p\"><span class=\"ne-text\">NaN ===NaN //false</span></p><p id=\"e33f6ca4086c79eeffa1532dcace1e93\" class=\"ne-p\"><span class=\"ne-text\">Object.is(NaN,NaN)//true</span></p><p id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" class=\"ne-p\"><br></p><h2 id=\"pYv7C\"><span class=\"ne-text\">ES2015 Proxy</span></h2><p id=\"1e139c7f6ecbf4bf81fce3789241da0a\" class=\"ne-p\"><span class=\"ne-text\">可以对对象的属性改动进行检测和拦截</span></p><p id=\"9935408458e3fc9d528ad1a38a984dd4\" class=\"ne-p\"><br></p><h2 id=\"j4sVE\"><span class=\"ne-text\">ES2015 Proxy对比Object.defineProperty</span></h2><p id=\"d35def387befa2da830e430e209ec0f8\" class=\"ne-p\"><span class=\"ne-text\">Proxy功能更强大一些。</span></p><p id=\"790ef2815013f32c9fb7eabc6d396986\" class=\"ne-p\"><span class=\"ne-text\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p id=\"16674882cd320bd1432f514cdd7346f8\" class=\"ne-p\"><span class=\"ne-text\">可以对数组检测</span></p><p id=\"9b9bf0c27590b1530284a78d696b5fa2\" class=\"ne-p\"><span class=\"ne-text\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p id=\"4394df20f1e858c6e5a82814be7796bc\" class=\"ne-p\"><br></p><h2 id=\"B8pRM\"><span class=\"ne-text\">ES2015 Reflect</span></h2><p id=\"51d9a7aa69ca41ffecae23265ab50a25\" class=\"ne-p\"><span class=\"ne-text\">Reflect.get</span></p><p id=\"0e687dd808dfc161578d80f86ee8c7e2\" class=\"ne-p\"><span class=\"ne-text\">Reflect.set</span></p><p id=\"935ae49c4a2f967e98fc094387346ae9\" class=\"ne-p\"><span class=\"ne-text\">提供了一套对对象操作的api</span></p><p id=\"3ae5829656745e6485ab83c3d36e73df\" class=\"ne-p\"><span class=\"ne-text\">以前的操作方式可能会被废弃掉</span></p><p id=\"6a3aeda5ea58acc443b9d8492f0f2513\" class=\"ne-p\"><br></p><h2 id=\"ScdtP\"><span class=\"ne-text\">ES2015 Promise</span></h2><p id=\"5aa1f4e3545b531faec5c6d08910cc79\" class=\"ne-p\"><span class=\"ne-text\">异步编程解决方案</span></p><p id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" class=\"ne-p\"><br></p><h2 id=\"MH3LB\"><span class=\"ne-text\">ES2015 class</span></h2><p id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" class=\"ne-p\"><br></p><h2 id=\"KsCTY\"><span class=\"ne-text\">es2015 静态方法</span></h2><p id=\"79799ec53f319300f74fcc41f0058cec\" class=\"ne-p\"><br></p><h2 id=\"vfjM6\"><span class=\"ne-text\">es2015 类的继承</span></h2><p id=\"7efec470976b0b17c48e127588a868ce\" class=\"ne-p\"><span class=\"ne-text\">super</span></p><p id=\"33ebfbffd369193e56112839083cf5c1\" class=\"ne-p\"><br></p><h2 id=\"S5ulm\"><span class=\"ne-text\">ES2015 Set</span></h2><p id=\"f94c9962904b257af11f289e3bbff6e7\" class=\"ne-p\"><span class=\"ne-text\">不重复的数组  常用来去重</span></p><p id=\"1e183c566a0ed891fdcbeec767984bba\" class=\"ne-p\"><br></p><h2 id=\"Lc8dG\"><span class=\"ne-text\">ES2015 Map</span></h2><p id=\"65484a8b9521727866edf723b803328b\" class=\"ne-p\"><span class=\"ne-text\">let obj ={a:100}</span></p><p id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" class=\"ne-p\"><span class=\"ne-text\">let o = new Map()</span></p><p id=\"2473241e478587a4c3c02d4b26ad1eb9\" class=\"ne-p\"><span class=\"ne-text\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p id=\"d9bc79d87b767025b040f75077c473f6\" class=\"ne-p\"><span class=\"ne-text\">严格的键值对集合，它的键可以是任意类型。</span></p><p id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" class=\"ne-p\"><br></p><h2 id=\"NNQQy\"><span class=\"ne-text\">ES2015 Symbol</span></h2><p id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" class=\"ne-p\"><span class=\"ne-text\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 id=\"d4fdM\"><span class=\"ne-text\">Symbol.for</span></h4><p id=\"u67569089\" class=\"ne-p\"><span class=\"ne-text\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><pre data-language=\"javascript\" id=\"pvypQ\" class=\"ne-codeblock\">// 因此Symbol.for(&quot;aa&quot;) = Symbol. for(&quot;aa&quot;) // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(&quot; true&quot;) // true</pre><h4 id=\"kC8Ep\"><span class=\"ne-text\">Symbol用途</span></h4><ol class=\"ne-ol\"><li id=\"9815d6bc47bf82e15c1a8498b246b333\"><span class=\"ne-text\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">作为属性就不会出现这种问题。</span></li><li id=\"b47f21250795d2f5df56c0af532e30eb\"><span class=\"ne-text\">可以为对象添加私有属性</span></li></ol><pre data-language=\"javascript\" id=\"QUZk9\" class=\"ne-codeblock\">const name = Symbol()\nclass Person {\n  [name]: &quot;xsl&quot;,\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)</pre><p id=\"baf611945256cb585362597404dce10b\" class=\"ne-p\"><span class=\"ne-text\">   3. </span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><pre data-language=\"javascript\" id=\"Dpc6B\" class=\"ne-codeblock\">// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: &quot;XObject&quot;\n}\nconsole.log(obj.toString()) // [ object XObject]</pre><p id=\"acf7adc4fe407cf00094c862cae7ae50\" class=\"ne-p\"><span class=\"ne-text\">对象的</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">属性无法通过</span><code class=\"ne-code\"><span class=\"ne-text\">for in</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">Object.keys</span></code><span class=\"ne-text\">获取，</span><code class=\"ne-code\"><span class=\"ne-text\">JSON.stringify</span></code><span class=\"ne-text\">时</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">的属性也会被忽略掉。</span></p><p id=\"u73717d60\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">可以使用</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">Object.getOwnPropertySymbols</span></strong></code><strong><span class=\"ne-text\" style=\"text-decoration: underline\">获取对象的所有</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">Symbol</span></strong></code><strong><span class=\"ne-text\" style=\"text-decoration: underline\">类型的属性。</span></strong></p><p id=\"uccdb7f66\" class=\"ne-p\"><br></p><h2 id=\"Th2zC\"><span class=\"ne-text\">ES2015 for of</span></h2><p id=\"6d770189f5efceef3d9d598e8bc90c1c\" class=\"ne-p\"><span class=\"ne-text\">使用for of可以遍历所有数据类型</span></p><p id=\"a6bc9413c55120431bf78843f2d3966b\" class=\"ne-p\"><span class=\"ne-text\">默认可以对数组遍历</span></p><p id=\"449688b548c3dde68eb750b4c01a9e4c\" class=\"ne-p\"><span class=\"ne-text\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p id=\"u6c3ac6e6\" class=\"ne-p\"><br></p><h2 id=\"ynMdl\"><span class=\"ne-text\">ES2015 Iterable</span></h2><p id=\"u399a8bcc\" class=\"ne-p\"><br></p><p id=\"9a75caaf895fc4f99c1a4adaf29812c6\" class=\"ne-p\"><br></p><h2 id=\"k6z3d\"><span class=\"ne-text\">ES2016 概述</span></h2><p id=\"ue8809a66\" class=\"ne-p\"><br></p><h2 id=\"gLEad\"><span class=\"ne-text\">ES2017 概述</span></h2><p id=\"u4626838c\" class=\"ne-p\"><span class=\"ne-text\">允许在参数和数组字面量后边加上小逗号</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u2b234441\" id=\"u2b234441\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p data-lake-id=\"d3cbb52d6d52c80ccf2d65591448fab9\" id=\"d3cbb52d6d52c80ccf2d65591448fab9\"><br></p><p data-lake-id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" id=\"f4ab73c661ebd0b22a68d7d6140bee8a\"><span data-lake-id=\"u45c6e9af\" id=\"u45c6e9af\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p data-lake-id=\"ff3ffd5440184610f6f8d2e694398516\" id=\"ff3ffd5440184610f6f8d2e694398516\"><br></p><p data-lake-id=\"81a82c175e6408af98467dc09c2c0870\" id=\"81a82c175e6408af98467dc09c2c0870\"><span data-lake-id=\"u8883ad7f\" id=\"u8883ad7f\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p data-lake-id=\"48122c837e9e1e883a3abd1d8c31c74d\" id=\"48122c837e9e1e883a3abd1d8c31c74d\"><br></p><p data-lake-id=\"a3f83d1af971926a0ebd593ef4ae133b\" id=\"a3f83d1af971926a0ebd593ef4ae133b\"><span data-lake-id=\"u6f4e7c70\" id=\"u6f4e7c70\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p data-lake-id=\"7d3162cfb13cf8cd0b519edb15ae2487\" id=\"7d3162cfb13cf8cd0b519edb15ae2487\"><br></p><p data-lake-id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" id=\"2d3afc41d8fec39eb9f0aecc60ef450a\"><span data-lake-id=\"u7e1b415b\" id=\"u7e1b415b\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p data-lake-id=\"ba4d4c35a4a0f1d53758b91bdd6a9a82\" id=\"ba4d4c35a4a0f1d53758b91bdd6a9a82\"><br></p><h2 data-lake-id=\"HkOqc\" id=\"HkOqc\"><span data-lake-id=\"u2bb1e948\" id=\"u2bb1e948\">ES2015 let与块级作用域</span></h2><p data-lake-id=\"a7d58fd87dfe4f73457cb2884320ffb8\" id=\"a7d58fd87dfe4f73457cb2884320ffb8\"><span data-lake-id=\"uc44e85d1\" id=\"uc44e85d1\">var会被变量提升，let不会有这个问题</span></p><p data-lake-id=\"0013fb4aa6397b6b4655835fd2adb9d8\" id=\"0013fb4aa6397b6b4655835fd2adb9d8\"><br></p><h2 data-lake-id=\"ZNvYJ\" id=\"ZNvYJ\"><span data-lake-id=\"uaf98899b\" id=\"uaf98899b\">ES2015 const</span></h2><p data-lake-id=\"7232ee60dc640e8c0fa206900fe41af0\" id=\"7232ee60dc640e8c0fa206900fe41af0\"><span data-lake-id=\"u8c754977\" id=\"u8c754977\">const声明的常量不能再次修改引用的内存地址。</span></p><p data-lake-id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" id=\"96ca37a3ac7e214753cb6e4f9caa78f6\"><br></p><h2 data-lake-id=\"J0cTK\" id=\"J0cTK\"><span data-lake-id=\"u7c978d71\" id=\"u7c978d71\">ES2015 数组的解构</span></h2><p data-lake-id=\"0d50255207efb51be0471eeddf106559\" id=\"0d50255207efb51be0471eeddf106559\"><span data-lake-id=\"u80d4b94c\" id=\"u80d4b94c\">const [a.b] = [100, 200]</span></p><p data-lake-id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\"><span data-lake-id=\"ua50333d3\" id=\"ua50333d3\">可以根据位置提取对应的值</span></p><p data-lake-id=\"a909120279a6cc355c3098367cd76fc8\" id=\"a909120279a6cc355c3098367cd76fc8\"><br></p><h2 data-lake-id=\"CZhW7\" id=\"CZhW7\"><span data-lake-id=\"u4fec2785\" id=\"u4fec2785\">ES2015 对象的解构</span></h2><p data-lake-id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" id=\"f73a4e69d9f761ca25c9a9287f80eb7f\"><span data-lake-id=\"u784ad796\" id=\"u784ad796\">const {a} = {a:200}</span></p><p data-lake-id=\"fc5a7abc8887d704b807426868c17df3\" id=\"fc5a7abc8887d704b807426868c17df3\"><span data-lake-id=\"ude7671fa\" id=\"ude7671fa\">和数组不同的是，它需要指定解构的属性名</span></p><p data-lake-id=\"239a5af75036cda388b52e0a6977cd0e\" id=\"239a5af75036cda388b52e0a6977cd0e\"><br></p><h2 data-lake-id=\"e8qOh\" id=\"e8qOh\"><span data-lake-id=\"u2fa6773c\" id=\"u2fa6773c\">ES2015 模板字符串</span></h2><p data-lake-id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" id=\"0efa35e8f8a9a73faffe3fc06c8698f6\"><span data-lake-id=\"ub5a0ec49\" id=\"ub5a0ec49\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p data-lake-id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" id=\"4030a3163fed6ebfa9b6ca59c4d47c33\"><br></p><h2 data-lake-id=\"UjcAB\" id=\"UjcAB\"><span data-lake-id=\"u0a47cf5e\" id=\"u0a47cf5e\">ES2015 带标签的模板字符串</span></h2><p data-lake-id=\"fa847889a38f60e93911037652d375c7\" id=\"fa847889a38f60e93911037652d375c7\"><span data-lake-id=\"u27c6f6f5\" id=\"u27c6f6f5\">const str = console.log'hello wolrd'</span></p><p data-lake-id=\"f8c8c795f5f8836b2ead806315c9ddbc\" id=\"f8c8c795f5f8836b2ead806315c9ddbc\"><span data-lake-id=\"ueeab9416\" id=\"ueeab9416\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p data-lake-id=\"2366c3dc2a42397f46f2404396517423\" id=\"2366c3dc2a42397f46f2404396517423\"><br></p><h2 data-lake-id=\"fgbbo\" id=\"fgbbo\"><span data-lake-id=\"uf09f2995\" id=\"uf09f2995\">ES2015 字符串的扩展方法</span></h2><p data-lake-id=\"57371814a3d7b11e0501c5af3faca3a5\" id=\"57371814a3d7b11e0501c5af3faca3a5\"><span data-lake-id=\"uda029414\" id=\"uda029414\">startWith</span></p><p data-lake-id=\"f00a311809e779a530ea987f12288f1d\" id=\"f00a311809e779a530ea987f12288f1d\"><span data-lake-id=\"u3f830cb3\" id=\"u3f830cb3\">endWith</span></p><p data-lake-id=\"60969596c3ae112f93567cc5731e4dfc\" id=\"60969596c3ae112f93567cc5731e4dfc\"><span data-lake-id=\"ueb1b6573\" id=\"ueb1b6573\">includes</span></p><p data-lake-id=\"4a632fc50f8d951732842457a24b2019\" id=\"4a632fc50f8d951732842457a24b2019\"><br></p><h2 data-lake-id=\"VA2FF\" id=\"VA2FF\"><span data-lake-id=\"u6321e849\" id=\"u6321e849\">ES 2015 参数默认值</span></h2><p data-lake-id=\"558108fa39e43277eec2bb466f8ac466\" id=\"558108fa39e43277eec2bb466f8ac466\"><span data-lake-id=\"u8621bffa\" id=\"u8621bffa\">function fn(a = 100){}</span></p><p data-lake-id=\"9948aefd5dd067496238fc9dc7b1b95b\" id=\"9948aefd5dd067496238fc9dc7b1b95b\"><span data-lake-id=\"u2cf3db66\" id=\"u2cf3db66\">可以在形参后面加上=值</span></p><p data-lake-id=\"a4c17d0d43f12f905c3304b9bd4451e5\" id=\"a4c17d0d43f12f905c3304b9bd4451e5\"><span data-lake-id=\"uca09f316\" id=\"uca09f316\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p data-lake-id=\"a35a69e0ed7a099623ced3b2c442b5e2\" id=\"a35a69e0ed7a099623ced3b2c442b5e2\"><span data-lake-id=\"u97105e23\" id=\"u97105e23\">function fn(a=100,b){}</span></p><p data-lake-id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\"><span data-lake-id=\"u203f4bce\" id=\"u203f4bce\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p data-lake-id=\"4a3fd9b4f90969d634685e4e90d004c2\" id=\"4a3fd9b4f90969d634685e4e90d004c2\"><span data-lake-id=\"u015a65ee\" id=\"u015a65ee\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p data-lake-id=\"3ef505ff83aecba7c5ff389b1005f9d5\" id=\"3ef505ff83aecba7c5ff389b1005f9d5\"><br></p><h2 data-lake-id=\"dImiD\" id=\"dImiD\"><span data-lake-id=\"u9ecfe781\" id=\"u9ecfe781\">ES2015 剩余参数</span></h2><p data-lake-id=\"54c0c20b2fea16c59e29a2bb15f4700d\" id=\"54c0c20b2fea16c59e29a2bb15f4700d\"><span data-lake-id=\"ufe4f4f4a\" id=\"ufe4f4f4a\">arguments</span></p><p data-lake-id=\"ef6d7a459ce386feaaa5c1c084eec86b\" id=\"ef6d7a459ce386feaaa5c1c084eec86b\"><span data-lake-id=\"u17c92a10\" id=\"u17c92a10\">...args</span></p><p data-lake-id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\"><br></p><h2 data-lake-id=\"BXrvd\" id=\"BXrvd\"><span data-lake-id=\"uc6dd2b03\" id=\"uc6dd2b03\">ES2015 展开数组</span></h2><p data-lake-id=\"d9e625370f98b10cd1303e97bfd831ca\" id=\"d9e625370f98b10cd1303e97bfd831ca\"><span data-lake-id=\"u9c9756d6\" id=\"u9c9756d6\">console.log(...[100,200,300])</span></p><p data-lake-id=\"658964f1c65281a4d07047295f64ddea\" id=\"658964f1c65281a4d07047295f64ddea\"><br></p><h2 data-lake-id=\"naD2s\" id=\"naD2s\"><span data-lake-id=\"u3faf63ad\" id=\"u3faf63ad\">ES2015 箭头函数与this</span></h2><p data-lake-id=\"019a46c230981e3ca8b889f0aeacb795\" id=\"019a46c230981e3ca8b889f0aeacb795\"><span data-lake-id=\"ud68d8b6b\" id=\"ud68d8b6b\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p data-lake-id=\"8d422cebc120b77563d29750149ffbf7\" id=\"8d422cebc120b77563d29750149ffbf7\"><br></p><h2 data-lake-id=\"p8QSG\" id=\"p8QSG\"><span data-lake-id=\"u95ba4135\" id=\"u95ba4135\">ES2015 对象字面量的增强</span></h2><p data-lake-id=\"d6b42abd6a4978ff55469ddde4627a2f\" id=\"d6b42abd6a4978ff55469ddde4627a2f\"><span data-lake-id=\"u25c19cb9\" id=\"u25c19cb9\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p data-lake-id=\"92ca9371cc8a17915cd9de516397a95f\" id=\"92ca9371cc8a17915cd9de516397a95f\"><br></p><h2 data-lake-id=\"tW994\" id=\"tW994\"><span data-lake-id=\"u0e83d7f8\" id=\"u0e83d7f8\">ES2015 Object.assign</span></h2><p data-lake-id=\"ec09fd5129f5f645630a2fccdf53b7f9\" id=\"ec09fd5129f5f645630a2fccdf53b7f9\"><span data-lake-id=\"u54e01d4d\" id=\"u54e01d4d\">var obj3=Object.assign(obj1, obj2)</span></p><p data-lake-id=\"0de6ed9e49306e6d0625664f541d2e23\" id=\"0de6ed9e49306e6d0625664f541d2e23\"><span data-lake-id=\"uc345f071\" id=\"uc345f071\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p data-lake-id=\"41e5a6062d6db1bdcd247b00229e3087\" id=\"41e5a6062d6db1bdcd247b00229e3087\"><br></p><h2 data-lake-id=\"rYaWA\" id=\"rYaWA\"><span data-lake-id=\"ud0cf2a0a\" id=\"ud0cf2a0a\">ES2015 Object.is</span></h2><p data-lake-id=\"0cc01364bf48f3357d49e870987c3b13\" id=\"0cc01364bf48f3357d49e870987c3b13\"><span data-lake-id=\"u2944ddf3\" id=\"u2944ddf3\">==只比较值，不比较类型，会自动类型转换</span></p><p data-lake-id=\"cd3806ab093d7491c684ae71b24e3272\" id=\"cd3806ab093d7491c684ae71b24e3272\"><span data-lake-id=\"u654db60e\" id=\"u654db60e\">===比较值和类型，严格模式</span></p><p data-lake-id=\"6d22ab8995f223b751af30ad66e36e36\" id=\"6d22ab8995f223b751af30ad66e36e36\"><span data-lake-id=\"u91c266a2\" id=\"u91c266a2\">NaN ===NaN //false</span></p><p data-lake-id=\"e33f6ca4086c79eeffa1532dcace1e93\" id=\"e33f6ca4086c79eeffa1532dcace1e93\"><span data-lake-id=\"u1ebb28e4\" id=\"u1ebb28e4\">Object.is(NaN,NaN)//true</span></p><p data-lake-id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\"><br></p><h2 data-lake-id=\"pYv7C\" id=\"pYv7C\"><span data-lake-id=\"u2fcbf904\" id=\"u2fcbf904\">ES2015 Proxy</span></h2><p data-lake-id=\"1e139c7f6ecbf4bf81fce3789241da0a\" id=\"1e139c7f6ecbf4bf81fce3789241da0a\"><span data-lake-id=\"u42b52b32\" id=\"u42b52b32\">可以对对象的属性改动进行检测和拦截</span></p><p data-lake-id=\"9935408458e3fc9d528ad1a38a984dd4\" id=\"9935408458e3fc9d528ad1a38a984dd4\"><br></p><h2 data-lake-id=\"j4sVE\" id=\"j4sVE\"><span data-lake-id=\"u20ab6a6b\" id=\"u20ab6a6b\">ES2015 Proxy对比Object.defineProperty</span></h2><p data-lake-id=\"d35def387befa2da830e430e209ec0f8\" id=\"d35def387befa2da830e430e209ec0f8\"><span data-lake-id=\"u59c94405\" id=\"u59c94405\">Proxy功能更强大一些。</span></p><p data-lake-id=\"790ef2815013f32c9fb7eabc6d396986\" id=\"790ef2815013f32c9fb7eabc6d396986\"><span data-lake-id=\"u3ac44ea8\" id=\"u3ac44ea8\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p data-lake-id=\"16674882cd320bd1432f514cdd7346f8\" id=\"16674882cd320bd1432f514cdd7346f8\"><span data-lake-id=\"u4bb87de6\" id=\"u4bb87de6\">可以对数组检测</span></p><p data-lake-id=\"9b9bf0c27590b1530284a78d696b5fa2\" id=\"9b9bf0c27590b1530284a78d696b5fa2\"><span data-lake-id=\"uad20dbc9\" id=\"uad20dbc9\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p data-lake-id=\"4394df20f1e858c6e5a82814be7796bc\" id=\"4394df20f1e858c6e5a82814be7796bc\"><br></p><h2 data-lake-id=\"B8pRM\" id=\"B8pRM\"><span data-lake-id=\"u05289cfd\" id=\"u05289cfd\">ES2015 Reflect</span></h2><p data-lake-id=\"51d9a7aa69ca41ffecae23265ab50a25\" id=\"51d9a7aa69ca41ffecae23265ab50a25\"><span data-lake-id=\"u331b593e\" id=\"u331b593e\">Reflect.get</span></p><p data-lake-id=\"0e687dd808dfc161578d80f86ee8c7e2\" id=\"0e687dd808dfc161578d80f86ee8c7e2\"><span data-lake-id=\"ub9b9a330\" id=\"ub9b9a330\">Reflect.set</span></p><p data-lake-id=\"935ae49c4a2f967e98fc094387346ae9\" id=\"935ae49c4a2f967e98fc094387346ae9\"><span data-lake-id=\"u9aa2c3f4\" id=\"u9aa2c3f4\">提供了一套对对象操作的api</span></p><p data-lake-id=\"3ae5829656745e6485ab83c3d36e73df\" id=\"3ae5829656745e6485ab83c3d36e73df\"><span data-lake-id=\"u2258931c\" id=\"u2258931c\">以前的操作方式可能会被废弃掉</span></p><p data-lake-id=\"6a3aeda5ea58acc443b9d8492f0f2513\" id=\"6a3aeda5ea58acc443b9d8492f0f2513\"><br></p><h2 data-lake-id=\"ScdtP\" id=\"ScdtP\"><span data-lake-id=\"u0a24ce5e\" id=\"u0a24ce5e\">ES2015 Promise</span></h2><p data-lake-id=\"5aa1f4e3545b531faec5c6d08910cc79\" id=\"5aa1f4e3545b531faec5c6d08910cc79\"><span data-lake-id=\"u833e9b75\" id=\"u833e9b75\">异步编程解决方案</span></p><p data-lake-id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" id=\"1c886fffe778a3b817a1f1c1f59fe3c6\"><br></p><h2 data-lake-id=\"MH3LB\" id=\"MH3LB\"><span data-lake-id=\"udc55a4c6\" id=\"udc55a4c6\">ES2015 class</span></h2><p data-lake-id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" id=\"7881d52bc2d1dc4119c91361c0fa0f4b\"><br></p><h2 data-lake-id=\"KsCTY\" id=\"KsCTY\"><span data-lake-id=\"u0e56aa23\" id=\"u0e56aa23\">es2015 静态方法</span></h2><p data-lake-id=\"79799ec53f319300f74fcc41f0058cec\" id=\"79799ec53f319300f74fcc41f0058cec\"><br></p><h2 data-lake-id=\"vfjM6\" id=\"vfjM6\"><span data-lake-id=\"ub61520f1\" id=\"ub61520f1\">es2015 类的继承</span></h2><p data-lake-id=\"7efec470976b0b17c48e127588a868ce\" id=\"7efec470976b0b17c48e127588a868ce\"><span data-lake-id=\"u677bc8d8\" id=\"u677bc8d8\">super</span></p><p data-lake-id=\"33ebfbffd369193e56112839083cf5c1\" id=\"33ebfbffd369193e56112839083cf5c1\"><br></p><h2 data-lake-id=\"S5ulm\" id=\"S5ulm\"><span data-lake-id=\"u08af8913\" id=\"u08af8913\">ES2015 Set</span></h2><p data-lake-id=\"f94c9962904b257af11f289e3bbff6e7\" id=\"f94c9962904b257af11f289e3bbff6e7\"><span data-lake-id=\"ud0aedb12\" id=\"ud0aedb12\">不重复的数组  常用来去重</span></p><p data-lake-id=\"1e183c566a0ed891fdcbeec767984bba\" id=\"1e183c566a0ed891fdcbeec767984bba\"><br></p><h2 data-lake-id=\"Lc8dG\" id=\"Lc8dG\"><span data-lake-id=\"u2686a169\" id=\"u2686a169\">ES2015 Map</span></h2><p data-lake-id=\"65484a8b9521727866edf723b803328b\" id=\"65484a8b9521727866edf723b803328b\"><span data-lake-id=\"u9ac1bffd\" id=\"u9ac1bffd\">let obj ={a:100}</span></p><p data-lake-id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" id=\"bab10b3ca9b07d421afa1f19f5c6e6df\"><span data-lake-id=\"u143dc5eb\" id=\"u143dc5eb\">let o = new Map()</span></p><p data-lake-id=\"2473241e478587a4c3c02d4b26ad1eb9\" id=\"2473241e478587a4c3c02d4b26ad1eb9\"><span data-lake-id=\"u49d5bd5b\" id=\"u49d5bd5b\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p data-lake-id=\"d9bc79d87b767025b040f75077c473f6\" id=\"d9bc79d87b767025b040f75077c473f6\"><span data-lake-id=\"ub03dec3d\" id=\"ub03dec3d\">严格的键值对集合，它的键可以是任意类型。</span></p><p data-lake-id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" id=\"db88f2cfd11df7498b2c8b1b2c79c88d\"><br></p><h2 data-lake-id=\"NNQQy\" id=\"NNQQy\"><span data-lake-id=\"u363e5ea8\" id=\"u363e5ea8\">ES2015 Symbol</span></h2><p data-lake-id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" id=\"4968a13ad478a6a5e83d44d0ef0fcee2\"><span data-lake-id=\"u97b1e6ce\" id=\"u97b1e6ce\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 data-lake-id=\"d4fdM\" id=\"d4fdM\"><span data-lake-id=\"u6b5d80b2\" id=\"u6b5d80b2\">Symbol.for</span></h4><p data-lake-id=\"u67569089\" id=\"u67569089\"><span data-lake-id=\"u2d70b6dd\" id=\"u2d70b6dd\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%9B%A0%E6%AD%A4Symbol.for(%5C%22aa%5C%22)%20%3D%20Symbol.%20for(%5C%22aa%5C%22)%20%2F%2F%20true%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E7%9A%84%E4%B8%8D%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82%5CnSymbol.for(true)%20%3D%3D%3D%20Symbol.%20for(%5C%22%20true%5C%22)%20%2F%2F%20true%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22pvypQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"kC8Ep\" id=\"kC8Ep\"><span data-lake-id=\"u7eecfa25\" id=\"u7eecfa25\">Symbol用途</span></h4><ol list=\"u00b13e16\"><li fid=\"u0d9dfb3c\" data-lake-id=\"9815d6bc47bf82e15c1a8498b246b333\" id=\"9815d6bc47bf82e15c1a8498b246b333\"><span data-lake-id=\"u124034a3\" id=\"u124034a3\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code data-lake-id=\"u2f45c616\" id=\"u2f45c616\"><span data-lake-id=\"ue34ce9cb\" id=\"ue34ce9cb\">Symbol</span></code><span data-lake-id=\"ud9760c1e\" id=\"ud9760c1e\">作为属性就不会出现这种问题。</span></li><li fid=\"u0d9dfb3c\" data-lake-id=\"b47f21250795d2f5df56c0af532e30eb\" id=\"b47f21250795d2f5df56c0af532e30eb\"><span data-lake-id=\"u8f1179ae\" id=\"u8f1179ae\">可以为对象添加私有属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20name%20%3D%20Symbol()%5Cnclass%20Person%20%7B%5Cn%20%20%5Bname%5D%3A%20%5C%22xsl%5C%22%2C%5Cn%20%20%20%20say()%7B%5Cn%20%20%20%20%2F%2F%20%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE%5Cn%20%20%20%20console.log(this.%5Bname%5D)%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E8%80%8C%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A4%96%E9%83%A8%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%8D%E7%9F%A5%E9%81%93%E5%86%85%E9%83%A8%E7%9A%84%E5%94%AF%E4%B8%80%E9%94%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%80%8C%E6%97%A0%E6%B3%95%E5%9C%A8%E5%A4%96%E9%83%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E3%80%82%5Cnconst%20obj%20%3D%20new%20Person()%5Cnconsole.%20log(obj.say)%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22QUZk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"baf611945256cb585362597404dce10b\" id=\"baf611945256cb585362597404dce10b\"><span data-lake-id=\"u229aa641\" id=\"u229aa641\">   3. </span><code data-lake-id=\"ua7e76c29\" id=\"ua7e76c29\"><span data-lake-id=\"u2bdc8071\" id=\"u2bdc8071\">Symbol</span></code><span data-lake-id=\"ua649e51c\" id=\"ua649e51c\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Symbol.iterator%5Cn%2F%2F%20Symbol.hasInstance%5Cn%2F%2F%20Symbol.toStringTag%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%5BSymbol.toStringTag%5D%3A%20%5C%22XObject%5C%22%5Cn%7D%5Cnconsole.log(obj.toString())%20%2F%2F%20%5B%20object%20XObject%5D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Dpc6B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"acf7adc4fe407cf00094c862cae7ae50\" id=\"acf7adc4fe407cf00094c862cae7ae50\"><span data-lake-id=\"u46ff891a\" id=\"u46ff891a\">对象的</span><code data-lake-id=\"ub032960a\" id=\"ub032960a\"><span data-lake-id=\"u3311bcd9\" id=\"u3311bcd9\">Symbol</span></code><span data-lake-id=\"u6b626f29\" id=\"u6b626f29\">属性无法通过</span><code data-lake-id=\"ue1d7523c\" id=\"ue1d7523c\"><span data-lake-id=\"u7eae829b\" id=\"u7eae829b\">for in</span></code><span data-lake-id=\"u9984d376\" id=\"u9984d376\">和</span><code data-lake-id=\"u7f8ab7e5\" id=\"u7f8ab7e5\"><span data-lake-id=\"ud80e8a1b\" id=\"ud80e8a1b\">Object.keys</span></code><span data-lake-id=\"uf0d1061e\" id=\"uf0d1061e\">获取，</span><code data-lake-id=\"u637b05fb\" id=\"u637b05fb\"><span data-lake-id=\"uf861266f\" id=\"uf861266f\">JSON.stringify</span></code><span data-lake-id=\"u4bcc4323\" id=\"u4bcc4323\">时</span><code data-lake-id=\"u827be8fa\" id=\"u827be8fa\"><span data-lake-id=\"ubc6103b9\" id=\"ubc6103b9\">Symbol</span></code><span data-lake-id=\"u92364b56\" id=\"u92364b56\">的属性也会被忽略掉。</span></p><p data-lake-id=\"u73717d60\" id=\"u73717d60\"><strong><u><span data-lake-id=\"ufe1e3dae\" id=\"ufe1e3dae\">可以使用</span></u></strong><code data-lake-id=\"u4f9d4aa2\" id=\"u4f9d4aa2\"><strong><u><span data-lake-id=\"u9b35d663\" id=\"u9b35d663\">Object.getOwnPropertySymbols</span></u></strong></code><strong><u><span data-lake-id=\"u6aaf7435\" id=\"u6aaf7435\">获取对象的所有</span></u></strong><code data-lake-id=\"u1fdee7a3\" id=\"u1fdee7a3\"><strong><u><span data-lake-id=\"ud0e8cc1a\" id=\"ud0e8cc1a\">Symbol</span></u></strong></code><strong><u><span data-lake-id=\"uf2a058d8\" id=\"uf2a058d8\">类型的属性。</span></u></strong></p><p data-lake-id=\"uccdb7f66\" id=\"uccdb7f66\"><br></p><h2 data-lake-id=\"Th2zC\" id=\"Th2zC\"><span data-lake-id=\"u8d7ed984\" id=\"u8d7ed984\">ES2015 for of</span></h2><p data-lake-id=\"6d770189f5efceef3d9d598e8bc90c1c\" id=\"6d770189f5efceef3d9d598e8bc90c1c\"><span data-lake-id=\"ud48e988a\" id=\"ud48e988a\">使用for of可以遍历所有数据类型</span></p><p data-lake-id=\"a6bc9413c55120431bf78843f2d3966b\" id=\"a6bc9413c55120431bf78843f2d3966b\"><span data-lake-id=\"ue22e9d53\" id=\"ue22e9d53\">默认可以对数组遍历</span></p><p data-lake-id=\"449688b548c3dde68eb750b4c01a9e4c\" id=\"449688b548c3dde68eb750b4c01a9e4c\"><span data-lake-id=\"u5fc7c328\" id=\"u5fc7c328\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p data-lake-id=\"u6c3ac6e6\" id=\"u6c3ac6e6\"><br></p><h2 data-lake-id=\"ynMdl\" id=\"ynMdl\"><span data-lake-id=\"ubf7d70fe\" id=\"ubf7d70fe\">ES2015 Iterable</span></h2><p data-lake-id=\"u399a8bcc\" id=\"u399a8bcc\"><br></p><p data-lake-id=\"9a75caaf895fc4f99c1a4adaf29812c6\" id=\"9a75caaf895fc4f99c1a4adaf29812c6\"><br></p><h2 data-lake-id=\"k6z3d\" id=\"k6z3d\"><span data-lake-id=\"ua6a73ef4\" id=\"ua6a73ef4\">ES2016 概述</span></h2><p data-lake-id=\"ue8809a66\" id=\"ue8809a66\"><br></p><h2 data-lake-id=\"gLEad\" id=\"gLEad\"><span data-lake-id=\"u3be239fd\" id=\"u3be239fd\">ES2017 概述</span></h2><p data-lake-id=\"u4626838c\" id=\"u4626838c\"><span data-lake-id=\"u5d50e8fc\" id=\"u5d50e8fc\">允许在参数和数组字面量后边加上小逗号</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u2b234441\" id=\"u2b234441\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p data-lake-id=\"d3cbb52d6d52c80ccf2d65591448fab9\" id=\"d3cbb52d6d52c80ccf2d65591448fab9\"><br></p><p data-lake-id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" id=\"f4ab73c661ebd0b22a68d7d6140bee8a\"><span data-lake-id=\"u45c6e9af\" id=\"u45c6e9af\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p data-lake-id=\"ff3ffd5440184610f6f8d2e694398516\" id=\"ff3ffd5440184610f6f8d2e694398516\"><br></p><p data-lake-id=\"81a82c175e6408af98467dc09c2c0870\" id=\"81a82c175e6408af98467dc09c2c0870\"><span data-lake-id=\"u8883ad7f\" id=\"u8883ad7f\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p data-lake-id=\"48122c837e9e1e883a3abd1d8c31c74d\" id=\"48122c837e9e1e883a3abd1d8c31c74d\"><br></p><p data-lake-id=\"a3f83d1af971926a0ebd593ef4ae133b\" id=\"a3f83d1af971926a0ebd593ef4ae133b\"><span data-lake-id=\"u6f4e7c70\" id=\"u6f4e7c70\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p data-lake-id=\"7d3162cfb13cf8cd0b519edb15ae2487\" id=\"7d3162cfb13cf8cd0b519edb15ae2487\"><br></p><p data-lake-id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" id=\"2d3afc41d8fec39eb9f0aecc60ef450a\"><span data-lake-id=\"u7e1b415b\" id=\"u7e1b415b\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p data-lake-id=\"ba4d4c35a4a0f1d53758b91bdd6a9a82\" id=\"ba4d4c35a4a0f1d53758b91bdd6a9a82\"><br></p><h2 data-lake-id=\"HkOqc\" id=\"HkOqc\"><span data-lake-id=\"u2bb1e948\" id=\"u2bb1e948\">ES2015 let与块级作用域</span></h2><p data-lake-id=\"a7d58fd87dfe4f73457cb2884320ffb8\" id=\"a7d58fd87dfe4f73457cb2884320ffb8\"><span data-lake-id=\"uc44e85d1\" id=\"uc44e85d1\">var会被变量提升，let不会有这个问题</span></p><p data-lake-id=\"0013fb4aa6397b6b4655835fd2adb9d8\" id=\"0013fb4aa6397b6b4655835fd2adb9d8\"><br></p><h2 data-lake-id=\"ZNvYJ\" id=\"ZNvYJ\"><span data-lake-id=\"uaf98899b\" id=\"uaf98899b\">ES2015 const</span></h2><p data-lake-id=\"7232ee60dc640e8c0fa206900fe41af0\" id=\"7232ee60dc640e8c0fa206900fe41af0\"><span data-lake-id=\"u8c754977\" id=\"u8c754977\">const声明的常量不能再次修改引用的内存地址。</span></p><p data-lake-id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" id=\"96ca37a3ac7e214753cb6e4f9caa78f6\"><br></p><h2 data-lake-id=\"J0cTK\" id=\"J0cTK\"><span data-lake-id=\"u7c978d71\" id=\"u7c978d71\">ES2015 数组的解构</span></h2><p data-lake-id=\"0d50255207efb51be0471eeddf106559\" id=\"0d50255207efb51be0471eeddf106559\"><span data-lake-id=\"u80d4b94c\" id=\"u80d4b94c\">const [a.b] = [100, 200]</span></p><p data-lake-id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\"><span data-lake-id=\"ua50333d3\" id=\"ua50333d3\">可以根据位置提取对应的值</span></p><p data-lake-id=\"a909120279a6cc355c3098367cd76fc8\" id=\"a909120279a6cc355c3098367cd76fc8\"><br></p><h2 data-lake-id=\"CZhW7\" id=\"CZhW7\"><span data-lake-id=\"u4fec2785\" id=\"u4fec2785\">ES2015 对象的解构</span></h2><p data-lake-id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" id=\"f73a4e69d9f761ca25c9a9287f80eb7f\"><span data-lake-id=\"u784ad796\" id=\"u784ad796\">const {a} = {a:200}</span></p><p data-lake-id=\"fc5a7abc8887d704b807426868c17df3\" id=\"fc5a7abc8887d704b807426868c17df3\"><span data-lake-id=\"ude7671fa\" id=\"ude7671fa\">和数组不同的是，它需要指定解构的属性名</span></p><p data-lake-id=\"239a5af75036cda388b52e0a6977cd0e\" id=\"239a5af75036cda388b52e0a6977cd0e\"><br></p><h2 data-lake-id=\"e8qOh\" id=\"e8qOh\"><span data-lake-id=\"u2fa6773c\" id=\"u2fa6773c\">ES2015 模板字符串</span></h2><p data-lake-id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" id=\"0efa35e8f8a9a73faffe3fc06c8698f6\"><span data-lake-id=\"ub5a0ec49\" id=\"ub5a0ec49\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p data-lake-id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" id=\"4030a3163fed6ebfa9b6ca59c4d47c33\"><br></p><h2 data-lake-id=\"UjcAB\" id=\"UjcAB\"><span data-lake-id=\"u0a47cf5e\" id=\"u0a47cf5e\">ES2015 带标签的模板字符串</span></h2><p data-lake-id=\"fa847889a38f60e93911037652d375c7\" id=\"fa847889a38f60e93911037652d375c7\"><span data-lake-id=\"u27c6f6f5\" id=\"u27c6f6f5\">const str = console.log'hello wolrd'</span></p><p data-lake-id=\"f8c8c795f5f8836b2ead806315c9ddbc\" id=\"f8c8c795f5f8836b2ead806315c9ddbc\"><span data-lake-id=\"ueeab9416\" id=\"ueeab9416\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p data-lake-id=\"2366c3dc2a42397f46f2404396517423\" id=\"2366c3dc2a42397f46f2404396517423\"><br></p><h2 data-lake-id=\"fgbbo\" id=\"fgbbo\"><span data-lake-id=\"uf09f2995\" id=\"uf09f2995\">ES2015 字符串的扩展方法</span></h2><p data-lake-id=\"57371814a3d7b11e0501c5af3faca3a5\" id=\"57371814a3d7b11e0501c5af3faca3a5\"><span data-lake-id=\"uda029414\" id=\"uda029414\">startWith</span></p><p data-lake-id=\"f00a311809e779a530ea987f12288f1d\" id=\"f00a311809e779a530ea987f12288f1d\"><span data-lake-id=\"u3f830cb3\" id=\"u3f830cb3\">endWith</span></p><p data-lake-id=\"60969596c3ae112f93567cc5731e4dfc\" id=\"60969596c3ae112f93567cc5731e4dfc\"><span data-lake-id=\"ueb1b6573\" id=\"ueb1b6573\">includes</span></p><p data-lake-id=\"4a632fc50f8d951732842457a24b2019\" id=\"4a632fc50f8d951732842457a24b2019\"><br></p><h2 data-lake-id=\"VA2FF\" id=\"VA2FF\"><span data-lake-id=\"u6321e849\" id=\"u6321e849\">ES 2015 参数默认值</span></h2><p data-lake-id=\"558108fa39e43277eec2bb466f8ac466\" id=\"558108fa39e43277eec2bb466f8ac466\"><span data-lake-id=\"u8621bffa\" id=\"u8621bffa\">function fn(a = 100){}</span></p><p data-lake-id=\"9948aefd5dd067496238fc9dc7b1b95b\" id=\"9948aefd5dd067496238fc9dc7b1b95b\"><span data-lake-id=\"u2cf3db66\" id=\"u2cf3db66\">可以在形参后面加上=值</span></p><p data-lake-id=\"a4c17d0d43f12f905c3304b9bd4451e5\" id=\"a4c17d0d43f12f905c3304b9bd4451e5\"><span data-lake-id=\"uca09f316\" id=\"uca09f316\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p data-lake-id=\"a35a69e0ed7a099623ced3b2c442b5e2\" id=\"a35a69e0ed7a099623ced3b2c442b5e2\"><span data-lake-id=\"u97105e23\" id=\"u97105e23\">function fn(a=100,b){}</span></p><p data-lake-id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\"><span data-lake-id=\"u203f4bce\" id=\"u203f4bce\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p data-lake-id=\"4a3fd9b4f90969d634685e4e90d004c2\" id=\"4a3fd9b4f90969d634685e4e90d004c2\"><span data-lake-id=\"u015a65ee\" id=\"u015a65ee\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p data-lake-id=\"3ef505ff83aecba7c5ff389b1005f9d5\" id=\"3ef505ff83aecba7c5ff389b1005f9d5\"><br></p><h2 data-lake-id=\"dImiD\" id=\"dImiD\"><span data-lake-id=\"u9ecfe781\" id=\"u9ecfe781\">ES2015 剩余参数</span></h2><p data-lake-id=\"54c0c20b2fea16c59e29a2bb15f4700d\" id=\"54c0c20b2fea16c59e29a2bb15f4700d\"><span data-lake-id=\"ufe4f4f4a\" id=\"ufe4f4f4a\">arguments</span></p><p data-lake-id=\"ef6d7a459ce386feaaa5c1c084eec86b\" id=\"ef6d7a459ce386feaaa5c1c084eec86b\"><span data-lake-id=\"u17c92a10\" id=\"u17c92a10\">...args</span></p><p data-lake-id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\"><br></p><h2 data-lake-id=\"BXrvd\" id=\"BXrvd\"><span data-lake-id=\"uc6dd2b03\" id=\"uc6dd2b03\">ES2015 展开数组</span></h2><p data-lake-id=\"d9e625370f98b10cd1303e97bfd831ca\" id=\"d9e625370f98b10cd1303e97bfd831ca\"><span data-lake-id=\"u9c9756d6\" id=\"u9c9756d6\">console.log(...[100,200,300])</span></p><p data-lake-id=\"658964f1c65281a4d07047295f64ddea\" id=\"658964f1c65281a4d07047295f64ddea\"><br></p><h2 data-lake-id=\"naD2s\" id=\"naD2s\"><span data-lake-id=\"u3faf63ad\" id=\"u3faf63ad\">ES2015 箭头函数与this</span></h2><p data-lake-id=\"019a46c230981e3ca8b889f0aeacb795\" id=\"019a46c230981e3ca8b889f0aeacb795\"><span data-lake-id=\"ud68d8b6b\" id=\"ud68d8b6b\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p data-lake-id=\"8d422cebc120b77563d29750149ffbf7\" id=\"8d422cebc120b77563d29750149ffbf7\"><br></p><h2 data-lake-id=\"p8QSG\" id=\"p8QSG\"><span data-lake-id=\"u95ba4135\" id=\"u95ba4135\">ES2015 对象字面量的增强</span></h2><p data-lake-id=\"d6b42abd6a4978ff55469ddde4627a2f\" id=\"d6b42abd6a4978ff55469ddde4627a2f\"><span data-lake-id=\"u25c19cb9\" id=\"u25c19cb9\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p data-lake-id=\"92ca9371cc8a17915cd9de516397a95f\" id=\"92ca9371cc8a17915cd9de516397a95f\"><br></p><h2 data-lake-id=\"tW994\" id=\"tW994\"><span data-lake-id=\"u0e83d7f8\" id=\"u0e83d7f8\">ES2015 Object.assign</span></h2><p data-lake-id=\"ec09fd5129f5f645630a2fccdf53b7f9\" id=\"ec09fd5129f5f645630a2fccdf53b7f9\"><span data-lake-id=\"u54e01d4d\" id=\"u54e01d4d\">var obj3=Object.assign(obj1, obj2)</span></p><p data-lake-id=\"0de6ed9e49306e6d0625664f541d2e23\" id=\"0de6ed9e49306e6d0625664f541d2e23\"><span data-lake-id=\"uc345f071\" id=\"uc345f071\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p data-lake-id=\"41e5a6062d6db1bdcd247b00229e3087\" id=\"41e5a6062d6db1bdcd247b00229e3087\"><br></p><h2 data-lake-id=\"rYaWA\" id=\"rYaWA\"><span data-lake-id=\"ud0cf2a0a\" id=\"ud0cf2a0a\">ES2015 Object.is</span></h2><p data-lake-id=\"0cc01364bf48f3357d49e870987c3b13\" id=\"0cc01364bf48f3357d49e870987c3b13\"><span data-lake-id=\"u2944ddf3\" id=\"u2944ddf3\">==只比较值，不比较类型，会自动类型转换</span></p><p data-lake-id=\"cd3806ab093d7491c684ae71b24e3272\" id=\"cd3806ab093d7491c684ae71b24e3272\"><span data-lake-id=\"u654db60e\" id=\"u654db60e\">===比较值和类型，严格模式</span></p><p data-lake-id=\"6d22ab8995f223b751af30ad66e36e36\" id=\"6d22ab8995f223b751af30ad66e36e36\"><span data-lake-id=\"u91c266a2\" id=\"u91c266a2\">NaN ===NaN //false</span></p><p data-lake-id=\"e33f6ca4086c79eeffa1532dcace1e93\" id=\"e33f6ca4086c79eeffa1532dcace1e93\"><span data-lake-id=\"u1ebb28e4\" id=\"u1ebb28e4\">Object.is(NaN,NaN)//true</span></p><p data-lake-id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\"><br></p><h2 data-lake-id=\"pYv7C\" id=\"pYv7C\"><span data-lake-id=\"u2fcbf904\" id=\"u2fcbf904\">ES2015 Proxy</span></h2><p data-lake-id=\"1e139c7f6ecbf4bf81fce3789241da0a\" id=\"1e139c7f6ecbf4bf81fce3789241da0a\"><span data-lake-id=\"u42b52b32\" id=\"u42b52b32\">可以对对象的属性改动进行检测和拦截</span></p><p data-lake-id=\"9935408458e3fc9d528ad1a38a984dd4\" id=\"9935408458e3fc9d528ad1a38a984dd4\"><br></p><h2 data-lake-id=\"j4sVE\" id=\"j4sVE\"><span data-lake-id=\"u20ab6a6b\" id=\"u20ab6a6b\">ES2015 Proxy对比Object.defineProperty</span></h2><p data-lake-id=\"d35def387befa2da830e430e209ec0f8\" id=\"d35def387befa2da830e430e209ec0f8\"><span data-lake-id=\"u59c94405\" id=\"u59c94405\">Proxy功能更强大一些。</span></p><p data-lake-id=\"790ef2815013f32c9fb7eabc6d396986\" id=\"790ef2815013f32c9fb7eabc6d396986\"><span data-lake-id=\"u3ac44ea8\" id=\"u3ac44ea8\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p data-lake-id=\"16674882cd320bd1432f514cdd7346f8\" id=\"16674882cd320bd1432f514cdd7346f8\"><span data-lake-id=\"u4bb87de6\" id=\"u4bb87de6\">可以对数组检测</span></p><p data-lake-id=\"9b9bf0c27590b1530284a78d696b5fa2\" id=\"9b9bf0c27590b1530284a78d696b5fa2\"><span data-lake-id=\"uad20dbc9\" id=\"uad20dbc9\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p data-lake-id=\"4394df20f1e858c6e5a82814be7796bc\" id=\"4394df20f1e858c6e5a82814be7796bc\"><br></p><h2 data-lake-id=\"B8pRM\" id=\"B8pRM\"><span data-lake-id=\"u05289cfd\" id=\"u05289cfd\">ES2015 Reflect</span></h2><p data-lake-id=\"51d9a7aa69ca41ffecae23265ab50a25\" id=\"51d9a7aa69ca41ffecae23265ab50a25\"><span data-lake-id=\"u331b593e\" id=\"u331b593e\">Reflect.get</span></p><p data-lake-id=\"0e687dd808dfc161578d80f86ee8c7e2\" id=\"0e687dd808dfc161578d80f86ee8c7e2\"><span data-lake-id=\"ub9b9a330\" id=\"ub9b9a330\">Reflect.set</span></p><p data-lake-id=\"935ae49c4a2f967e98fc094387346ae9\" id=\"935ae49c4a2f967e98fc094387346ae9\"><span data-lake-id=\"u9aa2c3f4\" id=\"u9aa2c3f4\">提供了一套对对象操作的api</span></p><p data-lake-id=\"3ae5829656745e6485ab83c3d36e73df\" id=\"3ae5829656745e6485ab83c3d36e73df\"><span data-lake-id=\"u2258931c\" id=\"u2258931c\">以前的操作方式可能会被废弃掉</span></p><p data-lake-id=\"6a3aeda5ea58acc443b9d8492f0f2513\" id=\"6a3aeda5ea58acc443b9d8492f0f2513\"><br></p><h2 data-lake-id=\"ScdtP\" id=\"ScdtP\"><span data-lake-id=\"u0a24ce5e\" id=\"u0a24ce5e\">ES2015 Promise</span></h2><p data-lake-id=\"5aa1f4e3545b531faec5c6d08910cc79\" id=\"5aa1f4e3545b531faec5c6d08910cc79\"><span data-lake-id=\"u833e9b75\" id=\"u833e9b75\">异步编程解决方案</span></p><p data-lake-id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" id=\"1c886fffe778a3b817a1f1c1f59fe3c6\"><br></p><h2 data-lake-id=\"MH3LB\" id=\"MH3LB\"><span data-lake-id=\"udc55a4c6\" id=\"udc55a4c6\">ES2015 class</span></h2><p data-lake-id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" id=\"7881d52bc2d1dc4119c91361c0fa0f4b\"><br></p><h2 data-lake-id=\"KsCTY\" id=\"KsCTY\"><span data-lake-id=\"u0e56aa23\" id=\"u0e56aa23\">es2015 静态方法</span></h2><p data-lake-id=\"79799ec53f319300f74fcc41f0058cec\" id=\"79799ec53f319300f74fcc41f0058cec\"><br></p><h2 data-lake-id=\"vfjM6\" id=\"vfjM6\"><span data-lake-id=\"ub61520f1\" id=\"ub61520f1\">es2015 类的继承</span></h2><p data-lake-id=\"7efec470976b0b17c48e127588a868ce\" id=\"7efec470976b0b17c48e127588a868ce\"><span data-lake-id=\"u677bc8d8\" id=\"u677bc8d8\">super</span></p><p data-lake-id=\"33ebfbffd369193e56112839083cf5c1\" id=\"33ebfbffd369193e56112839083cf5c1\"><br></p><h2 data-lake-id=\"S5ulm\" id=\"S5ulm\"><span data-lake-id=\"u08af8913\" id=\"u08af8913\">ES2015 Set</span></h2><p data-lake-id=\"f94c9962904b257af11f289e3bbff6e7\" id=\"f94c9962904b257af11f289e3bbff6e7\"><span data-lake-id=\"ud0aedb12\" id=\"ud0aedb12\">不重复的数组  常用来去重</span></p><p data-lake-id=\"1e183c566a0ed891fdcbeec767984bba\" id=\"1e183c566a0ed891fdcbeec767984bba\"><br></p><h2 data-lake-id=\"Lc8dG\" id=\"Lc8dG\"><span data-lake-id=\"u2686a169\" id=\"u2686a169\">ES2015 Map</span></h2><p data-lake-id=\"65484a8b9521727866edf723b803328b\" id=\"65484a8b9521727866edf723b803328b\"><span data-lake-id=\"u9ac1bffd\" id=\"u9ac1bffd\">let obj ={a:100}</span></p><p data-lake-id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" id=\"bab10b3ca9b07d421afa1f19f5c6e6df\"><span data-lake-id=\"u143dc5eb\" id=\"u143dc5eb\">let o = new Map()</span></p><p data-lake-id=\"2473241e478587a4c3c02d4b26ad1eb9\" id=\"2473241e478587a4c3c02d4b26ad1eb9\"><span data-lake-id=\"u49d5bd5b\" id=\"u49d5bd5b\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p data-lake-id=\"d9bc79d87b767025b040f75077c473f6\" id=\"d9bc79d87b767025b040f75077c473f6\"><span data-lake-id=\"ub03dec3d\" id=\"ub03dec3d\">严格的键值对集合，它的键可以是任意类型。</span></p><p data-lake-id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" id=\"db88f2cfd11df7498b2c8b1b2c79c88d\"><br></p><h2 data-lake-id=\"NNQQy\" id=\"NNQQy\"><span data-lake-id=\"u363e5ea8\" id=\"u363e5ea8\">ES2015 Symbol</span></h2><p data-lake-id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" id=\"4968a13ad478a6a5e83d44d0ef0fcee2\"><span data-lake-id=\"u97b1e6ce\" id=\"u97b1e6ce\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 data-lake-id=\"d4fdM\" id=\"d4fdM\"><span data-lake-id=\"u6b5d80b2\" id=\"u6b5d80b2\">Symbol.for</span></h4><p data-lake-id=\"u67569089\" id=\"u67569089\"><span data-lake-id=\"u2d70b6dd\" id=\"u2d70b6dd\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%9B%A0%E6%AD%A4Symbol.for(%5C%22aa%5C%22)%20%3D%20Symbol.%20for(%5C%22aa%5C%22)%20%2F%2F%20true%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E7%9A%84%E4%B8%8D%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82%5CnSymbol.for(true)%20%3D%3D%3D%20Symbol.%20for(%5C%22%20true%5C%22)%20%2F%2F%20true%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22pvypQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"kC8Ep\" id=\"kC8Ep\"><span data-lake-id=\"u7eecfa25\" id=\"u7eecfa25\">Symbol用途</span></h4><ol list=\"u00b13e16\"><li fid=\"u0d9dfb3c\" data-lake-id=\"9815d6bc47bf82e15c1a8498b246b333\" id=\"9815d6bc47bf82e15c1a8498b246b333\"><span data-lake-id=\"u124034a3\" id=\"u124034a3\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code data-lake-id=\"u2f45c616\" id=\"u2f45c616\"><span data-lake-id=\"ue34ce9cb\" id=\"ue34ce9cb\">Symbol</span></code><span data-lake-id=\"ud9760c1e\" id=\"ud9760c1e\">作为属性就不会出现这种问题。</span></li><li fid=\"u0d9dfb3c\" data-lake-id=\"b47f21250795d2f5df56c0af532e30eb\" id=\"b47f21250795d2f5df56c0af532e30eb\"><span data-lake-id=\"u8f1179ae\" id=\"u8f1179ae\">可以为对象添加私有属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20name%20%3D%20Symbol()%5Cnclass%20Person%20%7B%5Cn%20%20%5Bname%5D%3A%20%5C%22xsl%5C%22%2C%5Cn%20%20%20%20say()%7B%5Cn%20%20%20%20%2F%2F%20%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE%5Cn%20%20%20%20console.log(this.%5Bname%5D)%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E8%80%8C%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A4%96%E9%83%A8%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%8D%E7%9F%A5%E9%81%93%E5%86%85%E9%83%A8%E7%9A%84%E5%94%AF%E4%B8%80%E9%94%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%80%8C%E6%97%A0%E6%B3%95%E5%9C%A8%E5%A4%96%E9%83%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E3%80%82%5Cnconst%20obj%20%3D%20new%20Person()%5Cnconsole.%20log(obj.say)%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22QUZk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"baf611945256cb585362597404dce10b\" id=\"baf611945256cb585362597404dce10b\"><span data-lake-id=\"u229aa641\" id=\"u229aa641\">   3. </span><code data-lake-id=\"ua7e76c29\" id=\"ua7e76c29\"><span data-lake-id=\"u2bdc8071\" id=\"u2bdc8071\">Symbol</span></code><span data-lake-id=\"ua649e51c\" id=\"ua649e51c\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Symbol.iterator%5Cn%2F%2F%20Symbol.hasInstance%5Cn%2F%2F%20Symbol.toStringTag%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%5BSymbol.toStringTag%5D%3A%20%5C%22XObject%5C%22%5Cn%7D%5Cnconsole.log(obj.toString())%20%2F%2F%20%5B%20object%20XObject%5D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Dpc6B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"acf7adc4fe407cf00094c862cae7ae50\" id=\"acf7adc4fe407cf00094c862cae7ae50\"><span data-lake-id=\"u46ff891a\" id=\"u46ff891a\">对象的</span><code data-lake-id=\"ub032960a\" id=\"ub032960a\"><span data-lake-id=\"u3311bcd9\" id=\"u3311bcd9\">Symbol</span></code><span data-lake-id=\"u6b626f29\" id=\"u6b626f29\">属性无法通过</span><code data-lake-id=\"ue1d7523c\" id=\"ue1d7523c\"><span data-lake-id=\"u7eae829b\" id=\"u7eae829b\">for in</span></code><span data-lake-id=\"u9984d376\" id=\"u9984d376\">和</span><code data-lake-id=\"u7f8ab7e5\" id=\"u7f8ab7e5\"><span data-lake-id=\"ud80e8a1b\" id=\"ud80e8a1b\">Object.keys</span></code><span data-lake-id=\"uf0d1061e\" id=\"uf0d1061e\">获取，</span><code data-lake-id=\"u637b05fb\" id=\"u637b05fb\"><span data-lake-id=\"uf861266f\" id=\"uf861266f\">JSON.stringify</span></code><span data-lake-id=\"u4bcc4323\" id=\"u4bcc4323\">时</span><code data-lake-id=\"u827be8fa\" id=\"u827be8fa\"><span data-lake-id=\"ubc6103b9\" id=\"ubc6103b9\">Symbol</span></code><span data-lake-id=\"u92364b56\" id=\"u92364b56\">的属性也会被忽略掉。</span></p><p data-lake-id=\"u73717d60\" id=\"u73717d60\"><strong><u><span data-lake-id=\"ufe1e3dae\" id=\"ufe1e3dae\">可以使用</span></u></strong><code data-lake-id=\"u4f9d4aa2\" id=\"u4f9d4aa2\"><strong><u><span data-lake-id=\"u9b35d663\" id=\"u9b35d663\">Object.getOwnPropertySymbols</span></u></strong></code><strong><u><span data-lake-id=\"u6aaf7435\" id=\"u6aaf7435\">获取对象的所有</span></u></strong><code data-lake-id=\"u1fdee7a3\" id=\"u1fdee7a3\"><strong><u><span data-lake-id=\"ud0e8cc1a\" id=\"ud0e8cc1a\">Symbol</span></u></strong></code><strong><u><span data-lake-id=\"uf2a058d8\" id=\"uf2a058d8\">类型的属性。</span></u></strong></p><p data-lake-id=\"uccdb7f66\" id=\"uccdb7f66\"><br></p><h2 data-lake-id=\"Th2zC\" id=\"Th2zC\"><span data-lake-id=\"u8d7ed984\" id=\"u8d7ed984\">ES2015 for of</span></h2><p data-lake-id=\"6d770189f5efceef3d9d598e8bc90c1c\" id=\"6d770189f5efceef3d9d598e8bc90c1c\"><span data-lake-id=\"ud48e988a\" id=\"ud48e988a\">使用for of可以遍历所有数据类型</span></p><p data-lake-id=\"a6bc9413c55120431bf78843f2d3966b\" id=\"a6bc9413c55120431bf78843f2d3966b\"><span data-lake-id=\"ue22e9d53\" id=\"ue22e9d53\">默认可以对数组遍历</span></p><p data-lake-id=\"449688b548c3dde68eb750b4c01a9e4c\" id=\"449688b548c3dde68eb750b4c01a9e4c\"><span data-lake-id=\"u5fc7c328\" id=\"u5fc7c328\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p data-lake-id=\"u6c3ac6e6\" id=\"u6c3ac6e6\"><br></p><h2 data-lake-id=\"ynMdl\" id=\"ynMdl\"><span data-lake-id=\"ubf7d70fe\" id=\"ubf7d70fe\">ES2015 Iterable</span></h2><p data-lake-id=\"u399a8bcc\" id=\"u399a8bcc\"><br></p><p data-lake-id=\"9a75caaf895fc4f99c1a4adaf29812c6\" id=\"9a75caaf895fc4f99c1a4adaf29812c6\"><br></p><h2 data-lake-id=\"k6z3d\" id=\"k6z3d\"><span data-lake-id=\"ua6a73ef4\" id=\"ua6a73ef4\">ES2016 概述</span></h2><p data-lake-id=\"ue8809a66\" id=\"ue8809a66\"><br></p><h2 data-lake-id=\"gLEad\" id=\"gLEad\"><span data-lake-id=\"u3be239fd\" id=\"u3be239fd\">ES2017 概述</span></h2><p data-lake-id=\"u4626838c\" id=\"u4626838c\"><span data-lake-id=\"u5d50e8fc\" id=\"u5d50e8fc\">允许在参数和数组字面量后边加上小逗号</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-06-05T02:53:20.000Z",
    "deleted_at": null,
    "created_at": "2021-05-26T07:47:31.000Z",
    "updated_at": "2021-06-05T02:53:20.000Z",
    "published_at": "2021-06-05T02:53:20.000Z",
    "first_published_at": "2021-05-28T02:40:48.000Z",
    "word_count": 1336,
    "cover": null,
    "description": "我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)在NodeJs环境中，JavaScri...",
    "custom_description": null,
    "hits": 1,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 45978651,
    "slug": "mf50d2",
    "title": "Javascript中的异步编程",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。\n",
    "body_draft": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"uca606a48\" id=\"uca606a48\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"uca606a48\" id=\"uca606a48\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-06-06T14:28:21.000Z",
    "deleted_at": null,
    "created_at": "2021-05-25T09:49:59.000Z",
    "updated_at": "2021-06-06T14:28:21.000Z",
    "published_at": "2021-06-06T14:28:21.000Z",
    "first_published_at": "2021-05-25T10:14:36.000Z",
    "word_count": 44,
    "cover": null,
    "description": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。",
    "custom_description": null,
    "hits": 2,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 45802825,
    "slug": "kegf2o",
    "title": "说透函数式编程",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。\n<a name=\"uZi3e\"></a>\n## 是什么\n函数式编程(Function Programming FP)，FP是编程范式之一。<br />函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 <br />函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。<br />有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。\n```javascript\n// 数学中的函数\ny = sin(x) // 描述x和y之间的映射关系\n```\n由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。<br />\n<br />上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。\n<a name=\"V96u2\"></a>\n## 使用函数式编程的好处\n\n- 函数式编程可以抛弃this，不再向面向对象那样经常用到this\n- 打包过程中可以更好的利用tree shaking过滤无用代码\n- 方便测试和并行处理\n\n\n<br />了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。\n<a name=\"alQOW\"></a>\n## 函数是一等公民\n在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。<br />总结来说，函数是一等公民，它有以下特点：\n\n- 函数可以存储在变量中\n- 函数可以作为参数\n- 函数可以作为返回值\n\n<br />\n<a name=\"q2F1g\"></a>\n## 高阶函数\n高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。<br />我们为什么要使用高阶函数呢？\n<a name=\"wMS1Q\"></a>\n### 使用高阶函数的意义/好处\n\n- 使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。\n- 对通用问题进行抽象，方便重复调用\n- 使代码更加简洁\n\n<br />\n<a name=\"Bs8R5\"></a>\n## 闭包\n闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。<br />换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。\n\n深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。这就是闭包的本质。\n\n<a name=\"3da1bf44\"></a>\n### 使用闭包的好处\n延长了外部函数中的变量的作用范围。\n\n<a name=\"2cb7562c\"></a>\n## 纯函数\n纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。<br />也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。<br />纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。\n<a name=\"2472cc12\"></a>\n### 使用纯函数的好处\n\n- 可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果**缓存**起来，避免重复调用，提高性能。\n- 方便测试\n- 方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。\n\n\n\n<a name=\"fe55650d\"></a>\n## 副作用\n副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。<br />副作用可能的来源：配置文件、数据库、获取用户的输入等。<br />所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。<br />\n\n<a name=\"ca4d6da4\"></a>\n## 柯里化(Curry)\n当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。<br />柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的**缓存**。\n<a name=\"112a4c14\"></a>\n### 柯里化的好处\n\n- 让函数变得灵活，让函数的粒度变得更小\n- 可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。\n<a name=\"163a4c62\"></a>\n### 通用柯里化函数\n```javascript\nfunction curry(fn){\n  return function iner(...args){\n    if(fn.length !== args.length){\n      return iner(args.concat(Array.from(arguments)))\n    }else{\n      fn.apply(fn, args)\n    }\n  }\n}\n```\n<a name=\"b94b73a6\"></a>\n## 函数组合(compose)\n纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。\n<a name=\"90ed305f\"></a>\n### 实现原理\n```javascript\nfunction compose(...args){\n  return function (value){\n    return args.reduceRight(function(ret, fn){\n      return fn(ret)\n    }, value)\n  }\n}\n```\n函数组合需要满足**结合律**，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。<br />\n\n",
    "body_draft": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。\n<a name=\"uZi3e\"></a>\n## 是什么\n函数式编程(Function Programming FP)，FP是编程范式之一。<br />函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 <br />函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。<br />有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。\n```javascript\n// 数学中的函数\ny = sin(x) // 描述x和y之间的映射关系\n```\n由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。<br />\n<br />上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。\n<a name=\"V96u2\"></a>\n## 使用函数式编程的好处\n\n- 函数式编程可以抛弃this，不再向面向对象那样经常用到this\n- 打包过程中可以更好的利用tree shaking过滤无用代码\n- 方便测试和并行处理\n\n\n<br />了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。\n<a name=\"alQOW\"></a>\n## 函数是一等公民\n在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。<br />总结来说，函数是一等公民，它有以下特点：\n\n- 函数可以存储在变量中\n- 函数可以作为参数\n- 函数可以作为返回值\n\n<br />\n<a name=\"q2F1g\"></a>\n## 高阶函数\n高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。<br />我们为什么要使用高阶函数呢？\n<a name=\"wMS1Q\"></a>\n### 使用高阶函数的意义/好处\n\n- 使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。\n- 对通用问题进行抽象，方便重复调用\n- 使代码更加简洁\n\n<br />\n<a name=\"Bs8R5\"></a>\n## 闭包\n闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。<br />换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。\n\n深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。这就是闭包的本质。\n\n<a name=\"3da1bf44\"></a>\n### 使用闭包的好处\n延长了外部函数中的变量的作用范围。\n\n<a name=\"2cb7562c\"></a>\n## 纯函数\n纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。<br />也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。<br />纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。\n<a name=\"2472cc12\"></a>\n### 使用纯函数的好处\n\n- 可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果**缓存**起来，避免重复调用，提高性能。\n- 方便测试\n- 方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。\n\n\n\n<a name=\"fe55650d\"></a>\n## 副作用\n副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。<br />副作用可能的来源：配置文件、数据库、获取用户的输入等。<br />所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。<br />\n\n<a name=\"ca4d6da4\"></a>\n## 柯里化(Curry)\n当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。<br />柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的**缓存**。\n<a name=\"112a4c14\"></a>\n### 柯里化的好处\n\n- 让函数变得灵活，让函数的粒度变得更小\n- 可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。\n<a name=\"163a4c62\"></a>\n### 通用柯里化函数\n```javascript\nfunction curry(fn){\n  return function iner(...args){\n    if(fn.length !== args.length){\n      return iner(args.concat(Array.from(arguments)))\n    }else{\n      fn.apply(fn, args)\n    }\n  }\n}\n```\n<a name=\"b94b73a6\"></a>\n## 函数组合(compose)\n纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。\n<a name=\"90ed305f\"></a>\n### 实现原理\n```javascript\nfunction compose(...args){\n  return function (value){\n    return args.reduceRight(function(ret, fn){\n      return fn(ret)\n    }, value)\n  }\n}\n```\n函数组合需要满足**结合律**，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。<br />\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B53%2C0%2C12%5D%2C%5B53%2C0%2C12%5D%5D%2C%22active%22%3Atrue%7D\"><p data-lake-id=\"uf491417e\" id=\"uf491417e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 data-lake-id=\"uZi3e\" id=\"uZi3e\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>是什么</span></h2><p data-lake-id=\"ucd63e275\" id=\"ucd63e275\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p data-lake-id=\"ua12ce8ca\" id=\"ua12ce8ca\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p data-lake-id=\"u90e1b30c\" id=\"u90e1b30c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p data-lake-id=\"u36869fe3\" id=\"u36869fe3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"color: #F5222D;\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"y90Cp\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 数学中的函数</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">y</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">sin</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>) <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 描述x和y之间的映射关系</span></span></span></pre></div></div></div><p data-lake-id=\"u3dae5b98\" id=\"u3dae5b98\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p data-lake-id=\"69150051d5b551701f832488b8f89eff\" id=\"69150051d5b551701f832488b8f89eff\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"u414231bb\" id=\"u414231bb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 data-lake-id=\"V96u2\" id=\"V96u2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>使用函数式编程的好处</span></h2><ul data-lake-id=\"db3f5d9325ba421199d5459aef65503a_ul_0\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ud82ea86a\"><span>函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li data-lake-id=\"ue9b9aa4f\"><span>打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li data-lake-id=\"u3bb9fd86\"><span>方便测试和并行处理</span></li></ul><p data-lake-id=\"ude0d0473\" id=\"ude0d0473\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"u8fb8ae65\" id=\"u8fb8ae65\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 data-lake-id=\"alQOW\" id=\"alQOW\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>函数是一等公民</span></h2><p data-lake-id=\"u484b8254\" id=\"u484b8254\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p data-lake-id=\"ubc0af8f4\" id=\"ubc0af8f4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>总结来说，函数是一等公民，它有以下特点：</span></p><ul data-lake-id=\"e5324179558592223496bd65011e594f_ul_1\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ucd6dce35\"><span>函数可以存储在变量中</span></li><li data-lake-id=\"uf59562e9\"><span>函数可以作为参数</span></li><li data-lake-id=\"u4a6dc287\"><span>函数可以作为返回值</span></li></ul><p data-lake-id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h2 data-lake-id=\"q2F1g\" id=\"q2F1g\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>高阶函数</span></h2><p data-lake-id=\"u79f86e80\" id=\"u79f86e80\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p data-lake-id=\"u5304d78a\" id=\"u5304d78a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>我们为什么要使用高阶函数呢？</span></p><h3 data-lake-id=\"wMS1Q\" id=\"wMS1Q\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>使用高阶函数的意义/好处</span></h3><ul data-lake-id=\"9aae25cb2a85c02a6a5516290f2e3e5f_ul_2\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ucedfa9fa\"><span>使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li data-lake-id=\"ubfb9e288\"><span>对通用问题进行抽象，方便重复调用</span></li><li data-lake-id=\"u177f13ef\"><span>使代码更加简洁</span></li></ul><p data-lake-id=\"2dd1cb00de06987993e33a60d285babd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h2 data-lake-id=\"Bs8R5\" id=\"Bs8R5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>闭包</span></h2><p data-lake-id=\"u82e1aa26\" id=\"u82e1aa26\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p data-lake-id=\"ua1f7a582\" id=\"ua1f7a582\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p data-lake-id=\"bfe20cd0a82430dd1c468b94244cd445\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><p data-lake-id=\"f2cb9cad94a58685f7541109e3a20337\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span>这就是闭包的本质。</span></p><p data-lake-id=\"ab88c4941c992d3daf6fa9c4cab26035\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h3 data-lake-id=\"459e3580d2fbe750a9ec55a029eee64a\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>使用闭包的好处</span></h3><p data-lake-id=\"822c4af5e19f9235472119a06970c94c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>延长了外部函数中的变量的作用范围。</span></p><p data-lake-id=\"e40410ce099f91a533ee2d89d4f95adc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h2 data-lake-id=\"9aa9178dc8a8bf41ef4dc1e36aba2302\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>纯函数</span></h2><p data-lake-id=\"a716dd9ed5d6d133a6d876214ba49d92\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p data-lake-id=\"85ec9179e9ab07fa67d137ac9d32d49f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p data-lake-id=\"781bad43e3890207a2024698c00d87d8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 data-lake-id=\"4b015734c25cd91037109f0dc0c87326\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">使用纯函数的好处</h3><ul data-lake-id=\"8d2a4dc0584237e4176fec5f5fe2802c\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"0c97694cacd3dc37f3d06879226836ea\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果<strong>缓存</strong>起来，避免重复调用，提高性能。</li><li data-lake-id=\"07d006936eac94afab92d0765adac110\">方便测试</li><li data-lake-id=\"a2c5011d12acf7bffd0acbf38bdf848b\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</li></ul><p data-lake-id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"f4ed44b3e1007dac2dbda6a8c58d3e85\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">副作用</h2><p data-lake-id=\"201cd68e98e157ff6b5363d596cebdd3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</p><p data-lake-id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</p><p data-lake-id=\"eed422eed2e9b11b69e0854a507a22b2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</p><p data-lake-id=\"600472ad8cd30731cb0bc5d164e708a2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"c76b5998b1d4ba5840e2c011e02d0d73\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">柯里化(Curry)</h2><p data-lake-id=\"6d95900674a536b54e39fa9295edb522\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</p><p data-lake-id=\"2d37fe432b6859d3fd89921338afb112\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的<strong>缓存</strong>。</p><h3 data-lake-id=\"b1a44dd92990f2e4d84c8d33fd6d2e08\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">柯里化的好处</h3><ul data-lake-id=\"a9f27e43693942a13dc81d0b40bea1da\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"fd299ed4d52ba628ecb73b574d37eb72\">让函数变得灵活，让函数的粒度变得更小</li><li data-lake-id=\"d4caae9ebe9e689bf036d65129b5ed2f\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</li></ul><h3 data-lake-id=\"3b7988670598da03f7cd06351cebb93d\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">通用柯里化函数</h3><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"AepII\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">curry</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">iner</span>(<span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">...</span><span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">if</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">length</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">!==</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">length</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">iner</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">concat</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Array</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">arguments</span>)))\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">else</span>{\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">apply</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>, <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>)\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><h2 data-lake-id=\"0c9a91ac802fd7313673d1b4876e1f94\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">函数组合(compose)</h2><p data-lake-id=\"840c719f117b2c951c676a9597685464\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</p><h3 data-lake-id=\"ab6f85a23a02ecb4758cc030b419257f\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">实现原理</h3><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Y7EJf\" class=\"lake-card-margin-top lake-card-margin-bottom\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">compose</span>(<span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">...</span><span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">args</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">reduceRight</span>(<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ret</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ret</span>)\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }, <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>)\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p data-lake-id=\"881d400612f75a85427e87b2f4be88a1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">函数组合需要满足<strong>结合律</strong>，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</p><p data-lake-id=\"699ed1d2498a6a0b1843c09a173087cc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"uf491417e\" id=\"uf491417e\"><span>说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 data-lake-id=\"uZi3e\" id=\"uZi3e\"><span>是什么</span></h2><p data-lake-id=\"ucd63e275\" id=\"ucd63e275\"><span>函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p data-lake-id=\"ua12ce8ca\" id=\"ua12ce8ca\"><span>函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p data-lake-id=\"u90e1b30c\" id=\"u90e1b30c\"><span>函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p data-lake-id=\"u36869fe3\" id=\"u36869fe3\"><span style=\"color: #F5222D;\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%5Cny%20%3D%20sin(x)%20%2F%2F%20%E6%8F%8F%E8%BF%B0x%E5%92%8Cy%E4%B9%8B%E9%97%B4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22y90Cp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3dae5b98\" id=\"u3dae5b98\"><span>由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p data-lake-id=\"69150051d5b551701f832488b8f89eff\" id=\"69150051d5b551701f832488b8f89eff\"><br /></p><p data-lake-id=\"u414231bb\" id=\"u414231bb\"><span>上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 data-lake-id=\"V96u2\" id=\"V96u2\"><span>使用函数式编程的好处</span></h2><ul data-lake-id=\"db3f5d9325ba421199d5459aef65503a_ul_0\"><li data-lake-id=\"ud82ea86a\"><span>函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li data-lake-id=\"ue9b9aa4f\"><span>打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li data-lake-id=\"u3bb9fd86\"><span>方便测试和并行处理</span></li></ul><p data-lake-id=\"ude0d0473\" id=\"ude0d0473\"><br /></p><p data-lake-id=\"u8fb8ae65\" id=\"u8fb8ae65\"><span>了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 data-lake-id=\"alQOW\" id=\"alQOW\"><span>函数是一等公民</span></h2><p data-lake-id=\"u484b8254\" id=\"u484b8254\"><span>在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p data-lake-id=\"ubc0af8f4\" id=\"ubc0af8f4\"><span>总结来说，函数是一等公民，它有以下特点：</span></p><ul data-lake-id=\"e5324179558592223496bd65011e594f_ul_1\"><li data-lake-id=\"ucd6dce35\"><span>函数可以存储在变量中</span></li><li data-lake-id=\"uf59562e9\"><span>函数可以作为参数</span></li><li data-lake-id=\"u4a6dc287\"><span>函数可以作为返回值</span></li></ul><p data-lake-id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\"><span><br /></span></p><h2 data-lake-id=\"q2F1g\" id=\"q2F1g\"><span>高阶函数</span></h2><p data-lake-id=\"u79f86e80\" id=\"u79f86e80\"><span>高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p data-lake-id=\"u5304d78a\" id=\"u5304d78a\"><span>我们为什么要使用高阶函数呢？</span></p><h3 data-lake-id=\"wMS1Q\" id=\"wMS1Q\"><span>使用高阶函数的意义/好处</span></h3><ul data-lake-id=\"9aae25cb2a85c02a6a5516290f2e3e5f_ul_2\"><li data-lake-id=\"ucedfa9fa\"><span>使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li data-lake-id=\"ubfb9e288\"><span>对通用问题进行抽象，方便重复调用</span></li><li data-lake-id=\"u177f13ef\"><span>使代码更加简洁</span></li></ul><p data-lake-id=\"2dd1cb00de06987993e33a60d285babd\"><span><br /></span></p><h2 data-lake-id=\"Bs8R5\" id=\"Bs8R5\"><span>闭包</span></h2><p data-lake-id=\"u82e1aa26\" id=\"u82e1aa26\"><span>闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p data-lake-id=\"ua1f7a582\" id=\"ua1f7a582\"><span>换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p data-lake-id=\"bfe20cd0a82430dd1c468b94244cd445\"><span><br /></span></p><p data-lake-id=\"f2cb9cad94a58685f7541109e3a20337\"><span>深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span>这就是闭包的本质。</span></p><p data-lake-id=\"ab88c4941c992d3daf6fa9c4cab26035\"><span><br /></span></p><h3 data-lake-id=\"459e3580d2fbe750a9ec55a029eee64a\"><span>使用闭包的好处</span></h3><p data-lake-id=\"822c4af5e19f9235472119a06970c94c\"><span>延长了外部函数中的变量的作用范围。</span></p><p data-lake-id=\"e40410ce099f91a533ee2d89d4f95adc\"><span><br /></span></p><h2 data-lake-id=\"9aa9178dc8a8bf41ef4dc1e36aba2302\"><span>纯函数</span></h2><p data-lake-id=\"a716dd9ed5d6d133a6d876214ba49d92\"><span>纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p data-lake-id=\"85ec9179e9ab07fa67d137ac9d32d49f\"><span>也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p data-lake-id=\"781bad43e3890207a2024698c00d87d8\"><span>纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 data-lake-id=\"4b015734c25cd91037109f0dc0c87326\">使用纯函数的好处</h3><ul data-lake-id=\"8d2a4dc0584237e4176fec5f5fe2802c\"><li data-lake-id=\"0c97694cacd3dc37f3d06879226836ea\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果<strong>缓存</strong>起来，避免重复调用，提高性能。</li><li data-lake-id=\"07d006936eac94afab92d0765adac110\">方便测试</li><li data-lake-id=\"a2c5011d12acf7bffd0acbf38bdf848b\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</li></ul><p data-lake-id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\"><br /></p><h2 data-lake-id=\"f4ed44b3e1007dac2dbda6a8c58d3e85\">副作用</h2><p data-lake-id=\"201cd68e98e157ff6b5363d596cebdd3\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</p><p data-lake-id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</p><p data-lake-id=\"eed422eed2e9b11b69e0854a507a22b2\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</p><p data-lake-id=\"600472ad8cd30731cb0bc5d164e708a2\"><br /></p><h2 data-lake-id=\"c76b5998b1d4ba5840e2c011e02d0d73\">柯里化(Curry)</h2><p data-lake-id=\"6d95900674a536b54e39fa9295edb522\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</p><p data-lake-id=\"2d37fe432b6859d3fd89921338afb112\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的<strong>缓存</strong>。</p><h3 data-lake-id=\"b1a44dd92990f2e4d84c8d33fd6d2e08\">柯里化的好处</h3><ul data-lake-id=\"a9f27e43693942a13dc81d0b40bea1da\"><li data-lake-id=\"fd299ed4d52ba628ecb73b574d37eb72\">让函数变得灵活，让函数的粒度变得更小</li><li data-lake-id=\"d4caae9ebe9e689bf036d65129b5ed2f\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</li></ul><h3 data-lake-id=\"3b7988670598da03f7cd06351cebb93d\">通用柯里化函数</h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20curry(fn)%7B%5Cn%20%20return%20function%20iner(...args)%7B%5Cn%20%20%20%20if(fn.length%20!%3D%3D%20args.length)%7B%5Cn%20%20%20%20%20%20return%20iner(args.concat(Array.from(arguments)))%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20fn.apply(fn%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22AepII%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"0c9a91ac802fd7313673d1b4876e1f94\">函数组合(compose)</h2><p data-lake-id=\"840c719f117b2c951c676a9597685464\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</p><h3 data-lake-id=\"ab6f85a23a02ecb4758cc030b419257f\">实现原理</h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20compose(...args)%7B%5Cn%20%20return%20function%20(value)%7B%5Cn%20%20%20%20return%20args.reduceRight(function(ret%2C%20fn)%7B%5Cn%20%20%20%20%20%20return%20fn(ret)%5Cn%20%20%20%20%7D%2C%20value)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Y7EJf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"881d400612f75a85427e87b2f4be88a1\">函数组合需要满足<strong>结合律</strong>，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</p><p data-lake-id=\"699ed1d2498a6a0b1843c09a173087cc\"><br /><cursor /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"uf491417e\" id=\"uf491417e\"><span>说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 data-lake-id=\"uZi3e\" id=\"uZi3e\"><span>是什么</span></h2><p data-lake-id=\"ucd63e275\" id=\"ucd63e275\"><span>函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p data-lake-id=\"ua12ce8ca\" id=\"ua12ce8ca\"><span>函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p data-lake-id=\"u90e1b30c\" id=\"u90e1b30c\"><span>函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p data-lake-id=\"u36869fe3\" id=\"u36869fe3\"><span style=\"color: #F5222D;\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%5Cny%20%3D%20sin(x)%20%2F%2F%20%E6%8F%8F%E8%BF%B0x%E5%92%8Cy%E4%B9%8B%E9%97%B4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22y90Cp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3dae5b98\" id=\"u3dae5b98\"><span>由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p data-lake-id=\"69150051d5b551701f832488b8f89eff\" id=\"69150051d5b551701f832488b8f89eff\"><br /></p><p data-lake-id=\"u414231bb\" id=\"u414231bb\"><span>上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 data-lake-id=\"V96u2\" id=\"V96u2\"><span>使用函数式编程的好处</span></h2><ul data-lake-id=\"db3f5d9325ba421199d5459aef65503a_ul_0\"><li data-lake-id=\"ud82ea86a\"><span>函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li data-lake-id=\"ue9b9aa4f\"><span>打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li data-lake-id=\"u3bb9fd86\"><span>方便测试和并行处理</span></li></ul><p data-lake-id=\"ude0d0473\" id=\"ude0d0473\"><br /></p><p data-lake-id=\"u8fb8ae65\" id=\"u8fb8ae65\"><span>了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 data-lake-id=\"alQOW\" id=\"alQOW\"><span>函数是一等公民</span></h2><p data-lake-id=\"u484b8254\" id=\"u484b8254\"><span>在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p data-lake-id=\"ubc0af8f4\" id=\"ubc0af8f4\"><span>总结来说，函数是一等公民，它有以下特点：</span></p><ul data-lake-id=\"e5324179558592223496bd65011e594f_ul_1\"><li data-lake-id=\"ucd6dce35\"><span>函数可以存储在变量中</span></li><li data-lake-id=\"uf59562e9\"><span>函数可以作为参数</span></li><li data-lake-id=\"u4a6dc287\"><span>函数可以作为返回值</span></li></ul><p data-lake-id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\"><span><br /></span></p><h2 data-lake-id=\"q2F1g\" id=\"q2F1g\"><span>高阶函数</span></h2><p data-lake-id=\"u79f86e80\" id=\"u79f86e80\"><span>高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p data-lake-id=\"u5304d78a\" id=\"u5304d78a\"><span>我们为什么要使用高阶函数呢？</span></p><h3 data-lake-id=\"wMS1Q\" id=\"wMS1Q\"><span>使用高阶函数的意义/好处</span></h3><ul data-lake-id=\"9aae25cb2a85c02a6a5516290f2e3e5f_ul_2\"><li data-lake-id=\"ucedfa9fa\"><span>使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li data-lake-id=\"ubfb9e288\"><span>对通用问题进行抽象，方便重复调用</span></li><li data-lake-id=\"u177f13ef\"><span>使代码更加简洁</span></li></ul><p data-lake-id=\"2dd1cb00de06987993e33a60d285babd\"><span><br /></span></p><h2 data-lake-id=\"Bs8R5\" id=\"Bs8R5\"><span>闭包</span></h2><p data-lake-id=\"u82e1aa26\" id=\"u82e1aa26\"><span>闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p data-lake-id=\"ua1f7a582\" id=\"ua1f7a582\"><span>换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p data-lake-id=\"bfe20cd0a82430dd1c468b94244cd445\"><span><br /></span></p><p data-lake-id=\"f2cb9cad94a58685f7541109e3a20337\"><span>深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span>这就是闭包的本质。</span></p><p data-lake-id=\"ab88c4941c992d3daf6fa9c4cab26035\"><span><br /></span></p><h3 data-lake-id=\"459e3580d2fbe750a9ec55a029eee64a\"><span>使用闭包的好处</span></h3><p data-lake-id=\"822c4af5e19f9235472119a06970c94c\"><span>延长了外部函数中的变量的作用范围。</span></p><p data-lake-id=\"e40410ce099f91a533ee2d89d4f95adc\"><span><br /></span></p><h2 data-lake-id=\"9aa9178dc8a8bf41ef4dc1e36aba2302\"><span>纯函数</span></h2><p data-lake-id=\"a716dd9ed5d6d133a6d876214ba49d92\"><span>纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p data-lake-id=\"85ec9179e9ab07fa67d137ac9d32d49f\"><span>也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p data-lake-id=\"781bad43e3890207a2024698c00d87d8\"><span>纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 data-lake-id=\"4b015734c25cd91037109f0dc0c87326\">使用纯函数的好处</h3><ul data-lake-id=\"8d2a4dc0584237e4176fec5f5fe2802c\"><li data-lake-id=\"0c97694cacd3dc37f3d06879226836ea\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果<strong>缓存</strong>起来，避免重复调用，提高性能。</li><li data-lake-id=\"07d006936eac94afab92d0765adac110\">方便测试</li><li data-lake-id=\"a2c5011d12acf7bffd0acbf38bdf848b\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</li></ul><p data-lake-id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\"><br /></p><h2 data-lake-id=\"f4ed44b3e1007dac2dbda6a8c58d3e85\">副作用</h2><p data-lake-id=\"201cd68e98e157ff6b5363d596cebdd3\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</p><p data-lake-id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</p><p data-lake-id=\"eed422eed2e9b11b69e0854a507a22b2\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</p><p data-lake-id=\"600472ad8cd30731cb0bc5d164e708a2\"><br /></p><h2 data-lake-id=\"c76b5998b1d4ba5840e2c011e02d0d73\">柯里化(Curry)</h2><p data-lake-id=\"6d95900674a536b54e39fa9295edb522\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</p><p data-lake-id=\"2d37fe432b6859d3fd89921338afb112\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的<strong>缓存</strong>。</p><h3 data-lake-id=\"b1a44dd92990f2e4d84c8d33fd6d2e08\">柯里化的好处</h3><ul data-lake-id=\"a9f27e43693942a13dc81d0b40bea1da\"><li data-lake-id=\"fd299ed4d52ba628ecb73b574d37eb72\">让函数变得灵活，让函数的粒度变得更小</li><li data-lake-id=\"d4caae9ebe9e689bf036d65129b5ed2f\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</li></ul><h3 data-lake-id=\"3b7988670598da03f7cd06351cebb93d\">通用柯里化函数</h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20curry(fn)%7B%5Cn%20%20return%20function%20iner(...args)%7B%5Cn%20%20%20%20if(fn.length%20!%3D%3D%20args.length)%7B%5Cn%20%20%20%20%20%20return%20iner(args.concat(Array.from(arguments)))%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20fn.apply(fn%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22AepII%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"0c9a91ac802fd7313673d1b4876e1f94\">函数组合(compose)</h2><p data-lake-id=\"840c719f117b2c951c676a9597685464\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</p><h3 data-lake-id=\"ab6f85a23a02ecb4758cc030b419257f\">实现原理</h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20compose(...args)%7B%5Cn%20%20return%20function%20(value)%7B%5Cn%20%20%20%20return%20args.reduceRight(function(ret%2C%20fn)%7B%5Cn%20%20%20%20%20%20return%20fn(ret)%5Cn%20%20%20%20%7D%2C%20value)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Y7EJf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"881d400612f75a85427e87b2f4be88a1\">函数组合需要满足<strong>结合律</strong>，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</p><p data-lake-id=\"699ed1d2498a6a0b1843c09a173087cc\"><br /><cursor /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-05-25T09:41:11.000Z",
    "deleted_at": null,
    "created_at": "2021-05-22T13:18:37.000Z",
    "updated_at": "2021-05-25T09:41:11.000Z",
    "published_at": "2021-05-25T09:41:11.000Z",
    "first_published_at": "2021-05-23T09:17:28.000Z",
    "word_count": 1968,
    "cover": null,
    "description": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。是什么函数式编程(Function Programming FP)，FP是编程范式之一。函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何...",
    "custom_description": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。是什么函数式编程(Function Programming FP)，FP是编程范式之一。函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何...",
    "hits": 2,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 32438170,
    "slug": "ny150b",
    "title": "如何提升开发与设计表单类页面时的效率",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "可视化表单 编辑器 代码生成 表单设计\n\n| 版本 | 作者 | 更新日期 | 备注 |\n| :---: | :---: | :---: | :--- |\n| 1.0 | feline | 2021/3/8 | 拖拽方式组合控件 |\n| 2.0 | feline | 2021/3/16 | 1.重新布局，设计区域扩大很多(核心不变)<br />2.控件拖拽时，页面展示辅助线 |\n\n<a name=\"2idj7\"></a>\n## 概述\n开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。<br />\n<br />[点此进入预览版](https://resonances.gitee.io/react-visual-editor/) | [效果图](https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs)<br />\n\n<a name=\"zVRar\"></a>\n## 利益相关方**\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg)<a name=\"lTKD3\"></a>\n## 基础流程\n\n1. 用例开始\n1. 用户打开页面\n1. 页面提示可以点击左侧按钮展开控件面板\n1. 用户点击左侧菜单按钮\n1. 左侧区域出现控件面板\n1. 用户点选某个控件\n1. 控件被自动添加到页面中间的设计区域\n1. 系统提示可以对控件进行设置属性\n1. 用户右击控件\n1. 弹出菜单选项\n1. 用户选择“设置属性”\n1. 右侧区域出现属性面板\n1. 用户直接选择系统预设的不同属性\n1. 系统提示可以点击运行按钮查看生成的页面与代码\n1. 用户点击运行按钮\n1. 系统自动生成代码成功\n1. 系统展示生成完成的代码与效果页面\n1. 用户将代码复制\n1. 用例结束\n\n\n\n<a name=\"99teX\"></a>\n## 扩展流程\n11a. 用户选择“复制这个”<br />11a1. 系统自动添加一个相同的控件<br />11b. 用户选择“删除这个”<br />11b1. 系统自动将此控件删除<br />16a. 系统自动生成代码失败<br />16a1. 系统提示：运行错误<br />16a2. 执行用例1\n\n<a name=\"tahw7\"></a>\n## 里程碑\n\n- [x] 布局设置流程打通\n\n目前可以对全部或部分组件进行布局设置了。\n\n- [ ] 支持用户自定义请求options\n- [ ] 支持用户自定义表单提交方法\n\n比如请求某个接口\n\n- [ ] 生成的代码提取公共部分并抽离\n- [ ] 快捷键支持\n\n使用快捷键来快速实现某个功能<br />比如：复制、剪切、删除、打开面板\n\n- [ ] 生成后的页面可以转为HTML并下载、预览\n- [ ] 支持绘制元素\n\n不仅限于表单，也可以绘制图标、方块、等多种元素<br />\n\n",
    "body_draft": "可视化表单 编辑器 代码生成 表单设计\n\n| 版本 | 作者 | 更新日期 | 备注 |\n| :---: | :---: | :---: | :--- |\n| 1.0 | feline | 2021/3/8 | 拖拽方式组合控件 |\n| 2.0 | feline | 2021/3/16 | 1.重新布局，设计区域扩大很多(核心不变)<br />2.控件拖拽时，页面展示辅助线 |\n\n<a name=\"2idj7\"></a>\n## 概述\n开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。<br />\n<br />[点此进入预览版](https://resonances.gitee.io/react-visual-editor/) | [效果图](https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs)<br />\n\n<a name=\"zVRar\"></a>\n## 利益相关方**\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg)<a name=\"lTKD3\"></a>\n## 基础流程\n\n1. 用例开始\n1. 用户打开页面\n1. 页面提示可以点击左侧按钮展开控件面板\n1. 用户点击左侧菜单按钮\n1. 左侧区域出现控件面板\n1. 用户点选某个控件\n1. 控件被自动添加到页面中间的设计区域\n1. 系统提示可以对控件进行设置属性\n1. 用户右击控件\n1. 弹出菜单选项\n1. 用户选择“设置属性”\n1. 右侧区域出现属性面板\n1. 用户直接选择系统预设的不同属性\n1. 系统提示可以点击运行按钮查看生成的页面与代码\n1. 用户点击运行按钮\n1. 系统自动生成代码成功\n1. 系统展示生成完成的代码与效果页面\n1. 用户将代码复制\n1. 用例结束\n\n\n\n<a name=\"99teX\"></a>\n## 扩展流程\n11a. 用户选择“复制这个”<br />11a1. 系统自动添加一个相同的控件<br />11b. 用户选择“删除这个”<br />11b1. 系统自动将此控件删除<br />16a. 系统自动生成代码失败<br />16a1. 系统提示：运行错误<br />16a2. 执行用例1\n\n<a name=\"tahw7\"></a>\n## 里程碑\n\n- [x] 布局设置流程打通\n\n目前可以对全部或部分组件进行布局设置了。\n\n- [ ] 支持用户自定义请求options\n- [ ] 支持用户自定义表单提交方法\n\n比如请求某个接口\n\n- [ ] 生成的代码提取公共部分并抽离\n- [ ] 快捷键支持\n\n使用快捷键来快速实现某个功能<br />比如：复制、剪切、删除、打开面板\n\n- [ ] 生成后的页面可以转为HTML并下载、预览\n- [ ] 支持绘制元素\n\n不仅限于表单，也可以绘制图标、方块、等多种元素<br />\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%2C1%5D%2C%5B0%2C1%5D%5D%2C%22active%22%3Atrue%7D\"><p data-lake-id=\"721672d7302099737426a7c4b717199a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(255, 232, 230); color: rgb(130, 0, 20); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">可视化表单</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(255, 248, 189); color: rgb(97, 71, 0); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">编辑器</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(228, 247, 210); color: rgb(19, 82, 0); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">代码生成</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(212, 238, 252); color: rgb(0, 58, 140); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">表单设计</span></span></p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"5WThH\" class=\"lake-card-margin\"><table class=\"lake-table\" style=\"width: 750px; outline: none; border-collapse: collapse; border: 1px solid rgb(217, 217, 217);\"><colgroup><col width=\"91\" span=\"1\"><col width=\"110\" span=\"1\"><col width=\"186\" span=\"1\"><col width=\"363\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"564356b9dbae44c8c31270a6e5a044be\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">版本</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"d4cbc211030084140b42023d3330c212\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">作者</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更新日期</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">备注</p></td></tr><tr style=\"height: 33px;\"><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"5bf1144eb02d09bca53cce2940ee1566\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.0</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">feline</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"2437cac6ad8f03448ae403be9a3af9ed_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2021/3/8</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"13a7b0a95cdb8d6b31d6e8aa206dd334\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">拖拽方式组合控件</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.0</p></td><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"88937cf8ca378a356305b3667d82e7cb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>feline</span></p></td><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2021/3/16</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"3db75b7ded03f4aca42956133a9b4813\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.重新布局，设计区域扩大很多(核心不变)</p><p data-lake-id=\"45ce03b37c22160f66a9baf56fe33490\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.控件拖拽时，页面展示辅助线</p></td></tr></tbody></table></div><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">利益相关方<strong><br></strong></h2><div data-card-type=\"block\" data-lake-card=\"mindmap\" id=\"1BBMR\" class=\"lake-card-margin\" data-cell_count=\"12\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg\"></div><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\" data-lake-checked=\"true\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">✅<span></span></span></span><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"721672d7302099737426a7c4b717199a\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A1%A8%E5%8D%95%22%2C%22colorIndex%22%3A0%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E7%BC%96%E8%BE%91%E5%99%A8%22%2C%22colorIndex%22%3A1%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%22%2C%22colorIndex%22%3A2%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%22%2C%22colorIndex%22%3A4%7D\"></card></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A3%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%2291%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22110%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22186%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22363%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22564356b9dbae44c8c31270a6e5a044be%5C%22%3E%E7%89%88%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22d4cbc211030084140b42023d3330c212%5C%22%3E%E4%BD%9C%E8%80%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%225bf1144eb02d09bca53cce2940ee1566%5C%22%3E1.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3Efeline%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%222437cac6ad8f03448ae403be9a3af9ed_p_0%5C%22%3E2021%2F3%2F8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2213a7b0a95cdb8d6b31d6e8aa206dd334%5C%22%3E%E6%8B%96%E6%8B%BD%E6%96%B9%E5%BC%8F%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2288937cf8ca378a356305b3667d82e7cb%5C%22%3E%3Cspan%3Efeline%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2021%2F3%2F16%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%223db75b7ded03f4aca42956133a9b4813%5C%22%3E1.%E9%87%8D%E6%96%B0%E5%B8%83%E5%B1%80%EF%BC%8C%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%9F%9F%E6%89%A9%E5%A4%A7%E5%BE%88%E5%A4%9A(%E6%A0%B8%E5%BF%83%E4%B8%8D%E5%8F%98)%3C%2Fp%3E%3Cp%20data-lake-id%3D%5C%2245ce03b37c22160f66a9baf56fe33490%5C%22%3E2.%E6%8E%A7%E4%BB%B6%E6%8B%96%E6%8B%BD%E6%97%B6%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BE%85%E5%8A%A9%E7%BA%BF%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%2C%22hideBorder%22%3Afalse%2C%22id%22%3A%225WThH%22%7D\"></card><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\"><br /></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\"><br /></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\">利益相关方<strong><br /></strong></h2><card type=\"block\" name=\"mindmap\" value=\"data:%7B%22diagramData%22%3A%22x%C2%9Cu%C2%94%C3%9FR%5Cu001b7%5Cu0014%C3%86%C3%9Fe%7Bk%C2%A5%C2%92V%C2%AB%C2%95%C2%B8Kf%C2%B8%C3%A83tr!%C3%ADJ%C2%85i%C2%80%5Cfa%3A%C2%A5%5Cf3v%C2%89)Nj0C(S%C2%9C%C2%86%C3%90%C2%86%C2%86%C2%A6%C2%A9%5Cu0003%C2%83%5Cu0003%C3%86%C3%86%C3%B8eV%C3%BB%C3%A7%C2%AA%C2%AFP-%5B%C2%9Cm%5Cu0013%C3%8F%C3%8Ex-%C2%8F%C3%B5%C2%9D%C2%9F%C2%BE%C3%AF%5Cu001c%C2%AD83J%C2%84%C3%8E%C3%94%C2%8A%C3%B3%C2%8DZ%7C4%C2%BB0%C3%AFL9%C3%B8%5Cu000e%C2%BC%5Cu0003%C2%9D%C2%8A%C2%B3%C2%B4%C3%BCP%C3%99%C3%A5%C3%9C%C3%AC%7C8'%5Cu001e%3A%C2%AB%5Cu0015G.%C2%84%C3%8B%C3%8E%C3%94%C2%97%2B%C3%8E%C2%AC%C3%9D%C3%A2%5Cu0010%C3%A1%5Cu0013%5Cu001ePi%C3%BF%3A%C2%B34%C3%B7%C3%80%C3%BEb6%C3%BEH%C3%9AO%C2%92v%C3%8F%C3%94%C3%8F%C3%A2%C2%9F.%3F%C3%96%C2%A88%C3%81%C3%8C%C3%AC%C2%83pQ%C3%8D%7F%C2%90a.d%5Cu0012I%5E%C2%92%C2%B9%C2%AA%C2%9A%C2%AD%C3%AD%C2%B4Z%C3%8F%5Cu0005%5Cu0016%C2%95%C2%9A%5Cu000e%C2%BFR9%C3%A2%C2%A3%C2%A5%C3%85%C2%85%C2%AFs%C2%B9%C3%8F%C3%AEb%C3%A6O%C2%A3%5Cu001c%C3%A9c%3D%C2%A18%C3%B2%5Cu0010W%C3%80E%C2%88%5Cu0002%C2%A2%C2%A9%5Cu0000Lx%5Cu001aP(5%C3%A2%C3%84%5Cu000f%C3%83%40%C3%BC%5Cu0017%C3%A4~%C3%85%C3%B9%C3%AE%C2%8B%C3%B9P%7D%C3%ABL%C2%911Dzxl%C2%9A%C2%BB%C3%89%60'~%C3%B1%C3%98%C2%B4%C3%BB%C2%A6%C2%B3%C3%BF%C3%B7%C3%95%C2%8F%C3%91p%3D%7B%5EM%7F%C2%AF%C2%99%C2%AD%C2%A6y%C3%95%C3%8C%C3%AA%C3%8Dd%C3%98%C2%B1%5Cu0018%2Bc%C3%B4%C3%BA%C2%95%C3%A9%5C%5Cf%C2%87%C3%AF%C2%B3_~5%C2%BD5sZ5%C3%AD%C2%93l%C3%BF%C3%9A%5Cu0016%C2%BC%C2%81%C3%83%C3%8A%C3%A3%5Cu0014%5Cn%5Cu000e%20%C3%B4B%40%24%5Cu000f%5Cu0000%23%5Cu001e%C2%B4%5Cu001f%24%20%C3%9A%5Cu0017Xp2%5Cu0011%C3%8E%2B%5Cu0015%C2%8A%5Cu0006%C2%BF%25%2Fk%C3%99%5Cu000f%5B%C3%A6U%5Cu000e%C2%96U_%C3%86%5Cu001b%C2%ADx%C3%AF%3C%C3%9B%C3%AB%26%C3%BB%C2%8F%C3%A3%C3%B7o%C3%92%C3%AE%C3%A5mQ%25y%5Cb%25%5Cu000eA%5Cu0000%5Cu0011%5Cu0006yf%40%C3%B8%C3%82%5Cu0007%C2%9E%C2%8B5%C3%B40%C3%B4%5Cu0018T%5Cu0013%C2%8B%C2%BA%C2%AB%C2%A5%5Cu0005%C3%8D%5Ctn4!%25%5Cu001ck7%C3%B8%C2%90Z%C3%94%7Fmvj%C3%89%60%2Bi%C2%ADO%5Cfn%C2%9A0%C3%BB%7C%3A%C2%B8P%C3%8BP(%C2%A2%5Cu0001%C2%82%5Cb%5Cu0002%C2%A2B%5Cu00018%5Cu000f%7C%C2%80%C2%85%C2%80%C2%8C%5C%22%C3%A8%23%5Cr'b%C2%B21Gr%C3%957'%C3%9B%C3%B1%C3%A6Q%3A%C3%9A.%3A%C3%89%C2%9C~o%C3%A3%C2%B0%C2%B6%5Cu0014%C2%99%C2%9A%C3%8D%5Cu0003%C3%B3%C3%A2%C2%A9%C2%B982%C3%B5%C2%8BrvE%C2%B2qc%C3%87%C3%AEJ%C2%87%C3%AF%C2%A2%C3%81y%C3%9Ch%C2%A6k%C3%83%5C%5C%C3%A4%C3%B5%C3%93%C2%B4s%C2%9Dv%5Cu000e%C2%8B%C2%BD%C2%B7%C3%86R%C2%82%C2%A1r9%5Cu0002%C2%9A0m%C3%93d%5Cnp%C3%A5k%C3%80%3D%C2%A44%C3%B6)%C2%83XN%24%C3%A6%C2%A5%C3%92%C3%BF%C2%8A%C2%B76-dQ%5C%22%C3%AA%C3%A5%C2%A5%C2%93v%C3%97%5Cu001e%24%5Cu0019%C3%BC%3C%5Cu001e%C2%89h8J%C2%9E%5Cu001d%C2%8F%5Cu0001%C2%84%5Cu0017H%C3%86%5Cu0019%40%C2%9Er%5Cu0001%5Ct%C2%90%5Cu0006%C2%82q%5Ct%C2%A4B%5C%22t%25%C2%86%5Cu0016p%5C%22%C2%80_N%5Cu0016%C3%812%C3%8E%C2%A8%C2%95%C2%B6%C2%8E%3E%C2%8F%C2%BB%5Cu0003%C3%B3%C3%A487%C2%B0%C2%B7%5Cu0016%C3%B5%C3%BB%5Cu0013C%C2%A5%C3%BC%5Cu001e%C2%9A%C2%BE%5Ct%C2%B5%C3%A8q%5Cu0011%C3%B8!%C2%85%5Cu001e%40%C2%94ZWBN%C2%81%C3%B4%C2%B5%5Cu0006P%23%C2%85%7D%2C%24%C3%BC%C3%BF%5Cu0000%C3%9E6%5Cu0000%C2%B3%C3%8C%5Cu0001E%40b%C3%8Cm%5Cu0003%5Cu0010%3B%C2%B9.%C2%A3vV%7C%C3%AA%C3%9B%C3%9E%C2%90%C3%96%C3%96%C2%89%C2%A7A%C3%A3%5Cu0006%C2%88%C3%97%C3%8E%C3%B2%5Cu001c%C2%9F%C2%9Dg%C3%AD%C3%B5ht%5Cu0018%C3%97%C3%9E%25%7F5%C3%ACh%C3%9811%C3%8Dna%C2%AC%5Cu0019%C3%BD%C2%99U%5Cu000f%C3%8C%C3%B5%C2%9E%C3%998%C2%89z%C3%95%C2%A8%C3%B7%C2%A6%C3%A8%C2%8Dbr%C3%8B%5DQ%5Cu0018%C2%9E%C2%BC%7D%5Cu001b%C3%B5%5Cu001a%C3%B6N%C3%8B%C3%B6%3A%C2%A6y%C2%91%C2%9C%5Cu000e%C2%92%C2%B3A28%C2%B0%C2%9A%C3%B1%C3%AEI%C3%9C%C3%AC%5Cu0014%C2%B2%C3%B1%C3%B3F%C2%BC%C2%BB%C2%91%C2%8Ej%C2%A6~t%C2%9BQ%201c%5Cu0001%C3%B2%C2%81%5Cu000emPD%2B%5Cu0002%C2%B8u%C3%82%5EJ%5Cu0014S%C3%97%5Cu0017%C2%9E%C3%B4%C3%91%C3%84S%C3%81rF8_%C3%987%C3%80%5Cu001e%C2%AF8%C3%8B%C3%B9%5Cu0017Z2%5Cu0000%C2%AD%C3%9E_%C3%BD%5Cu0007%C3%B4%5Cu0014%5C%5C%C2%82%22%2C%22margin%22%3Atrue%2C%22id%22%3A%221BBMR%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-282.5%2C-248%2C1%5D%2C%22width%22%3A768%2C%22height%22%3A478%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg%22%2C%22searchcard><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\"><br /></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\"><span><br /></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\"><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"721672d7302099737426a7c4b717199a\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A1%A8%E5%8D%95%22%2C%22colorIndex%22%3A0%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E7%BC%96%E8%BE%91%E5%99%A8%22%2C%22colorIndex%22%3A1%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%22%2C%22colorIndex%22%3A2%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%22%2C%22colorIndex%22%3A4%7D\"></card></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A3%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%2291%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22110%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22186%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22363%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22564356b9dbae44c8c31270a6e5a044be%5C%22%3E%E7%89%88%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22d4cbc211030084140b42023d3330c212%5C%22%3E%E4%BD%9C%E8%80%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%225bf1144eb02d09bca53cce2940ee1566%5C%22%3E1.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3Efeline%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%222437cac6ad8f03448ae403be9a3af9ed_p_0%5C%22%3E2021%2F3%2F8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2213a7b0a95cdb8d6b31d6e8aa206dd334%5C%22%3E%E6%8B%96%E6%8B%BD%E6%96%B9%E5%BC%8F%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2288937cf8ca378a356305b3667d82e7cb%5C%22%3E%3Cspan%3Efeline%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2021%2F3%2F16%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%223db75b7ded03f4aca42956133a9b4813%5C%22%3E1.%E9%87%8D%E6%96%B0%E5%B8%83%E5%B1%80%EF%BC%8C%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%9F%9F%E6%89%A9%E5%A4%A7%E5%BE%88%E5%A4%9A(%E6%A0%B8%E5%BF%83%E4%B8%8D%E5%8F%98)%3C%2Fp%3E%3Cp%20data-lake-id%3D%5C%2245ce03b37c22160f66a9baf56fe33490%5C%22%3E2.%E6%8E%A7%E4%BB%B6%E6%8B%96%E6%8B%BD%E6%97%B6%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BE%85%E5%8A%A9%E7%BA%BF%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%2C%22hideBorder%22%3Afalse%2C%22id%22%3A%225WThH%22%7D\"></card><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\"><br /></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\"><br /></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\">利益相关方<strong><br /></strong></h2><card type=\"block\" name=\"mindmap\" value=\"data:%7B%22diagramData%22%3A%22x%C2%9Cu%C2%94%C3%9FR%5Cu001b7%5Cu0014%C3%86%C3%9Fe%7Bk%C2%A5%C2%92V%C2%AB%C2%95%C2%B8Kf%C2%B8%C3%A83tr!%C3%ADJ%C2%85i%C2%80%5Cfa%3A%C2%A5%5Cf3v%C2%89)Nj0C(S%C2%9C%C2%86%C3%90%C2%86%C2%86%C2%A6%C2%A9%5Cu0003%C2%83%5Cu0003%C3%86%C3%86%C3%B8eV%C3%BB%C3%A7%C2%AA%C2%AFP-%5B%C2%9Cm%5Cu0013%C3%8F%C3%8Ex-%C2%8F%C3%B5%C2%9D%C2%9F%C2%BE%C3%AF%5Cu001c%C2%AD83J%C2%84%C3%8E%C3%94%C2%8A%C3%B3%C2%8DZ%7C4%C2%BB0%C3%AFL9%C3%B8%5Cu000e%C2%BC%5Cu0003%C2%9D%C2%8A%C2%B3%C2%B4%C3%BCP%C3%99%C3%A5%C3%9C%C3%AC%7C8'%5Cu001e%3A%C2%AB%5Cu0015G.%C2%84%C3%8B%C3%8E%C3%94%C2%97%2B%C3%8E%C2%AC%C3%9D%C3%A2%5Cu0010%C3%A1%5Cu0013%5Cu001ePi%C3%BF%3A%C2%B34%C3%B7%C3%80%C3%BEb6%C3%BEH%C3%9AO%C2%92v%C3%8F%C3%94%C3%8F%C3%A2%C2%9F.%3F%C3%96%C2%A88%C3%81%C3%8C%C3%AC%C2%83pQ%C3%8D%7F%C2%90a.d%5Cu0012I%5E%C2%92%C2%B9%C2%AA%C2%9A%C2%AD%C3%AD%C2%B4Z%C3%8F%5Cu0005%5Cu0016%C2%95%C2%9A%5Cu000e%C2%BFR9%C3%A2%C2%A3%C2%A5%C3%85%C2%85%C2%AFs%C2%B9%C3%8F%C3%AEb%C3%A6O%C2%A3%5Cu001c%C3%A9c%3D%C2%A18%C3%B2%5Cu0010W%C3%80E%C2%88%5Cu0002%C2%A2%C2%A9%5Cu0000Lx%5Cu001aP(5%C3%A2%C3%84%5Cu000f%C3%83%40%C3%BC%5Cu0017%C3%A4~%C3%85%C3%B9%C3%AE%C2%8B%C3%B9P%7D%C3%ABL%C2%911Dzxl%C2%9A%C2%BB%C3%89%60'~%C3%B1%C3%98%C2%B4%C3%BB%C2%A6%C2%B3%C3%BF%C3%B7%C3%95%C2%8F%C3%91p%3D%7B%5EM%7F%C2%AF%C2%99%C2%AD%C2%A6y%C3%95%C3%8C%C3%AA%C3%8Dd%C3%98%C2%B1%5Cu0018%2Bc%C3%B4%C3%BA%C2%95%C3%A9%5C%5Cf%C2%87%C3%AF%C2%B3_~5%C2%BD5sZ5%C3%AD%C2%93l%C3%BF%C3%9A%5Cu0016%C2%BC%C2%81%C3%83%C3%8A%C3%A3%5Cu0014%5Cn%5Cu000e%20%C3%B4B%40%24%5Cu000f%5Cu0000%23%5Cu001e%C2%B4%5Cu001f%24%20%C3%9A%5Cu0017Xp2%5Cu0011%C3%8E%2B%5Cu0015%C2%8A%5Cu0006%C2%BF%25%2Fk%C3%99%5Cu000f%5B%C3%A6U%5Cu000e%C2%96U_%C3%86%5Cu001b%C2%ADx%C3%AF%3C%C3%9B%C3%AB%26%C3%BB%C2%8F%C3%A3%C3%B7o%C3%92%C3%AE%C3%A5mQ%25y%5Cb%25%5Cu000eA%5Cu0000%5Cu0011%5Cu0006yf%40%C3%B8%C3%82%5Cu0007%C2%9E%C2%8B5%C3%B40%C3%B4%5Cu0018T%5Cu0013%C2%8B%C2%BA%C2%AB%C2%A5%5Cu0005%C3%8D%5Ctn4!%25%5Cu001ck7%C3%B8%C2%90Z%C3%94%7Fmvj%C3%89%60%2Bi%C2%ADO%5Cfn%C2%9A0%C3%BB%7C%3A%C2%B8P%C3%8BP(%C2%A2%5Cu0001%C2%82%5Cb%5Cu0002%C2%A2B%5Cu00018%5Cu000f%7C%C2%80%C2%85%C2%80%C2%8C%5C%22%C3%A8%23%5Cr'b%C2%B21Gr%C3%957'%C3%9B%C3%B1%C3%A6Q%3A%C3%9A.%3A%C3%89%C2%9C~o%C3%A3%C2%B0%C2%B6%5Cu0014%C2%99%C2%9A%C3%8D%5Cu0003%C3%B3%C3%A2%C2%A9%C2%B982%C3%B5%C2%8BrvE%C2%B2qc%C3%87%C3%AEJ%C2%87%C3%AF%C2%A2%C3%81y%C3%9Ch%C2%A6k%C3%83%5C%5C%C3%A4%C3%B5%C3%93%C2%B4s%C2%9Dv%5Cu000e%C2%8B%C2%BD%C2%B7%C3%86R%C2%82%C2%A1r9%5Cu0002%C2%9A0m%C3%93d%5Cnp%C3%A5k%C3%80%3D%C2%A44%C3%B6)%C2%83XN%24%C3%A6%C2%A5%C3%92%C3%BF%C2%8A%C2%B76-dQ%5C%22%C3%AA%C3%A5%C2%A5%C2%93v%C3%97%5Cu001e%24%5Cu0019%C3%BC%3C%5Cu001e%C2%89h8J%C2%9E%5Cu001d%C2%8F%5Cu0001%C2%84%5Cu0017H%C3%86%5Cu0019%40%C2%9Er%5Cu0001%5Ct%C2%90%5Cu0006%C2%82q%5Ct%C2%A4B%5C%22t%25%C2%86%5Cu0016p%5C%22%C2%80_N%5Cu0016%C3%812%C3%8E%C2%A8%C2%95%C2%B6%C2%8E%3E%C2%8F%C2%BB%5Cu0003%C3%B3%C3%A487%C2%B0%C2%B7%5Cu0016%C3%B5%C3%BB%5Cu0013C%C2%A5%C3%BC%5Cu001e%C2%9A%C2%BE%5Ct%C2%B5%C3%A8q%5Cu0011%C3%B8!%C2%85%5Cu001e%40%C2%94ZWBN%C2%81%C3%B4%C2%B5%5Cu0006P%23%C2%85%7D%2C%24%C3%BC%C3%BF%5Cu0000%C3%9E6%5Cu0000%C2%B3%C3%8C%5Cu0001E%40b%C3%8Cm%5Cu0003%5Cu0010%3B%C2%B9.%C2%A3vV%7C%C3%AA%C3%9B%C3%9E%C2%90%C3%96%C3%96%C2%89%C2%A7A%C3%A3%5Cu0006%C2%88%C3%97%C3%8E%C3%B2%5Cu001c%C2%9F%C2%9Dg%C3%AD%C3%B5ht%5Cu0018%C3%97%C3%9E%25%7F5%C3%ACh%C3%9811%C3%8Dna%C2%AC%5Cu0019%C3%BD%C2%99U%5Cu000f%C3%8C%C3%B5%C2%9E%C3%998%C2%89z%C3%95%C2%A8%C3%B7%C2%A6%C3%A8%C2%8Dbr%C3%8B%5DQ%5Cu0018%C2%9E%C2%BC%7D%5Cu001b%C3%B5%5Cu001a%C3%B6N%C3%8B%C3%B6%3A%C2%A6y%C2%91%C2%9C%5Cu000e%C2%92%C2%B3A28%C2%B0%C2%9A%C3%B1%C3%AEI%C3%9C%C3%AC%5Cu0014%C2%B2%C3%B1%C3%B3F%C2%BC%C2%BB%C2%91%C2%8Ej%C2%A6~t%C2%9BQ%201c%5Cu0001%C3%B2%C2%81%5Cu000emPD%2B%5Cu0002%C2%B8u%C3%82%5EJ%5Cu0014S%C3%97%5Cu0017%C2%9E%C3%B4%C3%91%C3%84S%C3%81rF8_%C3%987%C3%80%5Cu001e%C2%AF8%C3%8B%C3%B9%5Cu0017Z2%5Cu0000%C2%AD%C3%9E_%C3%BD%5Cu0007%C3%B4%5Cu0014%5C%5C%C2%82%22%2C%22margin%22%3Atrue%2C%22id%22%3A%221BBMR%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-282.5%2C-248%2C1%5D%2C%22width%22%3A768%2C%22height%22%3A478%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg%22%2C%22searchcard><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\"><br /></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\"><span><br /></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\"><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-04-08T03:48:30.000Z",
    "deleted_at": null,
    "created_at": "2021-03-06T11:22:40.000Z",
    "updated_at": "2021-04-08T03:48:30.000Z",
    "published_at": "2021-04-08T03:48:30.000Z",
    "first_published_at": "2021-03-06T11:22:40.000Z",
    "word_count": 733,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg",
    "description": "可视化表单 编辑器 代码生成 表单设计版本作者更新日期备注1.0feline2021/3/8拖拽方式组合控件2.0feline2021/3/161.重新布局，设计区域扩大很多(核心不变)2.控件拖拽时，页面展示辅助线概述开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合...",
    "custom_description": null,
    "hits": 147,
    "_serializer": "v2.doc_detail"
  }
]