[
  {
    "id": 48056779,
    "slug": "xu49w1",
    "title": "知识汇总",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"plWsH\"></a>\n## JS的模块化方案\n在浏览器端，<br />有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。<br />有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。<br />在NodeJS端，有CommonJS方案，它是同步加载的\n<a name=\"lktNp\"></a>\n## JS小数点计算为什么会丢失精度\n<a name=\"S94fH\"></a>\n## JS如何精确浮点计算\n例如：如何实现0.1+0.2=0.3\n<a name=\"BIXCc\"></a>\n## JS如何进行大数计算\nInt类型超出最大安全数的计算\n",
    "body_draft": "<a name=\"plWsH\"></a>\n## JS的模块化方案\n在浏览器端，<br />有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。<br />有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。<br />在NodeJS端，有CommonJS方案，它是同步加载的\n<a name=\"lktNp\"></a>\n## JS小数点计算为什么会丢失精度\n<a name=\"S94fH\"></a>\n## JS如何精确浮点计算\n例如：如何实现0.1+0.2=0.3\n<a name=\"BIXCc\"></a>\n## JS如何进行大数计算\nInt类型超出最大安全数的计算\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h2 id=\"plWsH\"><span class=\"ne-text\">JS的模块化方案</span></h2><p id=\"u3131b042\" class=\"ne-p\"><span class=\"ne-text\">在浏览器端，</span></p><p id=\"u44f31523\" class=\"ne-p\"><span class=\"ne-text\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p id=\"u2c73e080\" class=\"ne-p\"><span class=\"ne-text\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p id=\"ua43b68f2\" class=\"ne-p\"><span class=\"ne-text\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 id=\"lktNp\"><span class=\"ne-text\">JS小数点计算为什么会丢失精度</span></h2><h2 id=\"S94fH\"><span class=\"ne-text\">JS如何精确浮点计算</span></h2><p id=\"u24ecc5dd\" class=\"ne-p\"><span class=\"ne-text\">例如：如何实现0.1+0.2=0.3</span></p><h2 id=\"BIXCc\"><span class=\"ne-text\">JS如何进行大数计算</span></h2><p id=\"ud36d247d\" class=\"ne-p\"><span class=\"ne-text\">Int类型超出最大安全数的计算</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"plWsH\" id=\"plWsH\"><span data-lake-id=\"u075c8a20\" id=\"u075c8a20\">JS的模块化方案</span></h2><p data-lake-id=\"u3131b042\" id=\"u3131b042\"><span data-lake-id=\"u3b4c030b\" id=\"u3b4c030b\">在浏览器端，</span></p><p data-lake-id=\"u44f31523\" id=\"u44f31523\"><span data-lake-id=\"u9c4f4ae9\" id=\"u9c4f4ae9\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p data-lake-id=\"u2c73e080\" id=\"u2c73e080\"><span data-lake-id=\"u1748cbf3\" id=\"u1748cbf3\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p data-lake-id=\"ua43b68f2\" id=\"ua43b68f2\"><span data-lake-id=\"u895caf32\" id=\"u895caf32\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 data-lake-id=\"lktNp\" id=\"lktNp\"><span data-lake-id=\"u7186d5e2\" id=\"u7186d5e2\">JS小数点计算为什么会丢失精度</span></h2><h2 data-lake-id=\"S94fH\" id=\"S94fH\"><span data-lake-id=\"u1b27a0db\" id=\"u1b27a0db\">JS如何精确浮点计算</span></h2><p data-lake-id=\"u24ecc5dd\" id=\"u24ecc5dd\"><span data-lake-id=\"u0335ec3a\" id=\"u0335ec3a\">例如：如何实现0.1+0.2=0.3</span></p><h2 data-lake-id=\"BIXCc\" id=\"BIXCc\"><span data-lake-id=\"udb7a658b\" id=\"udb7a658b\">JS如何进行大数计算</span></h2><p data-lake-id=\"ud36d247d\" id=\"ud36d247d\"><span data-lake-id=\"u88a04990\" id=\"u88a04990\">Int类型超出最大安全数的计算</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"plWsH\" id=\"plWsH\"><span data-lake-id=\"u075c8a20\" id=\"u075c8a20\">JS的模块化方案</span></h2><p data-lake-id=\"u3131b042\" id=\"u3131b042\"><span data-lake-id=\"u3b4c030b\" id=\"u3b4c030b\">在浏览器端，</span></p><p data-lake-id=\"u44f31523\" id=\"u44f31523\"><span data-lake-id=\"u9c4f4ae9\" id=\"u9c4f4ae9\">有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。</span></p><p data-lake-id=\"u2c73e080\" id=\"u2c73e080\"><span data-lake-id=\"u1748cbf3\" id=\"u1748cbf3\">有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。</span></p><p data-lake-id=\"ua43b68f2\" id=\"ua43b68f2\"><span data-lake-id=\"u895caf32\" id=\"u895caf32\">在NodeJS端，有CommonJS方案，它是同步加载的</span></p><h2 data-lake-id=\"lktNp\" id=\"lktNp\"><span data-lake-id=\"u7186d5e2\" id=\"u7186d5e2\">JS小数点计算为什么会丢失精度</span></h2><h2 data-lake-id=\"S94fH\" id=\"S94fH\"><span data-lake-id=\"u1b27a0db\" id=\"u1b27a0db\">JS如何精确浮点计算</span></h2><p data-lake-id=\"u24ecc5dd\" id=\"u24ecc5dd\"><span data-lake-id=\"u0335ec3a\" id=\"u0335ec3a\">例如：如何实现0.1+0.2=0.3</span></p><h2 data-lake-id=\"BIXCc\" id=\"BIXCc\"><span data-lake-id=\"udb7a658b\" id=\"udb7a658b\">JS如何进行大数计算</span></h2><p data-lake-id=\"ud36d247d\" id=\"ud36d247d\"><span data-lake-id=\"u88a04990\" id=\"u88a04990\">Int类型超出最大安全数的计算</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-07-11T14:21:25.000Z",
    "deleted_at": null,
    "created_at": "2021-06-29T16:21:19.000Z",
    "updated_at": "2021-07-11T14:21:25.000Z",
    "published_at": "2021-07-11T14:21:25.000Z",
    "first_published_at": "2021-06-29T16:21:38.000Z",
    "word_count": 143,
    "cover": null,
    "description": "JS的模块化方案在浏览器端，有AMD，通过require.js库实现，具有异步按需加载和兼容性好的特点。有ES Module，它是一种新特性，通过import、export实现导入和导出，它的兼容性不太好。在NodeJS端，有CommonJS方案，它是同步加载的JS小数点计算为什么会丢失精度J...",
    "custom_description": "",
    "hits": 1,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 47883854,
    "slug": "pa2vzf",
    "title": "Webpack核心原理",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "对于`Webpack`来说，它本质上就是一个模块打包器，正是由于有了`Loader`和`Plugin`，才让`Webpack`有了其他各种各样的功能。\n\n<a name=\"ctDnw\"></a>\n## Webpack打包后的文件\n<a name=\"SBL7J\"></a>\n### 创建项目\n```javascript\nmkdir demo && cd demo\nnpm init -y\n```\n<a name=\"MAlLJ\"></a>\n### 安装依赖\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin -D\n```\n<a name=\"unUtk\"></a>\n### 配置webpack.config.js\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n<a name=\"JuK75\"></a>\n### 运行打包\n```javascript\nyarn webpack\n```\n`Webpack4`打包结果：<br />在`Webpack4`中，`Webpack`打包后的文件只是一个`IIFE`，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和`NodeJS`中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。\n```javascript\n(function(modules) {\n\t// ...\n})\n({\n  \"./src/index.js\": function (module, exports, __webpack_require__) {\n    eval(\n      \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?\"\n    );\n  },\n\n  \"./src/test.js\": function (module, exports) {\n    eval(\n      \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?\"\n    );\n  },\n})\n```\n`Webpack5`打包结果：<br />而在`Webpack5`中，模块定义对象被放到函数内部了，函数参数是空的，代码相比`Webpack4`更少。\n```javascript\n(() => {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    \"./src/index.js\": (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) => {\n      eval(\n        \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?\"\n      );\n    },\n    \"./src/test.js\": (module) => {\n      eval(\n        \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?\"\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n})();\n```\n我们可以看到打包后是一个`IIFE`(自执行函数)，而这是为了产生一个闭包。\n<a name=\"HhrYq\"></a>\n## 单文件打包执行流程解析\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg)\n\n<a name=\"yQxYU\"></a>\n## Webpack打包主流程分析\n编写调试代码，新建`debug.js`：\n```javascript\nconst webpack = require(\"webpack\");\nconst options = require(\"./webpack.config.js\");\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) => {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});\n```\n打开`VS Code`调试模式，将断点定到第四行，接下来就开始分析它的主要流程：<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg)\n\n\n\n\n",
    "body_draft": "对于`Webpack`来说，它本质上就是一个模块打包器，正是由于有了`Loader`和`Plugin`，才让`Webpack`有了其他各种各样的功能。\n\n<a name=\"ctDnw\"></a>\n## Webpack打包后的文件\n<a name=\"SBL7J\"></a>\n### 创建项目\n```javascript\nmkdir demo && cd demo\nnpm init -y\n```\n<a name=\"MAlLJ\"></a>\n### 安装依赖\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin -D\n```\n<a name=\"unUtk\"></a>\n### 配置webpack.config.js\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n<a name=\"JuK75\"></a>\n### 运行打包\n```javascript\nyarn webpack\n```\n`Webpack4`打包结果：<br />在`Webpack4`中，`Webpack`打包后的文件只是一个`IIFE`，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和`NodeJS`中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。\n```javascript\n(function(modules) {\n\t// ...\n})\n({\n  \"./src/index.js\": function (module, exports, __webpack_require__) {\n    eval(\n      \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?\"\n    );\n  },\n\n  \"./src/test.js\": function (module, exports) {\n    eval(\n      \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?\"\n    );\n  },\n})\n```\n`Webpack5`打包结果：<br />而在`Webpack5`中，模块定义对象被放到函数内部了，函数参数是空的，代码相比`Webpack4`更少。\n```javascript\n(() => {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    \"./src/index.js\": (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) => {\n      eval(\n        \"const test = __webpack_require__(/*! ./test */ \\\"./src/test.js\\\")\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?\"\n      );\n    },\n    \"./src/test.js\": (module) => {\n      eval(\n        \"console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?\"\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n})();\n```\n我们可以看到打包后是一个`IIFE`(自执行函数)，而这是为了产生一个闭包。\n<a name=\"HhrYq\"></a>\n## 单文件打包执行流程解析\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg)\n\n<a name=\"yQxYU\"></a>\n## Webpack打包主流程分析\n编写调试代码，新建`debug.js`：\n```javascript\nconst webpack = require(\"webpack\");\nconst options = require(\"./webpack.config.js\");\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) => {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});\n```\n打开`VS Code`调试模式，将断点定到第四行，接下来就开始分析它的主要流程：<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg)\n\n\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u03343ffe\" class=\"ne-p\"><span class=\"ne-text\">对于</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">来说，它本质上就是一个模块打包器，正是由于有了</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Loader</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Plugin</span></code><span class=\"ne-text\">，才让</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">有了其他各种各样的功能。</span></p><p id=\"u3cdfa0c7\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"ctDnw\"><span class=\"ne-text\">Webpack打包后的文件</span></h2><h3 id=\"SBL7J\"><span class=\"ne-text\">创建项目</span></h3><pre data-language=\"javascript\" id=\"ix5EY\" class=\"ne-codeblock language-javascript\">mkdir demo &amp;&amp; cd demo\nnpm init -y</pre><h3 id=\"MAlLJ\"><span class=\"ne-text\">安装依赖</span></h3><pre data-language=\"javascript\" id=\"YxIAp\" class=\"ne-codeblock language-javascript\">yarn add webpack webpack-cli html-webpack-plugin -D</pre><h3 id=\"unUtk\"><span class=\"ne-text\">配置webpack.config.js</span></h3><pre data-language=\"javascript\" id=\"yudjB\" class=\"ne-codeblock language-javascript\">const HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    // devtool: 'none', // webpack5中不用配置\n    entry: './src/index.js',\n    output: {\n        filename: 'built.js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}</pre><h3 id=\"JuK75\"><span class=\"ne-text\">运行打包</span></h3><pre data-language=\"javascript\" id=\"Pja5X\" class=\"ne-codeblock language-javascript\">yarn webpack</pre><p id=\"ud65d4fe8\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Webpack4</span></code><span class=\"ne-text\">打包结果：</span></p><p id=\"ueaa8ab6a\" class=\"ne-p\"><span class=\"ne-text\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #F5222D\">Webpack4</span></code><span class=\"ne-text\">中，</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">Webpack</span></code><span class=\"ne-text\">打包后的文件只是一个</span><code class=\"ne-code\"><span class=\"ne-text\">IIFE</span></code><span class=\"ne-text\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #FA541C\">NodeJS</span></code><span class=\"ne-text\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><pre data-language=\"javascript\" id=\"ClEZG\" class=\"ne-codeblock language-javascript\">(function(modules) {\n\t// ...\n})\n({\n  &quot;./src/index.js&quot;: function (module, exports, __webpack_require__) {\n    eval(\n      &quot;const test = __webpack_require__(/*! ./test */ \\&quot;./src/test.js\\&quot;)\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack:///./src/index.js?&quot;\n    );\n  },\n\n  &quot;./src/test.js&quot;: function (module, exports) {\n    eval(\n      &quot;console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack:///./src/test.js?&quot;\n    );\n  },\n})</pre><p id=\"u652356d6\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Webpack5</span></code><span class=\"ne-text\">打包结果：</span></p><p id=\"uf87b4fff\" class=\"ne-p\"><span class=\"ne-text\">而在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: #F5222D\">Webpack5</span></code><span class=\"ne-text\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code class=\"ne-code\"><span class=\"ne-text\">Webpack4</span></code><span class=\"ne-text\">更少。</span></p><pre data-language=\"javascript\" id=\"zHDmq\" class=\"ne-codeblock language-javascript\">(() =&gt; {\n  // webpackBootstrap\n  var __webpack_modules__ = {\n    &quot;./src/index.js&quot;: (\n      module,\n      __unused_webpack_exports,\n      __webpack_require__\n    ) =&gt; {\n      eval(\n        &quot;const test = __webpack_require__(/*! ./test */ \\&quot;./src/test.js\\&quot;)\\nconsole.log('hello wlord!')\\nconsole.log(test)\\n\\nmodule.exports = 'Index Export'\\n\\n//# sourceURL=webpack://01/./src/index.js?&quot;\n      );\n    },\n    &quot;./src/test.js&quot;: (module) =&gt; {\n      eval(\n        &quot;console.log(11111)\\n\\n\\nmodule.exports = 'Test Exports'\\n\\n//# sourceURL=webpack://01/./src/test.js?&quot;\n      );\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  // startup\n  // Load entry module and return exports\n  // This entry module is referenced by other modules so it can't be inlined\n  var __webpack_exports__ = __webpack_require__(&quot;./src/index.js&quot;);\n})();</pre><p id=\"u600828a9\" class=\"ne-p\"><span class=\"ne-text\">我们可以看到打包后是一个</span><code class=\"ne-code\"><span class=\"ne-text\">IIFE</span></code><span class=\"ne-text\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 id=\"HhrYq\"><span class=\"ne-text\">单文件打包执行流程解析</span></h2><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg\" id=\"Zny3Z\" style=\"display: block; width: 100%\"><p id=\"ufb76936d\" class=\"ne-p\"><br></p><h2 id=\"yQxYU\"><span class=\"ne-text\">Webpack打包主流程分析</span></h2><p id=\"u781aa9cc\" class=\"ne-p\"><span class=\"ne-text\">编写调试代码，新建</span><code class=\"ne-code\"><span class=\"ne-text\">debug.js</span></code><span class=\"ne-text\">：</span></p><pre data-language=\"javascript\" id=\"Dfptt\" class=\"ne-codeblock language-javascript\">const webpack = require(&quot;webpack&quot;);\nconst options = require(&quot;./webpack.config.js&quot;);\n\nconst compiler = webpack(options);\n\ncompiler.run((err, stats) =&gt; {\n  console.log(err);\n  console.log(\n    stats.toJson({\n      entries: true,\n      chunks: false,\n      modules: false,\n      assets: false,\n    })\n  );\n});</pre><p id=\"ub9bc307a\" class=\"ne-p\"><span class=\"ne-text\">打开</span><code class=\"ne-code\"><span class=\"ne-text\">VS Code</span></code><span class=\"ne-text\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg\" id=\"vD0QU\" style=\"display: block; width: 100%\"><p id=\"u958b2523\" class=\"ne-p\"><br></p><p id=\"u20012e7c\" class=\"ne-p\"><br></p><p id=\"u272a6b93\" class=\"ne-p\"><br></p><p id=\"ud9a35259\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u03343ffe\" id=\"u03343ffe\"><span data-lake-id=\"u9758a0d4\" id=\"u9758a0d4\">对于</span><code data-lake-id=\"ud0efdc31\" id=\"ud0efdc31\"><span data-lake-id=\"ue84fc62f\" id=\"ue84fc62f\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u397581b1\" id=\"u397581b1\">来说，它本质上就是一个模块打包器，正是由于有了</span><code data-lake-id=\"ue9148be6\" id=\"ue9148be6\"><span data-lake-id=\"uf0857585\" id=\"uf0857585\" style=\"color: #FA541C\">Loader</span></code><span data-lake-id=\"u08e4d692\" id=\"u08e4d692\">和</span><code data-lake-id=\"u912c4b81\" id=\"u912c4b81\"><span data-lake-id=\"u99bd6710\" id=\"u99bd6710\" style=\"color: #FA541C\">Plugin</span></code><span data-lake-id=\"uf7f6b16f\" id=\"uf7f6b16f\">，才让</span><code data-lake-id=\"u5772b541\" id=\"u5772b541\"><span data-lake-id=\"ucbd324ab\" id=\"ucbd324ab\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"uae96b4c8\" id=\"uae96b4c8\">有了其他各种各样的功能。</span></p><p data-lake-id=\"u3cdfa0c7\" id=\"u3cdfa0c7\"><span data-lake-id=\"u4460391d\" id=\"u4460391d\">​</span><br></p><h2 data-lake-id=\"ctDnw\" id=\"ctDnw\"><span data-lake-id=\"u73be3ab4\" id=\"u73be3ab4\">Webpack打包后的文件</span></h2><h3 data-lake-id=\"SBL7J\" id=\"SBL7J\"><span data-lake-id=\"u02070376\" id=\"u02070376\">创建项目</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mkdir%20demo%20%26%26%20cd%20demo%5Cnnpm%20init%20-y%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ix5EY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MAlLJ\" id=\"MAlLJ\"><span data-lake-id=\"u5c44d19b\" id=\"u5c44d19b\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20add%20webpack%20webpack-cli%20html-webpack-plugin%20-D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YxIAp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"unUtk\" id=\"unUtk\"><span data-lake-id=\"u34d3f9fc\" id=\"u34d3f9fc\">配置webpack.config.js</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnconst%20path%20%3D%20require('path')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%20%20mode%3A%20'development'%2C%5Cn%20%20%20%20%2F%2F%20devtool%3A%20'none'%2C%20%2F%2F%20webpack5%E4%B8%AD%E4%B8%8D%E7%94%A8%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20entry%3A%20'.%2Fsrc%2Findex.js'%2C%5Cn%20%20%20%20output%3A%20%7B%5Cn%20%20%20%20%20%20%20%20filename%3A%20'built.js'%2C%5Cn%20%20%20%20%20%20%20%20path%3A%20path.resolve('dist')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20plugins%3A%20%5B%5Cn%20%20%20%20%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20template%3A%20'.%2Fsrc%2Findex.html'%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yudjB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"JuK75\" id=\"JuK75\"><span data-lake-id=\"u028a92b6\" id=\"u028a92b6\">运行打包</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20webpack%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Pja5X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud65d4fe8\" id=\"ud65d4fe8\"><code data-lake-id=\"u68c97e1b\" id=\"u68c97e1b\"><span data-lake-id=\"u77ed6abc\" id=\"u77ed6abc\">Webpack4</span></code><span data-lake-id=\"u9a6a3023\" id=\"u9a6a3023\">打包结果：</span></p><p data-lake-id=\"ueaa8ab6a\" id=\"ueaa8ab6a\"><span data-lake-id=\"u8b9ba537\" id=\"u8b9ba537\">在</span><code data-lake-id=\"u8d012619\" id=\"u8d012619\"><span data-lake-id=\"u3fe7b82c\" id=\"u3fe7b82c\" style=\"color: #F5222D\">Webpack4</span></code><span data-lake-id=\"u003f5ac3\" id=\"u003f5ac3\">中，</span><code data-lake-id=\"ud20229ac\" id=\"ud20229ac\"><span data-lake-id=\"u3bad05b0\" id=\"u3bad05b0\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u5125f346\" id=\"u5125f346\">打包后的文件只是一个</span><code data-lake-id=\"ue209df26\" id=\"ue209df26\"><span data-lake-id=\"u7e3b52aa\" id=\"u7e3b52aa\">IIFE</span></code><span data-lake-id=\"ub6384e1b\" id=\"ub6384e1b\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code data-lake-id=\"u564f214f\" id=\"u564f214f\"><span data-lake-id=\"ud6f2794c\" id=\"ud6f2794c\" style=\"color: #FA541C\">NodeJS</span></code><span data-lake-id=\"ue9ea35a9\" id=\"ue9ea35a9\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function(modules)%20%7B%5Cn%5Ct%2F%2F%20...%5Cn%7D)%5Cn(%7B%5Cn%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%5Cn%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20function%20(module%2C%20exports)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%7D)%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ClEZG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652356d6\" id=\"u652356d6\"><code data-lake-id=\"ub744351c\" id=\"ub744351c\"><span data-lake-id=\"u3b7b0c35\" id=\"u3b7b0c35\">Webpack5</span></code><span data-lake-id=\"u5ed77be5\" id=\"u5ed77be5\">打包结果：</span></p><p data-lake-id=\"uf87b4fff\" id=\"uf87b4fff\"><span data-lake-id=\"u46752b64\" id=\"u46752b64\">而在</span><code data-lake-id=\"u08bfe0d1\" id=\"u08bfe0d1\"><span data-lake-id=\"ubd6b9c8c\" id=\"ubd6b9c8c\" style=\"color: #F5222D\">Webpack5</span></code><span data-lake-id=\"u34df97e0\" id=\"u34df97e0\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code data-lake-id=\"u7fce6296\" id=\"u7fce6296\"><span data-lake-id=\"u39a3ae0d\" id=\"u39a3ae0d\">Webpack4</span></code><span data-lake-id=\"uccf68c31\" id=\"uccf68c31\">更少。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20webpackBootstrap%5Cn%20%20var%20__webpack_modules__%20%3D%20%7B%5Cn%20%20%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20(%5Cn%20%20%20%20%20%20module%2C%5Cn%20%20%20%20%20%20__unused_webpack_exports%2C%5Cn%20%20%20%20%20%20__webpack_require__%5Cn%20%20%20%20)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20(module)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20__webpack_module_cache__%20%3D%20%7B%7D%3B%5Cn%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%5Cn%20%20%20%20%2F%2F%20Check%20if%20module%20is%20in%20cache%5Cn%20%20%20%20var%20cachedModule%20%3D%20__webpack_module_cache__%5BmoduleId%5D%3B%5Cn%20%20%20%20if%20(cachedModule%20!%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20%20%20return%20cachedModule.exports%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Create%20a%20new%20module%20(and%20put%20it%20into%20the%20cache)%5Cn%20%20%20%20var%20module%20%3D%20(__webpack_module_cache__%5BmoduleId%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.id%20needed%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.loaded%20needed%5Cn%20%20%20%20%20%20exports%3A%20%7B%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Execute%20the%20module%20function%5Cn%20%20%20%20__webpack_modules__%5BmoduleId%5D(module%2C%20module.exports%2C%20__webpack_require__)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Return%20the%20exports%20of%20the%20module%5Cn%20%20%20%20return%20module.exports%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20startup%5Cn%20%20%2F%2F%20Load%20entry%20module%20and%20return%20exports%5Cn%20%20%2F%2F%20This%20entry%20module%20is%20referenced%20by%20other%20modules%20so%20it%20can't%20be%20inlined%5Cn%20%20var%20__webpack_exports__%20%3D%20__webpack_require__(%5C%22.%2Fsrc%2Findex.js%5C%22)%3B%5Cn%7D)()%3B%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zHDmq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u600828a9\" id=\"u600828a9\"><span data-lake-id=\"u03bcb17b\" id=\"u03bcb17b\">我们可以看到打包后是一个</span><code data-lake-id=\"uf9eba627\" id=\"uf9eba627\"><span data-lake-id=\"u84773a1d\" id=\"u84773a1d\">IIFE</span></code><span data-lake-id=\"u8c55377a\" id=\"u8c55377a\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 data-lake-id=\"HhrYq\" id=\"HhrYq\"><span data-lake-id=\"u1a7c8d95\" id=\"u1a7c8d95\">单文件打包执行流程解析</span></h2><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A-59%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%7D%2C%22id%22%3A%226669b8dc-fa82-4872-8823-4893ab0254a6%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A57%2C%22y%22%3A58.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22width%22%3A184.5332341865888%2C%22height%22%3A66.73837868480723%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%7D%2C%22id%22%3A%22e3c7a5ee-2fa9-4e35-aadb-b2d27f8a05fb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A174.73837868480723%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%7D%2C%22id%22%3A%225580b9eb-9fe0-45f1-a19a-ccd496182b50%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A90.12698418658881%2C%22y%22%3A283.52522016015774%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22width%22%3A119.1396329067056%2C%22height%22%3A56.5363088151928%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22S%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%7D%2C%22id%22%3A%226b33501f-df2f-4bf7-ba1a-30a1b2676eb2%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A293.77020056635905%2C%22y%22%3A278.54390581775414%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ewebpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22width%22%3A200.51965603759936%2C%22height%22%3A66.49893750000001%2C%22zIndex%22%3A8%2C%22rotate%22%3A0.07125669764285547%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%7D%2C%22id%22%3A%2205ff8484-a15a-48ce-ab39-714b047d4da4%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A292.8142665277654%2C%22y%22%3A133.56857243480704%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22width%22%3A201.51810658682035%2C%22height%22%3A101.16980625000019%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%7D%2C%22id%22%3A%22f950e8e6-dfb4-440d-aeb2-d769b03a34b7%22%2C%22zIndex%22%3A11%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A261.1370412360169%2C%22y%22%3A-69.43662343749997%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%3C%2Fdiv%3E%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Emodules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%3C%2Fdiv%3E%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22width%22%3A264.87255717031735%2C%22height%22%3A142.87324687499995%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%7D%2C%22id%22%3A%22b0382646-4e8d-45db-bf7d-cee542902add%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A557.59375%2C%22y%22%3A-52.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%3C%2Fdiv%3E%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22width%22%3A216.20788875780175%2C%22height%22%3A108.80597485591898%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%7D%2C%22id%22%3A%2239255463-3751-45a5-a12f-8f642c1e1d06%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A123.15347555980713%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3C%2Fdiv%3E%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A16%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%7D%2C%22id%22%3A%22710e27a8-94d8-4017-aa54-731318925607%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A299.48530337207467%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%BB%93%E6%9D%9F%3C%2Fdiv%3E%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A18%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B40.40081787109375%2C-90.6339340209961%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A528%7D%2C%22search%22%3A%22%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82webpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8modules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%BB%93%E6%9D%9F%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg%22%2C%22__height%22%3A510%2C%22graphicsBBox%22%3A%7B%22x%22%3A57%2C%22y%22%3A-69.4366226196289%2C%22width%22%3A716.8016357421875%2C%22height%22%3A431.6053771972656%7D%2C%22id%22%3A%22Zny3Z%22%2C%22height%22%3A510%7D\"></card><p data-lake-id=\"ufb76936d\" id=\"ufb76936d\"><br></p><h2 data-lake-id=\"yQxYU\" id=\"yQxYU\"><span data-lake-id=\"ucf54ba8b\" id=\"ucf54ba8b\">Webpack打包主流程分析</span></h2><p data-lake-id=\"u781aa9cc\" id=\"u781aa9cc\"><span data-lake-id=\"u5236427d\" id=\"u5236427d\">编写调试代码，新建</span><code data-lake-id=\"u2fa4cc92\" id=\"u2fa4cc92\"><span data-lake-id=\"u71e802dc\" id=\"u71e802dc\">debug.js</span></code><span data-lake-id=\"u88a0df04\" id=\"u88a0df04\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20webpack%20%3D%20require(%5C%22webpack%5C%22)%3B%5Cnconst%20options%20%3D%20require(%5C%22.%2Fwebpack.config.js%5C%22)%3B%5Cn%5Cnconst%20compiler%20%3D%20webpack(options)%3B%5Cn%5Cncompiler.run((err%2C%20stats)%20%3D%3E%20%7B%5Cn%20%20console.log(err)%3B%5Cn%20%20console.log(%5Cn%20%20%20%20stats.toJson(%7B%5Cn%20%20%20%20%20%20entries%3A%20true%2C%5Cn%20%20%20%20%20%20chunks%3A%20false%2C%5Cn%20%20%20%20%20%20modules%3A%20false%2C%5Cn%20%20%20%20%20%20assets%3A%20false%2C%5Cn%20%20%20%20%7D)%5Cn%20%20)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Dfptt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub9bc307a\" id=\"ub9bc307a\"><span data-lake-id=\"u3b501924\" id=\"u3b501924\">打开</span><code data-lake-id=\"ub707ff06\" id=\"ub707ff06\"><span data-lake-id=\"ud75c4717\" id=\"ud75c4717\">VS Code</span></code><span data-lake-id=\"ubf78c5cb\" id=\"ubf78c5cb\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A0%2C%22y%22%3A-39%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%7D%2C%22id%22%3A%22e2c2d963-9193-44fa-a9eb-00ebf6fcb204%22%2C%22zIndex%22%3A1%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-22.140625%2C%22y%22%3A103%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22width%22%3A163.125%2C%22height%22%3A77.09375%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%7D%2C%22id%22%3A%22cecb7f2b-9e6f-446d-809f-216a1c5530cb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-42.78955078125%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%3C%2Fdiv%3E%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22width%22%3A204.4228515625%2C%22height%22%3A58.3125%2C%22zIndex%22%3A4%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%7D%2C%22id%22%3A%2292fc249a-bf54-4042-8d54-74d88eda10ee%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-65.4869384765625%2C%22y%22%3A299.35302734375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22width%22%3A249.817626953125%2C%22height%22%3A65.7939453125%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%7D%2C%22id%22%3A%22a087e3bb-ae98-45c6-87db-14cfab8230a8%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-2.890625%2C%22y%22%3A395.859375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22width%22%3A124.625%2C%22height%22%3A56.78125%2C%22zIndex%22%3A8%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%7D%2C%22id%22%3A%2247f65d3f-d86a-4541-9500-d77982f1be95%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-64.40455627441406%2C%22y%22%3A504.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%2C%22width%22%3A248.80911254882812%2C%22height%22%3A121.370361328125%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22W%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%7D%2C%22id%22%3A%2249514239-3a50-4016-90ab-7d68f04120e8%22%2C%22zIndex%22%3A11%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Astart%3B%5C%22%3E%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A363.9462890625%2C%22y%22%3A-32.5%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeRun%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22width%22%3A170.4296875%2C%22height%22%3A53.5%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%7D%2C%22id%22%3A%22b98f8946-9eaa-495c-99c8-1626e0232b03%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A347.0537109375%2C%22y%22%3A90.046875%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22width%22%3A204.21484375%2C%22height%22%3A50.5%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%7D%2C%22id%22%3A%225a659f35-b290-428b-8311-9987645680ef%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A331.0537109375%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeCompile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22width%22%3A236.21484375%2C%22height%22%3A49.25%2C%22zIndex%22%3A16%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%7D%2C%22id%22%3A%22775e1574-70a0-4a22-a2f3-4b45bcbfcb17%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A358.25%2C%22y%22%3A333.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.compile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22width%22%3A181.822265625%2C%22height%22%3A45.625%2C%22zIndex%22%3A18%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%7D%2C%22id%22%3A%22489d791f-6151-410c-b24f-aa6dd4eb3792%22%2C%22zIndex%22%3A19%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A360.107421875%2C%22y%22%3A454.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.make(%E6%A0%B8%E5%BF%83)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%2C%22width%22%3A178.107421875%2C%22height%22%3A48%2C%22zIndex%22%3A20%2C%22rotate%22%3A0%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-103.10919189453125%2C-66.989013671875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A753%7D%2C%22search%22%3A%22%E5%BC%80%E5%A7%8B%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeRuncompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeCompilecompiler.compilecompiler.make(%E6%A0%B8%E5%BF%83)%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg%22%2C%22__height%22%3A735%2C%22graphicsBBox%22%3A%7B%22x%22%3A-65.4869384765625%2C%22y%22%3A-39%2C%22width%22%3A632.7554931640625%2C%22height%22%3A665.010986328125%7D%2C%22id%22%3A%22vD0QU%22%2C%22height%22%3A735%7D\"></card><p data-lake-id=\"u958b2523\" id=\"u958b2523\"><br></p><p data-lake-id=\"u20012e7c\" id=\"u20012e7c\"><br></p><p data-lake-id=\"u272a6b93\" id=\"u272a6b93\"><br></p><p data-lake-id=\"ud9a35259\" id=\"ud9a35259\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u03343ffe\" id=\"u03343ffe\"><span data-lake-id=\"u9758a0d4\" id=\"u9758a0d4\">对于</span><code data-lake-id=\"ud0efdc31\" id=\"ud0efdc31\"><span data-lake-id=\"ue84fc62f\" id=\"ue84fc62f\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u397581b1\" id=\"u397581b1\">来说，它本质上就是一个模块打包器，正是由于有了</span><code data-lake-id=\"ue9148be6\" id=\"ue9148be6\"><span data-lake-id=\"uf0857585\" id=\"uf0857585\" style=\"color: #FA541C\">Loader</span></code><span data-lake-id=\"u08e4d692\" id=\"u08e4d692\">和</span><code data-lake-id=\"u912c4b81\" id=\"u912c4b81\"><span data-lake-id=\"u99bd6710\" id=\"u99bd6710\" style=\"color: #FA541C\">Plugin</span></code><span data-lake-id=\"uf7f6b16f\" id=\"uf7f6b16f\">，才让</span><code data-lake-id=\"u5772b541\" id=\"u5772b541\"><span data-lake-id=\"ucbd324ab\" id=\"ucbd324ab\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"uae96b4c8\" id=\"uae96b4c8\">有了其他各种各样的功能。</span></p><p data-lake-id=\"u3cdfa0c7\" id=\"u3cdfa0c7\"><span data-lake-id=\"u4460391d\" id=\"u4460391d\">​</span><br></p><h2 data-lake-id=\"ctDnw\" id=\"ctDnw\"><span data-lake-id=\"u73be3ab4\" id=\"u73be3ab4\">Webpack打包后的文件</span></h2><h3 data-lake-id=\"SBL7J\" id=\"SBL7J\"><span data-lake-id=\"u02070376\" id=\"u02070376\">创建项目</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mkdir%20demo%20%26%26%20cd%20demo%5Cnnpm%20init%20-y%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ix5EY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MAlLJ\" id=\"MAlLJ\"><span data-lake-id=\"u5c44d19b\" id=\"u5c44d19b\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20add%20webpack%20webpack-cli%20html-webpack-plugin%20-D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YxIAp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"unUtk\" id=\"unUtk\"><span data-lake-id=\"u34d3f9fc\" id=\"u34d3f9fc\">配置webpack.config.js</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnconst%20path%20%3D%20require('path')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%20%20mode%3A%20'development'%2C%5Cn%20%20%20%20%2F%2F%20devtool%3A%20'none'%2C%20%2F%2F%20webpack5%E4%B8%AD%E4%B8%8D%E7%94%A8%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20entry%3A%20'.%2Fsrc%2Findex.js'%2C%5Cn%20%20%20%20output%3A%20%7B%5Cn%20%20%20%20%20%20%20%20filename%3A%20'built.js'%2C%5Cn%20%20%20%20%20%20%20%20path%3A%20path.resolve('dist')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20plugins%3A%20%5B%5Cn%20%20%20%20%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20template%3A%20'.%2Fsrc%2Findex.html'%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yudjB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"JuK75\" id=\"JuK75\"><span data-lake-id=\"u028a92b6\" id=\"u028a92b6\">运行打包</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yarn%20webpack%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Pja5X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud65d4fe8\" id=\"ud65d4fe8\"><code data-lake-id=\"u68c97e1b\" id=\"u68c97e1b\"><span data-lake-id=\"u77ed6abc\" id=\"u77ed6abc\">Webpack4</span></code><span data-lake-id=\"u9a6a3023\" id=\"u9a6a3023\">打包结果：</span></p><p data-lake-id=\"ueaa8ab6a\" id=\"ueaa8ab6a\"><span data-lake-id=\"u8b9ba537\" id=\"u8b9ba537\">在</span><code data-lake-id=\"u8d012619\" id=\"u8d012619\"><span data-lake-id=\"u3fe7b82c\" id=\"u3fe7b82c\" style=\"color: #F5222D\">Webpack4</span></code><span data-lake-id=\"u003f5ac3\" id=\"u003f5ac3\">中，</span><code data-lake-id=\"ud20229ac\" id=\"ud20229ac\"><span data-lake-id=\"u3bad05b0\" id=\"u3bad05b0\" style=\"color: #FA541C\">Webpack</span></code><span data-lake-id=\"u5125f346\" id=\"u5125f346\">打包后的文件只是一个</span><code data-lake-id=\"ue209df26\" id=\"ue209df26\"><span data-lake-id=\"u7e3b52aa\" id=\"u7e3b52aa\">IIFE</span></code><span data-lake-id=\"ub6384e1b\" id=\"ub6384e1b\">，这个函数的参数是一个“模块定义”的对象。键名是当前被加载文件的文件路径和文件名拼接而来的，键值是一个函数(和</span><code data-lake-id=\"u564f214f\" id=\"u564f214f\"><span data-lake-id=\"ud6f2794c\" id=\"ud6f2794c\" style=\"color: #FA541C\">NodeJS</span></code><span data-lake-id=\"ue9ea35a9\" id=\"ue9ea35a9\">中的模块加载有些类似)，这个函数会在将来的某个时机被调用，同时会接收到一定的参数，利用这些参数就可以实现模块的加载操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function(modules)%20%7B%5Cn%5Ct%2F%2F%20...%5Cn%7D)%5Cn(%7B%5Cn%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%5Cn%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20function%20(module%2C%20exports)%20%7B%5Cn%20%20%20%20eval(%5Cn%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%2C%5Cn%7D)%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ClEZG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652356d6\" id=\"u652356d6\"><code data-lake-id=\"ub744351c\" id=\"ub744351c\"><span data-lake-id=\"u3b7b0c35\" id=\"u3b7b0c35\">Webpack5</span></code><span data-lake-id=\"u5ed77be5\" id=\"u5ed77be5\">打包结果：</span></p><p data-lake-id=\"uf87b4fff\" id=\"uf87b4fff\"><span data-lake-id=\"u46752b64\" id=\"u46752b64\">而在</span><code data-lake-id=\"u08bfe0d1\" id=\"u08bfe0d1\"><span data-lake-id=\"ubd6b9c8c\" id=\"ubd6b9c8c\" style=\"color: #F5222D\">Webpack5</span></code><span data-lake-id=\"u34df97e0\" id=\"u34df97e0\">中，模块定义对象被放到函数内部了，函数参数是空的，代码相比</span><code data-lake-id=\"u7fce6296\" id=\"u7fce6296\"><span data-lake-id=\"u39a3ae0d\" id=\"u39a3ae0d\">Webpack4</span></code><span data-lake-id=\"uccf68c31\" id=\"uccf68c31\">更少。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20webpackBootstrap%5Cn%20%20var%20__webpack_modules__%20%3D%20%7B%5Cn%20%20%20%20%5C%22.%2Fsrc%2Findex.js%5C%22%3A%20(%5Cn%20%20%20%20%20%20module%2C%5Cn%20%20%20%20%20%20__unused_webpack_exports%2C%5Cn%20%20%20%20%20%20__webpack_require__%5Cn%20%20%20%20)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22const%20test%20%3D%20__webpack_require__(%2F*!%20.%2Ftest%20*%2F%20%5C%5C%5C%22.%2Fsrc%2Ftest.js%5C%5C%5C%22)%5C%5Cnconsole.log('hello%20wlord!')%5C%5Cnconsole.log(test)%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Index%20Export'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Findex.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22.%2Fsrc%2Ftest.js%5C%22%3A%20(module)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20eval(%5Cn%20%20%20%20%20%20%20%20%5C%22console.log(11111)%5C%5Cn%5C%5Cn%5C%5Cnmodule.exports%20%3D%20'Test%20Exports'%5C%5Cn%5C%5Cn%2F%2F%23%20sourceURL%3Dwebpack%3A%2F%2F01%2F.%2Fsrc%2Ftest.js%3F%5C%22%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20__webpack_module_cache__%20%3D%20%7B%7D%3B%5Cn%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%5Cn%20%20%20%20%2F%2F%20Check%20if%20module%20is%20in%20cache%5Cn%20%20%20%20var%20cachedModule%20%3D%20__webpack_module_cache__%5BmoduleId%5D%3B%5Cn%20%20%20%20if%20(cachedModule%20!%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20%20%20return%20cachedModule.exports%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Create%20a%20new%20module%20(and%20put%20it%20into%20the%20cache)%5Cn%20%20%20%20var%20module%20%3D%20(__webpack_module_cache__%5BmoduleId%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.id%20needed%5Cn%20%20%20%20%20%20%2F%2F%20no%20module.loaded%20needed%5Cn%20%20%20%20%20%20exports%3A%20%7B%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Execute%20the%20module%20function%5Cn%20%20%20%20__webpack_modules__%5BmoduleId%5D(module%2C%20module.exports%2C%20__webpack_require__)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Return%20the%20exports%20of%20the%20module%5Cn%20%20%20%20return%20module.exports%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20startup%5Cn%20%20%2F%2F%20Load%20entry%20module%20and%20return%20exports%5Cn%20%20%2F%2F%20This%20entry%20module%20is%20referenced%20by%20other%20modules%20so%20it%20can't%20be%20inlined%5Cn%20%20var%20__webpack_exports__%20%3D%20__webpack_require__(%5C%22.%2Fsrc%2Findex.js%5C%22)%3B%5Cn%7D)()%3B%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zHDmq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u600828a9\" id=\"u600828a9\"><span data-lake-id=\"u03bcb17b\" id=\"u03bcb17b\">我们可以看到打包后是一个</span><code data-lake-id=\"uf9eba627\" id=\"uf9eba627\"><span data-lake-id=\"u84773a1d\" id=\"u84773a1d\">IIFE</span></code><span data-lake-id=\"u8c55377a\" id=\"u8c55377a\">(自执行函数)，而这是为了产生一个闭包。</span></p><h2 data-lake-id=\"HhrYq\" id=\"HhrYq\"><span data-lake-id=\"u1a7c8d95\" id=\"u1a7c8d95\">单文件打包执行流程解析</span></h2><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A-59%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%7D%2C%22id%22%3A%226669b8dc-fa82-4872-8823-4893ab0254a6%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A57%2C%22y%22%3A58.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22width%22%3A184.5332341865888%2C%22height%22%3A66.73837868480723%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%227793538c-ce63-4ac3-9ef6-41e28d203ca3%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%7D%2C%22id%22%3A%22e3c7a5ee-2fa9-4e35-aadb-b2d27f8a05fb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A89.2666170932944%2C%22y%22%3A174.73837868480723%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%220c266bbc-6b92-4acf-8ddc-9511f6310d3a%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%7D%2C%22id%22%3A%225580b9eb-9fe0-45f1-a19a-ccd496182b50%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A90.12698418658881%2C%22y%22%3A283.52522016015774%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22width%22%3A119.1396329067056%2C%22height%22%3A56.5363088151928%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%223b3fc723-6bb7-4920-8e3d-9cbd9befbc81%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22S%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%7D%2C%22id%22%3A%226b33501f-df2f-4bf7-ba1a-30a1b2676eb2%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A293.77020056635905%2C%22y%22%3A278.54390581775414%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ewebpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22width%22%3A200.51965603759936%2C%22height%22%3A66.49893750000001%2C%22zIndex%22%3A8%2C%22rotate%22%3A0.07125669764285547%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%221827b9e4-f1b0-4e0a-b2bf-8202f1b034fd%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%7D%2C%22id%22%3A%2205ff8484-a15a-48ce-ab39-714b047d4da4%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A292.8142665277654%2C%22y%22%3A133.56857243480704%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22width%22%3A201.51810658682035%2C%22height%22%3A101.16980625000019%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2286a1ed3d-5f8b-44a2-b487-0dfa307d8998%22%2C%22connection%22%3A%22N%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%7D%2C%22id%22%3A%22f950e8e6-dfb4-440d-aeb2-d769b03a34b7%22%2C%22zIndex%22%3A11%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A261.1370412360169%2C%22y%22%3A-69.43662343749997%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%3C%2Fdiv%3E%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Emodules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%3C%2Fdiv%3E%22%2C%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22width%22%3A264.87255717031735%2C%22height%22%3A142.87324687499995%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22ea086b76-d1e2-4e9f-8733-b8b868b79165%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%7D%2C%22id%22%3A%22b0382646-4e8d-45db-bf7d-cee542902add%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A557.59375%2C%22y%22%3A-52.40298742795949%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%3C%2Fdiv%3E%22%2C%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22width%22%3A216.20788875780175%2C%22height%22%3A108.80597485591898%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%225fe85215-4ca5-406a-b8d8-c49da3d125ea%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%7D%2C%22id%22%3A%2239255463-3751-45a5-a12f-8f642c1e1d06%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A123.15347555980713%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%3C%2Fdiv%3E%22%2C%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A16%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22b044242a-c236-481d-a923-2b5c9a7cab1e%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%7D%2C%22id%22%3A%22710e27a8-94d8-4017-aa54-731318925607%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22x%22%3A605.6976943789009%2C%22y%22%3A299.48530337207467%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E7%BB%93%E6%9D%9F%3C%2Fdiv%3E%22%2C%22id%22%3A%221f4eaeed-5836-473d-9d94-95955150192f%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A18%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B40.40081787109375%2C-90.6339340209961%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A528%7D%2C%22search%22%3A%22%E6%89%93%E5%8C%85%E5%BC%80%E5%A7%8B%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BC%A0%E9%80%92%E7%BB%99modules%E5%BD%A2%E5%8F%82webpack%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%BA%86__webpack_require__%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8__webpack_require__%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%BC%A0%E5%85%A5moduleId%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E4%BC%9A%E6%89%BE%E5%88%B0moduleId%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%BD%E6%95%B0%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8modules%5BmoduleId%5D.call(module.exports%2C%20module%2C%20module.exports%2C%20__webpack_require__)%E5%87%BD%E6%95%B0%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E5%8F%96%E5%87%BAexports%E5%B1%9E%E6%80%A7(%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89module.exports%20%3D%3D%3D%20XXX)%E5%B0%86%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%BB%99%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%BB%93%E6%9D%9F%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg%22%2C%22__height%22%3A510%2C%22graphicsBBox%22%3A%7B%22x%22%3A57%2C%22y%22%3A-69.4366226196289%2C%22width%22%3A716.8016357421875%2C%22height%22%3A431.6053771972656%7D%2C%22id%22%3A%22Zny3Z%22%2C%22height%22%3A510%7D\"></card><p data-lake-id=\"ufb76936d\" id=\"ufb76936d\"><br></p><h2 data-lake-id=\"yQxYU\" id=\"yQxYU\"><span data-lake-id=\"ucf54ba8b\" id=\"ucf54ba8b\">Webpack打包主流程分析</span></h2><p data-lake-id=\"u781aa9cc\" id=\"u781aa9cc\"><span data-lake-id=\"u5236427d\" id=\"u5236427d\">编写调试代码，新建</span><code data-lake-id=\"u2fa4cc92\" id=\"u2fa4cc92\"><span data-lake-id=\"u71e802dc\" id=\"u71e802dc\">debug.js</span></code><span data-lake-id=\"u88a0df04\" id=\"u88a0df04\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20webpack%20%3D%20require(%5C%22webpack%5C%22)%3B%5Cnconst%20options%20%3D%20require(%5C%22.%2Fwebpack.config.js%5C%22)%3B%5Cn%5Cnconst%20compiler%20%3D%20webpack(options)%3B%5Cn%5Cncompiler.run((err%2C%20stats)%20%3D%3E%20%7B%5Cn%20%20console.log(err)%3B%5Cn%20%20console.log(%5Cn%20%20%20%20stats.toJson(%7B%5Cn%20%20%20%20%20%20entries%3A%20true%2C%5Cn%20%20%20%20%20%20chunks%3A%20false%2C%5Cn%20%20%20%20%20%20modules%3A%20false%2C%5Cn%20%20%20%20%20%20assets%3A%20false%2C%5Cn%20%20%20%20%7D)%5Cn%20%20)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Dfptt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub9bc307a\" id=\"ub9bc307a\"><span data-lake-id=\"u3b501924\" id=\"u3b501924\">打开</span><code data-lake-id=\"ub707ff06\" id=\"ub707ff06\"><span data-lake-id=\"ud75c4717\" id=\"ud75c4717\">VS Code</span></code><span data-lake-id=\"ubf78c5cb\" id=\"ubf78c5cb\">调试模式，将断点定到第四行，接下来就开始分析它的主要流程：</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A0%2C%22y%22%3A-39%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%BC%80%E5%A7%8B%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%7D%2C%22id%22%3A%22e2c2d963-9193-44fa-a9eb-00ebf6fcb204%22%2C%22zIndex%22%3A1%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-22.140625%2C%22y%22%3A103%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22width%22%3A163.125%2C%22height%22%3A77.09375%2C%22zIndex%22%3A2%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22d5eb10a0-3df4-4973-a034-70368b6d9e0f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%7D%2C%22id%22%3A%22cecb7f2b-9e6f-446d-809f-216a1c5530cb%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-42.78955078125%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%3C%2Fdiv%3E%22%2C%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22width%22%3A204.4228515625%2C%22height%22%3A58.3125%2C%22zIndex%22%3A4%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2285036931-c713-4886-8570-facc27905e3f%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%7D%2C%22id%22%3A%2292fc249a-bf54-4042-8d54-74d88eda10ee%22%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-65.4869384765625%2C%22y%22%3A299.35302734375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22width%22%3A249.817626953125%2C%22height%22%3A65.7939453125%2C%22zIndex%22%3A6%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229d0424a1-bd18-41aa-be20-db684bbe60f4%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%7D%2C%22id%22%3A%22a087e3bb-ae98-45c6-87db-14cfab8230a8%22%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-2.890625%2C%22y%22%3A395.859375%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22width%22%3A124.625%2C%22height%22%3A56.78125%2C%22zIndex%22%3A8%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22dc965733-ad53-49d9-8274-a7db025466eb%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%7D%2C%22id%22%3A%2247f65d3f-d86a-4541-9500-d77982f1be95%22%2C%22zIndex%22%3A9%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-64.40455627441406%2C%22y%22%3A504.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22bcc0c16e-bd7b-40ba-9826-df1b2108b8ba%22%2C%22width%22%3A248.80911254882812%2C%22height%22%3A121.370361328125%2C%22zIndex%22%3A10%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22W%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%7D%2C%22id%22%3A%2249514239-3a50-4016-90ab-7d68f04120e8%22%2C%22zIndex%22%3A11%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Astart%3B%5C%22%3E%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3C%2Fdiv%3E%22%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A363.9462890625%2C%22y%22%3A-32.5%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeRun%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22width%22%3A170.4296875%2C%22height%22%3A53.5%2C%22zIndex%22%3A12%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22f7f4a01d-b275-47cd-aa4f-320420e2d665%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%7D%2C%22id%22%3A%22b98f8946-9eaa-495c-99c8-1626e0232b03%22%2C%22zIndex%22%3A13%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A347.0537109375%2C%22y%22%3A90.046875%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22width%22%3A204.21484375%2C%22height%22%3A50.5%2C%22zIndex%22%3A14%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%226c36eb8b-e5fe-45e3-b1db-aa07a71e074c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%7D%2C%22id%22%3A%225a659f35-b290-428b-8311-9987645680ef%22%2C%22zIndex%22%3A15%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A331.0537109375%2C%22y%22%3A214.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.beforeCompile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22width%22%3A236.21484375%2C%22height%22%3A49.25%2C%22zIndex%22%3A16%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22069cd053-3693-4265-a7bb-07a5c4bb87f1%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%7D%2C%22id%22%3A%22775e1574-70a0-4a22-a2f3-4b45bcbfcb17%22%2C%22zIndex%22%3A17%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A358.25%2C%22y%22%3A333.25%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.compile%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22width%22%3A181.822265625%2C%22height%22%3A45.625%2C%22zIndex%22%3A18%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22590f264d-6d38-4ac0-81dc-b7bd8809cc1c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%7D%2C%22id%22%3A%22489d791f-6151-410c-b24f-aa6dd4eb3792%22%2C%22zIndex%22%3A19%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A360.107421875%2C%22y%22%3A454.640625%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3Ecompiler.make(%E6%A0%B8%E5%BF%83)%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2204016626-2e1c-4037-b3ce-aa93ac1f3ee7%22%2C%22width%22%3A178.107421875%2C%22height%22%3A48%2C%22zIndex%22%3A20%2C%22rotate%22%3A0%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-103.10919189453125%2C-66.989013671875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A753%7D%2C%22search%22%3A%22%E5%BC%80%E5%A7%8B%E5%9F%8B%E5%9C%B0%E9%9B%B7(%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC)%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%B0%86%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8CWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%E5%AE%9E%E4%BE%8B%E5%8C%96compiler%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%8B%E5%9C%B0%E9%9B%B7%E5%88%9D%E5%A7%8B%E5%8C%96NodeEnvirmentPlugin%EF%BC%8C%E8%AE%A9compiler%E5%85%B7%E5%A4%87%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E8%83%BD%E5%8A%9B%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AFplugins%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%8C%82%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BDWebpack%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8F%92%E4%BB%B6%EF%BC%8C%E7%A1%AE%E5%AE%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6(EntryOptionPlugin)%EF%BC%8C%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%92%8C%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E6%A8%A1%E5%9D%97%E3%80%82%E5%BC%95%E7%88%86%E5%9C%B0%E9%9B%B7(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeRuncompiler.run(%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6)compiler.beforeCompilecompiler.compilecompiler.make(%E6%A0%B8%E5%BF%83)%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1625118006345-c39ec915-6b29-46c3-90dd-0e76dc54b3ad.jpeg%22%2C%22__height%22%3A735%2C%22graphicsBBox%22%3A%7B%22x%22%3A-65.4869384765625%2C%22y%22%3A-39%2C%22width%22%3A632.7554931640625%2C%22height%22%3A665.010986328125%7D%2C%22id%22%3A%22vD0QU%22%2C%22height%22%3A735%7D\"></card><p data-lake-id=\"u958b2523\" id=\"u958b2523\"><br></p><p data-lake-id=\"u20012e7c\" id=\"u20012e7c\"><br></p><p data-lake-id=\"u272a6b93\" id=\"u272a6b93\"><br></p><p data-lake-id=\"ud9a35259\" id=\"ud9a35259\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T07:09:02.000Z",
    "deleted_at": null,
    "created_at": "2021-06-27T03:49:50.000Z",
    "updated_at": "2022-03-31T07:09:03.000Z",
    "published_at": "2022-03-31T07:09:02.000Z",
    "first_published_at": "2021-06-27T03:53:34.000Z",
    "word_count": 624,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1624954520614-a2d77776-1d40-42f2-8a94-fe74ab2a5ce0.jpeg",
    "description": "对于Webpack来说，它本质上就是一个模块打包器，正是由于有了Loader和Plugin，才让Webpack有了其他各种各样的功能。Webpack打包后的文件创建项目mkdir demo && cd demo npm init -y安装依赖yarn add webpack webpack-c...",
    "custom_description": "",
    "hits": 5,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46697798,
    "slug": "eoh5tn",
    "title": "前端工程化",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！\n\n<a name=\"kTUlJ\"></a>\n## 工程化概述\n前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。\n\n当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：\n\n- 想要使用ES6+新特性，但是兼容有问题\n- 想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。\n- 想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。\n- 部署上线前需要**手动**压缩代码及资源文件，部署过程需要**手动**上传代码到服务器。\n- 多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。\n- 部分功能开发时需要等待后端服务接口提前完成\n<a name=\"EW0lj\"></a>\n### 工程化主要解决的问题\n\n- 传统语言或语法的弊端\n- 无法使用模块化/组件化\n- 重复的机械式工作\n- 代码风格统一、质量保证\n- 依赖后端服务接口支持\n- 整体依赖后端项目\n<a name=\"aUUhn\"></a>\n### 一个项目过程中工程化的表现\n一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。<br />一切重复的工作都应该被自动化，例如：创建项目一>编码一>预览/测试一>提交一>部署\n\n<a name=\"aoiuJ\"></a>\n### 工程化不等工具\n工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)<br />一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli\n\n工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。<br />但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。\n\n从一个项目的开发过程开始，我们来了解前端工程化具体实现：\n<a name=\"ZxEVm\"></a>\n## 脚手架工具\n自动帮助我们创建项目基础结构，并且提供项目规范和约定。<br />看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者**提供了一套规范和约定**。<br />比如在开发类似项目时，他们都有以下特征：\n\n- 相同的组织结构\n- 相同的开发范式\n- 相同的模块依赖\n- 相同的工具配置\n- 相同的基础代码\n\n这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。<br />由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。\n<a name=\"n1S8J\"></a>\n### Yeoman\n是一个用于创建现代化web应用的脚手架工具。不同于`vue-cli`这样的工具，它更像一个脚手架的运行平台，我们可以通过`Yeoman`搭配不同的`generator`去创建任何类型的项目。也就是说，我们可以创建自己的`generator`，从而定制属于我们自己的前端的前端脚手架。\n\n但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用`vue-cli`这种专注于某个框架的脚手架。\n<a name=\"tgPov\"></a>\n### Yeoman基本使用\n<a name=\"kF8fE\"></a>\n#### 安装`Yeoman`\n```shell\nyarn global add yo\n```\nYeoman是搭配特定的generator才能使用的，所以还需要安装generator\n<a name=\"ZB9tX\"></a>\n#### 安装对应的`generator`\n```shell\nyarn global add generator-node\n```\n<a name=\"H0JOj\"></a>\n#### 通过`yo`运行`generator`\n```shell\nyo node\n```\n然后根据提示输入项目的相关信息，完成后会自动生成项目。\n\n<a name=\"iGQPb\"></a>\n### Sub Generator\n有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。\n\n例如我们想运行`generator-node`子集下面的cli命令，创建一个cli应用。\n```shell\nyo node:cli\n```\n\n<a name=\"Vtd5i\"></a>\n## 自定义Generator\n虽然市面上也有很多`generator`，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的`generator`。\n\n<a name=\"GOsVL\"></a>\n### 创建Generator模块\ngenerator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-<name>的格式命名。\n```shell\nmkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator\n```\n上述命令完成后，接下来我们打开项目，然后在项目根目录创建`generators/app/index.js`文件<br />这个文件会作为`Generator`的核心入口<br />它需要导出一个继承自`Yeoman Generator`的类<br />Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法<br />我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(\"temp.txt\"),\n             Math.random().toString()\n          )\n     }\n}\n```\n然后我们把这个模块，挂载到本地全局上\n```shell\nyarn link\n```\n接着就可以使用\n```shell\nyo simple  // simple 是上面创建项目定义的项目名称\n```\n<a name=\"K2W5G\"></a>\n### 根据模板创建文件\n很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。<br />在app目录下创建`templates/foo.txt`文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记`<%= title %>`动态输出内容，也可以做一些判断、循环的操作。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(\"foo.txt\")\n          // 输出目标路径\n          const output = this.destinationPath(\"foo.txt\")\n          // 模板数据上下文\n          const context = {title: \"Hello xsl~\"}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}\n```\n相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。\n\n<a name=\"XepZf\"></a>\n### 接收用户输入\n```javascript\n// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: \"input\",\n      name: \"name\",\n      message:\"Your project name\",\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers => {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}\n```\n<a name=\"eXNQ4\"></a>\n## Plop\n一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。<br />在一个项目当中使用Plop，需要以下几个步骤：\n\n1. 将Plop模块作为项目开发依赖安装\n1. 在项目根目录下创建一个plopfile.js文件\n1. 在plopfile.js文件中定义脚手架任务\n1. 编写用于生成特定类型文件的模板\n1. 通过Plop提供的CLI运行脚手架任务\n\n<a name=\"bmH42\"></a>\n## 脚手架工作原理\n脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。\n\n<a name=\"kzFtP\"></a>\n## 自动化构建\n> 一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。\n\n将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。\n\n自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。\n\n<a name=\"We1Dg\"></a>\n## NPM Scripts自动构建工作流\n可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。<br />在启动serve之前构建项目：\n```json\n// ...\n\"scripts\": {\n\t\"preserve\": \"yarn build\",\n  \"serve\": \"browser-sync .\"\n}\n```\n同时执行多个任务：\n```shell\nyarn add npm-run-all\n```\n然后在scripts中添加：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync .\",\n  \"start\": \"run-p build serve\"\n}\n```\n监听文件变化并重新编译，监听文件变化并自动热更新：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync . --files \\“css/*.css\\\"\",\n  \"start\": \"run-p build serve\"\n}\n```\n\n<a name=\"MTfJX\"></a>\n## 常见的自动化构建工具\n> 严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处\n\n<a name=\"mUW98\"></a>\n### Grunt\n最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。\n\n<a name=\"Gvli3\"></a>\n### Gulp\n对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。\n\n<a name=\"c0d3i\"></a>\n### FIS\n百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "body_draft": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！\n\n<a name=\"kTUlJ\"></a>\n## 工程化概述\n前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。\n\n当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：\n\n- 想要使用ES6+新特性，但是兼容有问题\n- 想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。\n- 想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。\n- 部署上线前需要**手动**压缩代码及资源文件，部署过程需要**手动**上传代码到服务器。\n- 多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。\n- 部分功能开发时需要等待后端服务接口提前完成\n<a name=\"EW0lj\"></a>\n### 工程化主要解决的问题\n\n- 传统语言或语法的弊端\n- 无法使用模块化/组件化\n- 重复的机械式工作\n- 代码风格统一、质量保证\n- 依赖后端服务接口支持\n- 整体依赖后端项目\n<a name=\"aUUhn\"></a>\n### 一个项目过程中工程化的表现\n一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。<br />一切重复的工作都应该被自动化，例如：创建项目一>编码一>预览/测试一>提交一>部署\n\n<a name=\"aoiuJ\"></a>\n### 工程化不等工具\n工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)<br />一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli\n\n工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。<br />但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。\n\n从一个项目的开发过程开始，我们来了解前端工程化具体实现：\n<a name=\"ZxEVm\"></a>\n## 脚手架工具\n自动帮助我们创建项目基础结构，并且提供项目规范和约定。<br />看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者**提供了一套规范和约定**。<br />比如在开发类似项目时，他们都有以下特征：\n\n- 相同的组织结构\n- 相同的开发范式\n- 相同的模块依赖\n- 相同的工具配置\n- 相同的基础代码\n\n这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。<br />由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。\n<a name=\"n1S8J\"></a>\n### Yeoman\n是一个用于创建现代化web应用的脚手架工具。不同于`vue-cli`这样的工具，它更像一个脚手架的运行平台，我们可以通过`Yeoman`搭配不同的`generator`去创建任何类型的项目。也就是说，我们可以创建自己的`generator`，从而定制属于我们自己的前端的前端脚手架。\n\n但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用`vue-cli`这种专注于某个框架的脚手架。\n<a name=\"tgPov\"></a>\n### Yeoman基本使用\n<a name=\"kF8fE\"></a>\n#### 安装`Yeoman`\n```shell\nyarn global add yo\n```\nYeoman是搭配特定的generator才能使用的，所以还需要安装generator\n<a name=\"ZB9tX\"></a>\n#### 安装对应的`generator`\n```shell\nyarn global add generator-node\n```\n<a name=\"H0JOj\"></a>\n#### 通过`yo`运行`generator`\n```shell\nyo node\n```\n然后根据提示输入项目的相关信息，完成后会自动生成项目。\n\n<a name=\"iGQPb\"></a>\n### Sub Generator\n有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。\n\n例如我们想运行`generator-node`子集下面的cli命令，创建一个cli应用。\n```shell\nyo node:cli\n```\n\n<a name=\"Vtd5i\"></a>\n## 自定义Generator\n虽然市面上也有很多`generator`，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的`generator`。\n\n<a name=\"GOsVL\"></a>\n### 创建Generator模块\ngenerator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-<name>的格式命名。\n```shell\nmkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator\n```\n上述命令完成后，接下来我们打开项目，然后在项目根目录创建`generators/app/index.js`文件<br />这个文件会作为`Generator`的核心入口<br />它需要导出一个继承自`Yeoman Generator`的类<br />Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法<br />我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(\"temp.txt\"),\n             Math.random().toString()\n          )\n     }\n}\n```\n然后我们把这个模块，挂载到本地全局上\n```shell\nyarn link\n```\n接着就可以使用\n```shell\nyo simple  // simple 是上面创建项目定义的项目名称\n```\n<a name=\"K2W5G\"></a>\n### 根据模板创建文件\n很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。<br />在app目录下创建`templates/foo.txt`文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记`<%= title %>`动态输出内容，也可以做一些判断、循环的操作。\n```javascript\nconst Genetator = require(\"yeoman-generator\")\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(\"foo.txt\")\n          // 输出目标路径\n          const output = this.destinationPath(\"foo.txt\")\n          // 模板数据上下文\n          const context = {title: \"Hello xsl~\"}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}\n```\n相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。\n\n<a name=\"XepZf\"></a>\n### 接收用户输入\n```javascript\n// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: \"input\",\n      name: \"name\",\n      message:\"Your project name\",\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers => {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}\n```\n<a name=\"eXNQ4\"></a>\n## Plop\n一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。<br />在一个项目当中使用Plop，需要以下几个步骤：\n\n1. 将Plop模块作为项目开发依赖安装\n1. 在项目根目录下创建一个plopfile.js文件\n1. 在plopfile.js文件中定义脚手架任务\n1. 编写用于生成特定类型文件的模板\n1. 通过Plop提供的CLI运行脚手架任务\n\n<a name=\"bmH42\"></a>\n## 脚手架工作原理\n脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。\n\n<a name=\"kzFtP\"></a>\n## 自动化构建\n> 一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。\n\n将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。\n\n自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。\n\n<a name=\"We1Dg\"></a>\n## NPM Scripts自动构建工作流\n可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。<br />在启动serve之前构建项目：\n```json\n// ...\n\"scripts\": {\n\t\"preserve\": \"yarn build\",\n  \"serve\": \"browser-sync .\"\n}\n```\n同时执行多个任务：\n```shell\nyarn add npm-run-all\n```\n然后在scripts中添加：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync .\",\n  \"start\": \"run-p build serve\"\n}\n```\n监听文件变化并重新编译，监听文件变化并自动热更新：\n```json\n// ...\n\"scripts\": {\n\t\"build\": \"sass scss/main.scss css/style.css --watch\",\n  \"serve\": \"browser-sync . --files \\“css/*.css\\\"\",\n  \"start\": \"run-p build serve\"\n}\n```\n\n<a name=\"MTfJX\"></a>\n## 常见的自动化构建工具\n> 严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处\n\n<a name=\"mUW98\"></a>\n### Grunt\n最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。\n\n<a name=\"Gvli3\"></a>\n### Gulp\n对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。\n\n<a name=\"c0d3i\"></a>\n### FIS\n百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u9ddc50d1\" class=\"ne-p\"><span class=\"ne-text\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p id=\"uf0f329f4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: var(--color-prettylights-syntax-comment)\"></span></p><h2 id=\"kTUlJ\"><span class=\"ne-text\">工程化概述</span></h2><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p id=\"6efeacd3a74808736dedf22c13f949b0\" class=\"ne-p\"><br></p><p id=\"638e06fe26f9d475437043417e1dd76c\" class=\"ne-p\"><span class=\"ne-text\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul class=\"ne-ul\"><li id=\"ab33ea1b686b0d774237deffb978b2f5\"><span class=\"ne-text\">想要使用ES6+新特性，但是兼容有问题</span></li><li id=\"199af443a534e422015c599a4f8afcc9\"><span class=\"ne-text\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li><li id=\"bf807345cbfb59260dd244e15c149048\"><span class=\"ne-text\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li id=\"0647cb8916ab6dd14c1c60f189fed828\"><span class=\"ne-text\">部署上线前需要</span><strong><span class=\"ne-text\">手动</span></strong><span class=\"ne-text\">压缩代码及资源文件，部署过程需要</span><strong><span class=\"ne-text\">手动</span></strong><span class=\"ne-text\">上传代码到服务器。</span></li><li id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span class=\"ne-text\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span class=\"ne-text\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 id=\"EW0lj\"><span class=\"ne-text\">工程化主要解决的问题</span></h3><ul class=\"ne-ul\"><li id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span class=\"ne-text\">传统语言或语法的弊端</span></li><li id=\"b1413b1dec964eedb0c14c6e0073b405\"><span class=\"ne-text\">无法使用模块化/组件化</span></li><li id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span class=\"ne-text\">重复的机械式工作</span></li><li id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span class=\"ne-text\">代码风格统一、质量保证</span></li><li id=\"4c96aa6412fe73da068032bc006c0afc\"><span class=\"ne-text\">依赖后端服务接口支持</span></li><li id=\"c9581f1f56c99656de37e16688b62a45\"><span class=\"ne-text\">整体依赖后端项目</span></li></ul><h3 id=\"aUUhn\"><span class=\"ne-text\">一个项目过程中工程化的表现</span></h3><p id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" class=\"ne-p\"><span class=\"ne-text\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p id=\"81fce7b94d8a1033e43d9b09f91936f7\" class=\"ne-p\"><span class=\"ne-text\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p id=\"0eafa88a5a209274f9772ac08839ed66\" class=\"ne-p\"><br></p><h3 id=\"aoiuJ\"><span class=\"ne-text\">工程化不等工具</span></h3><p id=\"605fba2d907b03ccc9f7a4cb7200a137\" class=\"ne-p\"><span class=\"ne-text\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p id=\"7495a9a64e5d44a4ef77aeb5478a3256\" class=\"ne-p\"><span class=\"ne-text\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p id=\"f41ffd19c6ee7218bb8477898486d794\" class=\"ne-p\"><br></p><p id=\"3b67633b8d3aae6a09e2304dc77d51dd\" class=\"ne-p\"><span class=\"ne-text\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p id=\"4c36f1941103668570c2b99c1d0acd78\" class=\"ne-p\"><span class=\"ne-text\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p id=\"b98204a37bcc3bd5d801a110f29659ab\" class=\"ne-p\"><br></p><p id=\"72ec9097adc26d851b0eb8359f703474\" class=\"ne-p\"><span class=\"ne-text\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 id=\"ZxEVm\"><span class=\"ne-text\">脚手架工具</span></h2><p id=\"6702e0d0af26abea5d8b361fcec1ffe1\" class=\"ne-p\"><span class=\"ne-text\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p id=\"07f4feba31b01fa3081db7367cdffb18\" class=\"ne-p\"><span class=\"ne-text\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span class=\"ne-text\">提供了一套规范和约定</span></strong><span class=\"ne-text\">。</span></p><p id=\"cdae1020279af93b28bdf120d48fccda\" class=\"ne-p\"><span class=\"ne-text\">比如在开发类似项目时，他们都有以下特征：</span></p><ul class=\"ne-ul\"><li id=\"87f50a971760378fff4399a2eef909ec\"><span class=\"ne-text\">相同的组织结构</span></li><li id=\"ade3ab0adab563b6694aefea1a2bad95\"><span class=\"ne-text\">相同的开发范式</span></li><li id=\"39c9bdc8966936673935c53ee4607e41\"><span class=\"ne-text\">相同的模块依赖</span></li><li id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span class=\"ne-text\">相同的工具配置</span></li><li id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span class=\"ne-text\">相同的基础代码</span></li></ul><p id=\"45f28bf233bd5a54a4c435c34b774829\" class=\"ne-p\"><span class=\"ne-text\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p id=\"2a402333b402665c5d003778c04649aa\" class=\"ne-p\"><span class=\"ne-text\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 id=\"n1S8J\"><span class=\"ne-text\">Yeoman</span></h3><p id=\"6e71447cdf53b36bca75977dd78e40f9\" class=\"ne-p\"><span class=\"ne-text\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code class=\"ne-code\"><span class=\"ne-text\">vue-cli</span></code><span class=\"ne-text\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman</span></code><span class=\"ne-text\">搭配不同的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p id=\"947ac1ac2bff3be7bacd231e8849d926\" class=\"ne-p\"><br></p><p id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" class=\"ne-p\"><span class=\"ne-text\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code class=\"ne-code\"><span class=\"ne-text\">vue-cli</span></code><span class=\"ne-text\">这种专注于某个框架的脚手架。</span></p><h3 id=\"tgPov\"><span class=\"ne-text\">Yeoman基本使用</span></h3><h4 id=\"kF8fE\"><span class=\"ne-text\">安装</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman</span></code></h4><pre data-language=\"shell\" id=\"UctVY\" class=\"ne-codeblock language-shell\">yarn global add yo</pre><p id=\"f7709d684c14977c491c71417b926a40\" class=\"ne-p\"><span class=\"ne-text\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 id=\"ZB9tX\"><span class=\"ne-text\">安装对应的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code></h4><pre data-language=\"shell\" id=\"AjYIe\" class=\"ne-codeblock language-shell\">yarn global add generator-node</pre><h4 id=\"H0JOj\"><span class=\"ne-text\">通过</span><code class=\"ne-code\"><span class=\"ne-text\">yo</span></code><span class=\"ne-text\">运行</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code></h4><pre data-language=\"shell\" id=\"A4OVz\" class=\"ne-codeblock language-shell\">yo node</pre><p id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" class=\"ne-p\"><span class=\"ne-text\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p id=\"567970277a390e29489bb7abcc78fc9b\" class=\"ne-p\"><br></p><h3 id=\"iGQPb\"><span class=\"ne-text\">Sub Generator</span></h3><p id=\"63764b123afef28b5719a6f559b476ec\" class=\"ne-p\"><span class=\"ne-text\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" class=\"ne-p\"><br></p><p id=\"80d578d3bc0a21e1d8325c6e51f6537d\" class=\"ne-p\"><span class=\"ne-text\">例如我们想运行</span><code class=\"ne-code\"><span class=\"ne-text\">generator-node</span></code><span class=\"ne-text\">子集下面的cli命令，创建一个cli应用。</span></p><pre data-language=\"shell\" id=\"itHe0\" class=\"ne-codeblock language-shell\">yo node:cli</pre><p id=\"ceac8b3ad92013955a96917234e89a6a\" class=\"ne-p\"><br></p><h2 id=\"Vtd5i\"><span class=\"ne-text\">自定义Generator</span></h2><p id=\"e7777b3396c25ee50253db223ca52e92\" class=\"ne-p\"><span class=\"ne-text\">虽然市面上也有很多</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">。</span></p><p id=\"97205b7f70cc38df9bdd6381147ad581\" class=\"ne-p\"><br></p><h3 id=\"GOsVL\"><span class=\"ne-text\">创建Generator模块</span></h3><p id=\"d6afb45aa645a0838bd647331fb54173\" class=\"ne-p\"><span class=\"ne-text\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><pre data-language=\"shell\" id=\"kEYzQ\" class=\"ne-codeblock language-shell\">mkdir generator\ncd generator\nyarn init\nyarn add yeoman-generator</pre><p id=\"3d884f7ed0face815245f6a5ac2a9a9e\" class=\"ne-p\"><span class=\"ne-text\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code class=\"ne-code\"><span class=\"ne-text\">generators/app/index.js</span></code><span class=\"ne-text\">文件</span></p><p id=\"1d49178701cccbb5059d5fb0a91c8f5f\" class=\"ne-p\"><span class=\"ne-text\">这个文件会作为</span><code class=\"ne-code\"><span class=\"ne-text\">Generator</span></code><span class=\"ne-text\">的核心入口</span></p><p id=\"7619f32339a07d42bf6dc2f080f2193d\" class=\"ne-p\"><span class=\"ne-text\">它需要导出一个继承自</span><code class=\"ne-code\"><span class=\"ne-text\">Yeoman Generator</span></code><span class=\"ne-text\">的类</span></p><p id=\"bacc3f5ab6b162acb14404949722f40a\" class=\"ne-p\"><span class=\"ne-text\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p id=\"9d5006b75fdc3bc94b297dcc927f628b\" class=\"ne-p\"><span class=\"ne-text\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><pre data-language=\"javascript\" id=\"DZpLB\" class=\"ne-codeblock language-javascript\">const Genetator = require(&quot;yeoman-generator&quot;)\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          this.fs.write(\n             this.destinationPath(&quot;temp.txt&quot;),\n             Math.random().toString()\n          )\n     }\n}</pre><p id=\"4931ef260fa23ecf2763bf7e84a8541b\" class=\"ne-p\"><span class=\"ne-text\">然后我们把这个模块，挂载到本地全局上</span></p><pre data-language=\"shell\" id=\"pJuu8\" class=\"ne-codeblock language-shell\">yarn link</pre><p id=\"f91fb4526321f3e477467a49d911317a\" class=\"ne-p\"><span class=\"ne-text\">接着就可以使用</span></p><pre data-language=\"shell\" id=\"r7HSb\" class=\"ne-codeblock language-shell\">yo simple  // simple 是上面创建项目定义的项目名称</pre><h3 id=\"K2W5G\"><span class=\"ne-text\">根据模板创建文件</span></h3><p id=\"a1fb2fda7663118ce3a48917cbb98917\" class=\"ne-p\"><span class=\"ne-text\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p id=\"8dc055009d114168f171f6a1dc5181f9\" class=\"ne-p\"><span class=\"ne-text\">在app目录下创建</span><code class=\"ne-code\"><span class=\"ne-text\">templates/foo.txt</span></code><span class=\"ne-text\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;%= title %&gt;</span></code><span class=\"ne-text\">动态输出内容，也可以做一些判断、循环的操作。</span></p><pre data-language=\"javascript\" id=\"NRHkn\" class=\"ne-codeblock language-javascript\">const Genetator = require(&quot;yeoman-generator&quot;)\n\nmodule.exports = class extends Generator {\n     writing() {\n          // Yeoman 自动在生成文件阶段调用此方法\n          // 模板文件路径\n          const tmpl = this.templatePath(&quot;foo.txt&quot;)\n          // 输出目标路径\n          const output = this.destinationPath(&quot;foo.txt&quot;)\n          // 模板数据上下文\n          const context = {title: &quot;Hello xsl~&quot;}\n          this.fs.copyTpl(tmpl, output, context)\n     }\n}</pre><p id=\"41d4df42f2e1c49170cdd872db525534\" class=\"ne-p\"><span class=\"ne-text\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p id=\"59b219ee88b413579d46edbf26ff0cd2\" class=\"ne-p\"><br></p><h3 id=\"XepZf\"><span class=\"ne-text\">接收用户输入</span></h3><pre data-language=\"javascript\" id=\"qEFYB\" class=\"ne-codeblock language-javascript\">// ...\nprompting() {\n   // Yeoman 在询问用户环节会自动调用此方法\n   //  在此方法中可以调用父类的prompt() 方法发出对用户的命令行询问\n   return this.prompt([{\n      type: &quot;input&quot;,\n      name: &quot;name&quot;,\n      message:&quot;Your project name&quot;,\n      default: this.appname, // appname为项目生成目录名称\n   }]).then(answers =&gt; {\n     this.answers = answers\n   })\n}\nwriting(){\n   // ...\n   this.fs.copyTpl(tmpl, output, this.answers)\n}</pre><h2 id=\"eXNQ4\"><span class=\"ne-text\">Plop</span></h2><p id=\"04bb18225809481c4cbc3d41eae336cc\" class=\"ne-p\"><span class=\"ne-text\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p id=\"36e30a882a7a8d73579aaf52e808f7fb\" class=\"ne-p\"><span class=\"ne-text\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol class=\"ne-ol\"><li id=\"u6eb65025\"><span class=\"ne-text\">将Plop模块作为项目开发依赖安装</span></li><li id=\"u8596f26f\"><span class=\"ne-text\">在项目根目录下创建一个plopfile.js文件</span></li><li id=\"u05d99019\"><span class=\"ne-text\">在plopfile.js文件中定义脚手架任务</span></li><li id=\"uaa4745c1\"><span class=\"ne-text\">编写用于生成特定类型文件的模板</span></li><li id=\"ud5c3be8a\"><span class=\"ne-text\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" class=\"ne-p\"><br></p><h2 id=\"bmH42\"><span class=\"ne-text\">脚手架工作原理</span></h2><p id=\"ufc46286c\" class=\"ne-p\"><span class=\"ne-text\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p id=\"45a1809166e515f21f299c74efed1e27\" class=\"ne-p\"><br></p><h2 id=\"kzFtP\"><span class=\"ne-text\">自动化构建</span></h2><div class=\"ne-quote\"><p id=\"ub7e5f02f\" class=\"ne-p\"><span class=\"ne-text\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></div><p id=\"9a32ced10e6459e239a05a1a1e5df1bb\" class=\"ne-p\"><span class=\"ne-text\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p id=\"d18acf5af7787992ff284a698d01d418\" class=\"ne-p\"><br></p><p id=\"2736b42029477f90d7bcd9cd0cf4929d\" class=\"ne-p\"><span class=\"ne-text\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p id=\"96334d6e3c97e357fbf85c11c11ccd26\" class=\"ne-p\"><br></p><h2 id=\"We1Dg\"><span class=\"ne-text\">NPM Scripts自动构建工作流</span></h2><p id=\"u05daf93d\" class=\"ne-p\"><span class=\"ne-text\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p id=\"u75895150\" class=\"ne-p\"><span class=\"ne-text\">在启动serve之前构建项目：</span></p><pre data-language=\"json\" id=\"HwiWx\" class=\"ne-codeblock language-json\">// ...\n&quot;scripts&quot;: {\n\t&quot;preserve&quot;: &quot;yarn build&quot;,\n  &quot;serve&quot;: &quot;browser-sync .&quot;\n}</pre><p id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" class=\"ne-p\"><span class=\"ne-text\">同时执行多个任务：</span></p><pre data-language=\"shell\" id=\"SkcZV\" class=\"ne-codeblock language-shell\">yarn add npm-run-all</pre><p id=\"u390d0a26\" class=\"ne-p\"><span class=\"ne-text\">然后在scripts中添加：</span></p><pre data-language=\"json\" id=\"vQPuB\" class=\"ne-codeblock language-json\">// ...\n&quot;scripts&quot;: {\n\t&quot;build&quot;: &quot;sass scss/main.scss css/style.css --watch&quot;,\n  &quot;serve&quot;: &quot;browser-sync .&quot;,\n  &quot;start&quot;: &quot;run-p build serve&quot;\n}</pre><p id=\"30746ddfc4aee0df1a14a5759fbd2da0\" class=\"ne-p\"><span class=\"ne-text\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><pre data-language=\"json\" id=\"BTiLz\" class=\"ne-codeblock language-json\">// ...\n&quot;scripts&quot;: {\n\t&quot;build&quot;: &quot;sass scss/main.scss css/style.css --watch&quot;,\n  &quot;serve&quot;: &quot;browser-sync . --files \\“css/*.css\\&quot;&quot;,\n  &quot;start&quot;: &quot;run-p build serve&quot;\n}</pre><p id=\"924fbd896dfc87f378125e354a4653cd\" class=\"ne-p\"><br></p><h2 id=\"MTfJX\"><span class=\"ne-text\">常见的自动化构建工具</span></h2><div class=\"ne-quote\"><p id=\"077ede272d301418bbaba7486729e376\" class=\"ne-p\"><span class=\"ne-text\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></div><h3 id=\"mUW98\"><span class=\"ne-text\">Grunt</span></h3><p id=\"ufef91aad\" class=\"ne-p\"><span class=\"ne-text\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p id=\"u5de15af5\" class=\"ne-p\"><br></p><h3 id=\"Gvli3\"><span class=\"ne-text\">Gulp</span></h3><p id=\"ua9d9c760\" class=\"ne-p\"><span class=\"ne-text\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p id=\"ud3041ade\" class=\"ne-p\"><br></p><h3 id=\"c0d3i\"><span class=\"ne-text\">FIS</span></h3><p id=\"u7282cedc\" class=\"ne-p\"><span class=\"ne-text\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p id=\"u327bc84a\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8ac951e3\" class=\"ne-p\"><br></p><p id=\"u375590bd\" class=\"ne-p\"><br></p><p id=\"uf6653213\" class=\"ne-p\"><br></p><p id=\"u628e2d18\" class=\"ne-p\"><br></p><p id=\"u61ca0a14\" class=\"ne-p\"><br></p><p id=\"u84a9f2af\" class=\"ne-p\"><br></p><p id=\"udc9acb9f\" class=\"ne-p\"><br></p><p id=\"u23533efc\" class=\"ne-p\"><br></p><p id=\"uf7120598\" class=\"ne-p\"><br></p><p id=\"u00128f39\" class=\"ne-p\"><br></p><p id=\"u16ba130f\" class=\"ne-p\"><br></p><p id=\"u710f7f9f\" class=\"ne-p\"><br></p><p id=\"u66d7a1fe\" class=\"ne-p\"><br></p><p id=\"u82dfb0b3\" class=\"ne-p\"><br></p><p id=\"ue4c6d16f\" class=\"ne-p\"><br></p><p id=\"u4a729b96\" class=\"ne-p\"><br></p><p id=\"uf23cedb5\" class=\"ne-p\"><br></p><p id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" class=\"ne-p\"><br></p><p id=\"c6dbb935ccf191afd0f115adcd1c3681\" class=\"ne-p\"><br></p><p id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" class=\"ne-p\"><br></p><p id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" class=\"ne-p\"><br></p><p id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" class=\"ne-p\"><br></p><p id=\"807a0f067997266561dbadbcac84799d\" class=\"ne-p\"><br></p><p id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" class=\"ne-p\"><br></p><p id=\"7b918194a737f5e23fe42f911e7b2f41\" class=\"ne-p\"><br></p><p id=\"6e415308ee3e17698f477ae2b17a36b3\" class=\"ne-p\"><br></p><p id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" class=\"ne-p\"><br></p><p id=\"a93901365cafffe8b0094d5fc1649a2c\" class=\"ne-p\"><br></p><p id=\"b0dffc3ac245c3c336a8904992538e80\" class=\"ne-p\"><br></p><p id=\"f9b156de99ec06197292f284ee10c9f5\" class=\"ne-p\"><br></p><p id=\"4f63866ba6b48598c77497227be68e3e\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9ddc50d1\" id=\"u9ddc50d1\"><span data-lake-id=\"uf2e308aa\" id=\"uf2e308aa\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p data-lake-id=\"uf0f329f4\" id=\"uf0f329f4\"><span data-lake-id=\"ud28fe703\" id=\"ud28fe703\" style=\"color: var(--color-prettylights-syntax-comment)\">​</span><br></p><h2 data-lake-id=\"kTUlJ\" id=\"kTUlJ\"><span data-lake-id=\"u2f7b6809\" id=\"u2f7b6809\">工程化概述</span></h2><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u4abef9cf\" id=\"u4abef9cf\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p data-lake-id=\"6efeacd3a74808736dedf22c13f949b0\" id=\"6efeacd3a74808736dedf22c13f949b0\"><br></p><p data-lake-id=\"638e06fe26f9d475437043417e1dd76c\" id=\"638e06fe26f9d475437043417e1dd76c\"><span data-lake-id=\"u56306bb9\" id=\"u56306bb9\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul list=\"u714c65b3\"><li fid=\"u95242760\" data-lake-id=\"ab33ea1b686b0d774237deffb978b2f5\" id=\"ab33ea1b686b0d774237deffb978b2f5\"><span data-lake-id=\"u8c6735b6\" id=\"u8c6735b6\">想要使用ES6+新特性，但是兼容有问题</span></li><li fid=\"u95242760\" data-lake-id=\"199af443a534e422015c599a4f8afcc9\" id=\"199af443a534e422015c599a4f8afcc9\"><span data-lake-id=\"u0bc6ac94\" id=\"u0bc6ac94\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"bf807345cbfb59260dd244e15c149048\" id=\"bf807345cbfb59260dd244e15c149048\"><span data-lake-id=\"u262fc89a\" id=\"u262fc89a\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"0647cb8916ab6dd14c1c60f189fed828\" id=\"0647cb8916ab6dd14c1c60f189fed828\"><span data-lake-id=\"u6d3d2bb8\" id=\"u6d3d2bb8\">部署上线前需要</span><strong><span data-lake-id=\"u7952b03d\" id=\"u7952b03d\">手动</span></strong><span data-lake-id=\"ua57d8783\" id=\"ua57d8783\">压缩代码及资源文件，部署过程需要</span><strong><span data-lake-id=\"u51bad8b5\" id=\"u51bad8b5\">手动</span></strong><span data-lake-id=\"u5dd930e1\" id=\"u5dd930e1\">上传代码到服务器。</span></li><li fid=\"u95242760\" data-lake-id=\"46f8f24838060c6b72af26d04c6c3d4a\" id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span data-lake-id=\"u4b14d467\" id=\"u4b14d467\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li fid=\"u95242760\" data-lake-id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\" id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span data-lake-id=\"ucdc8558c\" id=\"ucdc8558c\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 data-lake-id=\"EW0lj\" id=\"EW0lj\"><span data-lake-id=\"ucd3a5627\" id=\"ucd3a5627\">工程化主要解决的问题</span></h3><ul list=\"u7fb76746\"><li fid=\"ud6f1a7d6\" data-lake-id=\"09cf688bab0662a0ab07ba59e1ab53bd\" id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span data-lake-id=\"u520d9080\" id=\"u520d9080\">传统语言或语法的弊端</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"b1413b1dec964eedb0c14c6e0073b405\" id=\"b1413b1dec964eedb0c14c6e0073b405\"><span data-lake-id=\"u8f76db5a\" id=\"u8f76db5a\">无法使用模块化/组件化</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4b7a29e20de450b4cfdf835c27bceb3d\" id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span data-lake-id=\"ubd00e10c\" id=\"ubd00e10c\">重复的机械式工作</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"62fccefaae81ecb0ca6610d6be7c6c72\" id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span data-lake-id=\"ua6d16299\" id=\"ua6d16299\">代码风格统一、质量保证</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4c96aa6412fe73da068032bc006c0afc\" id=\"4c96aa6412fe73da068032bc006c0afc\"><span data-lake-id=\"ue9b02c0e\" id=\"ue9b02c0e\">依赖后端服务接口支持</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"c9581f1f56c99656de37e16688b62a45\" id=\"c9581f1f56c99656de37e16688b62a45\"><span data-lake-id=\"u400174a9\" id=\"u400174a9\">整体依赖后端项目</span></li></ul><h3 data-lake-id=\"aUUhn\" id=\"aUUhn\"><span data-lake-id=\"u82965b43\" id=\"u82965b43\">一个项目过程中工程化的表现</span></h3><p data-lake-id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" id=\"a2a28a1300caa6fb05f0c1d29a9ec939\"><span data-lake-id=\"ua6c463e0\" id=\"ua6c463e0\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p data-lake-id=\"81fce7b94d8a1033e43d9b09f91936f7\" id=\"81fce7b94d8a1033e43d9b09f91936f7\"><span data-lake-id=\"uae54f73d\" id=\"uae54f73d\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p data-lake-id=\"0eafa88a5a209274f9772ac08839ed66\" id=\"0eafa88a5a209274f9772ac08839ed66\"><br></p><h3 data-lake-id=\"aoiuJ\" id=\"aoiuJ\"><span data-lake-id=\"u33f50391\" id=\"u33f50391\">工程化不等工具</span></h3><p data-lake-id=\"605fba2d907b03ccc9f7a4cb7200a137\" id=\"605fba2d907b03ccc9f7a4cb7200a137\"><span data-lake-id=\"u2214cc6a\" id=\"u2214cc6a\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p data-lake-id=\"7495a9a64e5d44a4ef77aeb5478a3256\" id=\"7495a9a64e5d44a4ef77aeb5478a3256\"><span data-lake-id=\"uc4bb710a\" id=\"uc4bb710a\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p data-lake-id=\"f41ffd19c6ee7218bb8477898486d794\" id=\"f41ffd19c6ee7218bb8477898486d794\"><br></p><p data-lake-id=\"3b67633b8d3aae6a09e2304dc77d51dd\" id=\"3b67633b8d3aae6a09e2304dc77d51dd\"><span data-lake-id=\"u5f48dae7\" id=\"u5f48dae7\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p data-lake-id=\"4c36f1941103668570c2b99c1d0acd78\" id=\"4c36f1941103668570c2b99c1d0acd78\"><span data-lake-id=\"u3cad878d\" id=\"u3cad878d\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p data-lake-id=\"b98204a37bcc3bd5d801a110f29659ab\" id=\"b98204a37bcc3bd5d801a110f29659ab\"><br></p><p data-lake-id=\"72ec9097adc26d851b0eb8359f703474\" id=\"72ec9097adc26d851b0eb8359f703474\"><span data-lake-id=\"u7e625936\" id=\"u7e625936\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 data-lake-id=\"ZxEVm\" id=\"ZxEVm\"><span data-lake-id=\"ube28f0c6\" id=\"ube28f0c6\">脚手架工具</span></h2><p data-lake-id=\"6702e0d0af26abea5d8b361fcec1ffe1\" id=\"6702e0d0af26abea5d8b361fcec1ffe1\"><span data-lake-id=\"uba2c3ac9\" id=\"uba2c3ac9\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p data-lake-id=\"07f4feba31b01fa3081db7367cdffb18\" id=\"07f4feba31b01fa3081db7367cdffb18\"><span data-lake-id=\"u1ed9bf66\" id=\"u1ed9bf66\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span data-lake-id=\"u5fbe1612\" id=\"u5fbe1612\">提供了一套规范和约定</span></strong><span data-lake-id=\"ue851e0dd\" id=\"ue851e0dd\">。</span></p><p data-lake-id=\"cdae1020279af93b28bdf120d48fccda\" id=\"cdae1020279af93b28bdf120d48fccda\"><span data-lake-id=\"u9201fabb\" id=\"u9201fabb\">比如在开发类似项目时，他们都有以下特征：</span></p><ul list=\"u9c7b0d6a\"><li fid=\"ue5007b75\" data-lake-id=\"87f50a971760378fff4399a2eef909ec\" id=\"87f50a971760378fff4399a2eef909ec\"><span data-lake-id=\"u61247e35\" id=\"u61247e35\">相同的组织结构</span></li><li fid=\"ue5007b75\" data-lake-id=\"ade3ab0adab563b6694aefea1a2bad95\" id=\"ade3ab0adab563b6694aefea1a2bad95\"><span data-lake-id=\"uf02418de\" id=\"uf02418de\">相同的开发范式</span></li><li fid=\"ue5007b75\" data-lake-id=\"39c9bdc8966936673935c53ee4607e41\" id=\"39c9bdc8966936673935c53ee4607e41\"><span data-lake-id=\"uf8754778\" id=\"uf8754778\">相同的模块依赖</span></li><li fid=\"ue5007b75\" data-lake-id=\"07f5c73b4fefd013fffb949ed9c71bba\" id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span data-lake-id=\"u70fdc6d0\" id=\"u70fdc6d0\">相同的工具配置</span></li><li fid=\"ue5007b75\" data-lake-id=\"3dc5321383ac48f068b7ccd8db3b84cd\" id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span data-lake-id=\"u24d59e3e\" id=\"u24d59e3e\">相同的基础代码</span></li></ul><p data-lake-id=\"45f28bf233bd5a54a4c435c34b774829\" id=\"45f28bf233bd5a54a4c435c34b774829\"><span data-lake-id=\"u13a4fbc4\" id=\"u13a4fbc4\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p data-lake-id=\"2a402333b402665c5d003778c04649aa\" id=\"2a402333b402665c5d003778c04649aa\"><span data-lake-id=\"ube532606\" id=\"ube532606\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 data-lake-id=\"n1S8J\" id=\"n1S8J\"><span data-lake-id=\"u4588e8c7\" id=\"u4588e8c7\">Yeoman</span></h3><p data-lake-id=\"6e71447cdf53b36bca75977dd78e40f9\" id=\"6e71447cdf53b36bca75977dd78e40f9\"><span data-lake-id=\"uab762e2c\" id=\"uab762e2c\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code data-lake-id=\"uf24d8ce4\" id=\"uf24d8ce4\"><span data-lake-id=\"ueadd0cf3\" id=\"ueadd0cf3\">vue-cli</span></code><span data-lake-id=\"uc0677493\" id=\"uc0677493\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code data-lake-id=\"u724533e3\" id=\"u724533e3\"><span data-lake-id=\"udd9465e0\" id=\"udd9465e0\">Yeoman</span></code><span data-lake-id=\"u57f1a7a4\" id=\"u57f1a7a4\">搭配不同的</span><code data-lake-id=\"u8704cb4a\" id=\"u8704cb4a\"><span data-lake-id=\"u83aeafdf\" id=\"u83aeafdf\">generator</span></code><span data-lake-id=\"uafcb805a\" id=\"uafcb805a\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code data-lake-id=\"u16522b31\" id=\"u16522b31\"><span data-lake-id=\"u39a4b215\" id=\"u39a4b215\">generator</span></code><span data-lake-id=\"u9481d789\" id=\"u9481d789\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p data-lake-id=\"947ac1ac2bff3be7bacd231e8849d926\" id=\"947ac1ac2bff3be7bacd231e8849d926\"><br></p><p data-lake-id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\"><span data-lake-id=\"ud4d799b8\" id=\"ud4d799b8\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code data-lake-id=\"uce81b59f\" id=\"uce81b59f\"><span data-lake-id=\"u7a2c9589\" id=\"u7a2c9589\">vue-cli</span></code><span data-lake-id=\"u36681221\" id=\"u36681221\">这种专注于某个框架的脚手架。</span></p><h3 data-lake-id=\"tgPov\" id=\"tgPov\"><span data-lake-id=\"u27ed86c5\" id=\"u27ed86c5\">Yeoman基本使用</span></h3><h4 data-lake-id=\"kF8fE\" id=\"kF8fE\"><span data-lake-id=\"u32a5dec5\" id=\"u32a5dec5\">安装</span><code data-lake-id=\"ud08c2796\" id=\"ud08c2796\"><span data-lake-id=\"u6907f0a9\" id=\"u6907f0a9\">Yeoman</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20yo%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UctVY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f7709d684c14977c491c71417b926a40\" id=\"f7709d684c14977c491c71417b926a40\"><span data-lake-id=\"u293a1e59\" id=\"u293a1e59\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 data-lake-id=\"ZB9tX\" id=\"ZB9tX\"><span data-lake-id=\"u79fe4734\" id=\"u79fe4734\">安装对应的</span><code data-lake-id=\"u6185a7da\" id=\"u6185a7da\"><span data-lake-id=\"u12849491\" id=\"u12849491\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20generator-node%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AjYIe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"H0JOj\" id=\"H0JOj\"><span data-lake-id=\"u2947582c\" id=\"u2947582c\">通过</span><code data-lake-id=\"ua95853b0\" id=\"ua95853b0\"><span data-lake-id=\"ue5b291ec\" id=\"ue5b291ec\">yo</span></code><span data-lake-id=\"u9143c573\" id=\"u9143c573\">运行</span><code data-lake-id=\"u4a99be42\" id=\"u4a99be42\"><span data-lake-id=\"u75955163\" id=\"u75955163\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22A4OVz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" id=\"813cbeb31ce8bdce63bccb7753ebc0ac\"><span data-lake-id=\"u7869bcc6\" id=\"u7869bcc6\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p data-lake-id=\"567970277a390e29489bb7abcc78fc9b\" id=\"567970277a390e29489bb7abcc78fc9b\"><br></p><h3 data-lake-id=\"iGQPb\" id=\"iGQPb\"><span data-lake-id=\"u13581dc9\" id=\"u13581dc9\">Sub Generator</span></h3><p data-lake-id=\"63764b123afef28b5719a6f559b476ec\" id=\"63764b123afef28b5719a6f559b476ec\"><span data-lake-id=\"u3df000dd\" id=\"u3df000dd\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p data-lake-id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\"><br></p><p data-lake-id=\"80d578d3bc0a21e1d8325c6e51f6537d\" id=\"80d578d3bc0a21e1d8325c6e51f6537d\"><span data-lake-id=\"uf79d2bee\" id=\"uf79d2bee\">例如我们想运行</span><code data-lake-id=\"u0681e65d\" id=\"u0681e65d\"><span data-lake-id=\"u6eef3108\" id=\"u6eef3108\">generator-node</span></code><span data-lake-id=\"uffbc1618\" id=\"uffbc1618\">子集下面的cli命令，创建一个cli应用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%3Acli%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22itHe0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceac8b3ad92013955a96917234e89a6a\" id=\"ceac8b3ad92013955a96917234e89a6a\"><br></p><h2 data-lake-id=\"Vtd5i\" id=\"Vtd5i\"><span data-lake-id=\"ub8f2d24b\" id=\"ub8f2d24b\">自定义Generator</span></h2><p data-lake-id=\"e7777b3396c25ee50253db223ca52e92\" id=\"e7777b3396c25ee50253db223ca52e92\"><span data-lake-id=\"uee5b990d\" id=\"uee5b990d\">虽然市面上也有很多</span><code data-lake-id=\"ufbebab81\" id=\"ufbebab81\"><span data-lake-id=\"uc831a5fa\" id=\"uc831a5fa\">generator</span></code><span data-lake-id=\"uedf94604\" id=\"uedf94604\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code data-lake-id=\"u6240c313\" id=\"u6240c313\"><span data-lake-id=\"u53de307f\" id=\"u53de307f\">generator</span></code><span data-lake-id=\"u8385b73b\" id=\"u8385b73b\">。</span></p><p data-lake-id=\"97205b7f70cc38df9bdd6381147ad581\" id=\"97205b7f70cc38df9bdd6381147ad581\"><br></p><h3 data-lake-id=\"GOsVL\" id=\"GOsVL\"><span data-lake-id=\"ucee9cf39\" id=\"ucee9cf39\">创建Generator模块</span></h3><p data-lake-id=\"d6afb45aa645a0838bd647331fb54173\" id=\"d6afb45aa645a0838bd647331fb54173\"><span data-lake-id=\"ub265eadd\" id=\"ub265eadd\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22mkdir%20generator%5Cncd%20generator%5Cnyarn%20init%5Cnyarn%20add%20yeoman-generator%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kEYzQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3d884f7ed0face815245f6a5ac2a9a9e\" id=\"3d884f7ed0face815245f6a5ac2a9a9e\"><span data-lake-id=\"u797e24cf\" id=\"u797e24cf\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code data-lake-id=\"u5e955203\" id=\"u5e955203\"><span data-lake-id=\"ud6c4de0c\" id=\"ud6c4de0c\">generators/app/index.js</span></code><span data-lake-id=\"uda487af5\" id=\"uda487af5\">文件</span></p><p data-lake-id=\"1d49178701cccbb5059d5fb0a91c8f5f\" id=\"1d49178701cccbb5059d5fb0a91c8f5f\"><span data-lake-id=\"uf5e978c6\" id=\"uf5e978c6\">这个文件会作为</span><code data-lake-id=\"ud516e490\" id=\"ud516e490\"><span data-lake-id=\"u43447756\" id=\"u43447756\">Generator</span></code><span data-lake-id=\"u32837693\" id=\"u32837693\">的核心入口</span></p><p data-lake-id=\"7619f32339a07d42bf6dc2f080f2193d\" id=\"7619f32339a07d42bf6dc2f080f2193d\"><span data-lake-id=\"u553260c2\" id=\"u553260c2\">它需要导出一个继承自</span><code data-lake-id=\"u3d11baac\" id=\"u3d11baac\"><span data-lake-id=\"ub5d856f9\" id=\"ub5d856f9\">Yeoman Generator</span></code><span data-lake-id=\"u0be39170\" id=\"u0be39170\">的类</span></p><p data-lake-id=\"bacc3f5ab6b162acb14404949722f40a\" id=\"bacc3f5ab6b162acb14404949722f40a\"><span data-lake-id=\"u2e3050e7\" id=\"u2e3050e7\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p data-lake-id=\"9d5006b75fdc3bc94b297dcc927f628b\" id=\"9d5006b75fdc3bc94b297dcc927f628b\"><span data-lake-id=\"ucde9e4b9\" id=\"ucde9e4b9\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.write(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20this.destinationPath(%5C%22temp.txt%5C%22)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Math.random().toString()%5Cn%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DZpLB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4931ef260fa23ecf2763bf7e84a8541b\" id=\"4931ef260fa23ecf2763bf7e84a8541b\"><span data-lake-id=\"u5c9cc00c\" id=\"u5c9cc00c\">然后我们把这个模块，挂载到本地全局上</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20link%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pJuu8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f91fb4526321f3e477467a49d911317a\" id=\"f91fb4526321f3e477467a49d911317a\"><span data-lake-id=\"u75cfc814\" id=\"u75cfc814\">接着就可以使用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20simple%20%20%2F%2F%20simple%20%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22r7HSb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"K2W5G\" id=\"K2W5G\"><span data-lake-id=\"ub127323c\" id=\"ub127323c\">根据模板创建文件</span></h3><p data-lake-id=\"a1fb2fda7663118ce3a48917cbb98917\" id=\"a1fb2fda7663118ce3a48917cbb98917\"><span data-lake-id=\"u7a7c45dd\" id=\"u7a7c45dd\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p data-lake-id=\"8dc055009d114168f171f6a1dc5181f9\" id=\"8dc055009d114168f171f6a1dc5181f9\"><span data-lake-id=\"u2cb80fe9\" id=\"u2cb80fe9\">在app目录下创建</span><code data-lake-id=\"ubda2118b\" id=\"ubda2118b\"><span data-lake-id=\"ub5c9d701\" id=\"ub5c9d701\">templates/foo.txt</span></code><span data-lake-id=\"u081027aa\" id=\"u081027aa\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code data-lake-id=\"uf304d685\" id=\"uf304d685\"><span data-lake-id=\"u993498ab\" id=\"u993498ab\">&lt;%= title %&gt;</span></code><span data-lake-id=\"u280436be\" id=\"u280436be\">动态输出内容，也可以做一些判断、循环的操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20tmpl%20%3D%20this.templatePath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BE%93%E5%87%BA%E7%9B%AE%E6%A0%87%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20output%20%3D%20this.destinationPath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87%5Cn%20%20%20%20%20%20%20%20%20%20const%20context%20%3D%20%7Btitle%3A%20%5C%22Hello%20xsl~%5C%22%7D%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20context)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NRHkn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"41d4df42f2e1c49170cdd872db525534\" id=\"41d4df42f2e1c49170cdd872db525534\"><span data-lake-id=\"u378646ce\" id=\"u378646ce\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p data-lake-id=\"59b219ee88b413579d46edbf26ff0cd2\" id=\"59b219ee88b413579d46edbf26ff0cd2\"><br></p><h3 data-lake-id=\"XepZf\" id=\"XepZf\"><span data-lake-id=\"u2fcaf512\" id=\"u2fcaf512\">接收用户输入</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20...%5Cnprompting()%20%7B%5Cn%20%20%20%2F%2F%20Yeoman%20%E5%9C%A8%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E8%8A%82%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%2F%2F%20%20%E5%9C%A8%E6%AD%A4%E6%96%B9%E6%B3%95%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84prompt()%20%E6%96%B9%E6%B3%95%E5%8F%91%E5%87%BA%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A2%E9%97%AE%5Cn%20%20%20return%20this.prompt(%5B%7B%5Cn%20%20%20%20%20%20type%3A%20%5C%22input%5C%22%2C%5Cn%20%20%20%20%20%20name%3A%20%5C%22name%5C%22%2C%5Cn%20%20%20%20%20%20message%3A%5C%22Your%20project%20name%5C%22%2C%5Cn%20%20%20%20%20%20default%3A%20this.appname%2C%20%2F%2F%20appname%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%7D%5D).then(answers%20%3D%3E%20%7B%5Cn%20%20%20%20%20this.answers%20%3D%20answers%5Cn%20%20%20%7D)%5Cn%7D%5Cnwriting()%7B%5Cn%20%20%20%2F%2F%20...%5Cn%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20this.answers)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qEFYB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"eXNQ4\" id=\"eXNQ4\"><span data-lake-id=\"u425a213f\" id=\"u425a213f\">Plop</span></h2><p data-lake-id=\"04bb18225809481c4cbc3d41eae336cc\" id=\"04bb18225809481c4cbc3d41eae336cc\"><span data-lake-id=\"ud698a0eb\" id=\"ud698a0eb\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p data-lake-id=\"36e30a882a7a8d73579aaf52e808f7fb\" id=\"36e30a882a7a8d73579aaf52e808f7fb\"><span data-lake-id=\"uec65ea81\" id=\"uec65ea81\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol list=\"u0551e1dd\"><li fid=\"u5ffd975a\" data-lake-id=\"u6eb65025\" id=\"u6eb65025\"><span data-lake-id=\"u0ff7b416\" id=\"u0ff7b416\">将Plop模块作为项目开发依赖安装</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u8596f26f\" id=\"u8596f26f\"><span data-lake-id=\"u9dc9bc31\" id=\"u9dc9bc31\">在项目根目录下创建一个plopfile.js文件</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u05d99019\" id=\"u05d99019\"><span data-lake-id=\"u0749f652\" id=\"u0749f652\">在plopfile.js文件中定义脚手架任务</span></li><li fid=\"u5ffd975a\" data-lake-id=\"uaa4745c1\" id=\"uaa4745c1\"><span data-lake-id=\"u1f9c54c0\" id=\"u1f9c54c0\">编写用于生成特定类型文件的模板</span></li><li fid=\"u5ffd975a\" data-lake-id=\"ud5c3be8a\" id=\"ud5c3be8a\"><span data-lake-id=\"u4c64d8f6\" id=\"u4c64d8f6\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p data-lake-id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" id=\"ee85b5bcf99f1e2988f97c5b711bcd34\"><br></p><h2 data-lake-id=\"bmH42\" id=\"bmH42\"><span data-lake-id=\"u5bd4c3e7\" id=\"u5bd4c3e7\">脚手架工作原理</span></h2><p data-lake-id=\"ufc46286c\" id=\"ufc46286c\"><span data-lake-id=\"ufa24ebd6\" id=\"ufa24ebd6\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p data-lake-id=\"45a1809166e515f21f299c74efed1e27\" id=\"45a1809166e515f21f299c74efed1e27\"><br></p><h2 data-lake-id=\"kzFtP\" id=\"kzFtP\"><span data-lake-id=\"u84bad02b\" id=\"u84bad02b\">自动化构建</span></h2><blockquote data-lake-id=\"u6fd49020\" id=\"u6fd49020\"><p data-lake-id=\"ub7e5f02f\" id=\"ub7e5f02f\"><span data-lake-id=\"u7e9be0b0\" id=\"u7e9be0b0\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></blockquote><p data-lake-id=\"9a32ced10e6459e239a05a1a1e5df1bb\" id=\"9a32ced10e6459e239a05a1a1e5df1bb\"><span data-lake-id=\"uf529b7e4\" id=\"uf529b7e4\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p data-lake-id=\"d18acf5af7787992ff284a698d01d418\" id=\"d18acf5af7787992ff284a698d01d418\"><br></p><p data-lake-id=\"2736b42029477f90d7bcd9cd0cf4929d\" id=\"2736b42029477f90d7bcd9cd0cf4929d\"><span data-lake-id=\"u294e7de4\" id=\"u294e7de4\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p data-lake-id=\"96334d6e3c97e357fbf85c11c11ccd26\" id=\"96334d6e3c97e357fbf85c11c11ccd26\"><br></p><h2 data-lake-id=\"We1Dg\" id=\"We1Dg\"><span data-lake-id=\"uce2467ce\" id=\"uce2467ce\">NPM Scripts自动构建工作流</span></h2><p data-lake-id=\"u05daf93d\" id=\"u05daf93d\"><span data-lake-id=\"uc1dee9cc\" id=\"uc1dee9cc\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p data-lake-id=\"u75895150\" id=\"u75895150\"><span data-lake-id=\"u493035c0\" id=\"u493035c0\">在启动serve之前构建项目：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22preserve%5C%22%3A%20%5C%22yarn%20build%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HwiWx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\"><span data-lake-id=\"ua5a9349c\" id=\"ua5a9349c\">同时执行多个任务：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20add%20npm-run-all%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SkcZV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u390d0a26\" id=\"u390d0a26\"><span data-lake-id=\"ub13e0d6a\" id=\"ub13e0d6a\">然后在scripts中添加：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vQPuB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"30746ddfc4aee0df1a14a5759fbd2da0\" id=\"30746ddfc4aee0df1a14a5759fbd2da0\"><span data-lake-id=\"u16ae39d6\" id=\"u16ae39d6\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%20--files%20%5C%5C%E2%80%9Ccss%2F*.css%5C%5C%5C%22%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22BTiLz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"924fbd896dfc87f378125e354a4653cd\" id=\"924fbd896dfc87f378125e354a4653cd\"><br></p><h2 data-lake-id=\"MTfJX\" id=\"MTfJX\"><span data-lake-id=\"u499bea89\" id=\"u499bea89\">常见的自动化构建工具</span></h2><blockquote data-lake-id=\"u2e8dadc2\" id=\"u2e8dadc2\"><p data-lake-id=\"077ede272d301418bbaba7486729e376\" id=\"077ede272d301418bbaba7486729e376\"><span data-lake-id=\"ubbab3705\" id=\"ubbab3705\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></blockquote><h3 data-lake-id=\"mUW98\" id=\"mUW98\"><span data-lake-id=\"u30b1b51f\" id=\"u30b1b51f\">Grunt</span></h3><p data-lake-id=\"ufef91aad\" id=\"ufef91aad\"><span data-lake-id=\"uc9638db0\" id=\"uc9638db0\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p data-lake-id=\"u5de15af5\" id=\"u5de15af5\"><br></p><h3 data-lake-id=\"Gvli3\" id=\"Gvli3\"><span data-lake-id=\"u100cd57c\" id=\"u100cd57c\">Gulp</span></h3><p data-lake-id=\"ua9d9c760\" id=\"ua9d9c760\"><span data-lake-id=\"u8710bd46\" id=\"u8710bd46\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p data-lake-id=\"ud3041ade\" id=\"ud3041ade\"><br></p><h3 data-lake-id=\"c0d3i\" id=\"c0d3i\"><span data-lake-id=\"ubeea5e24\" id=\"ubeea5e24\">FIS</span></h3><p data-lake-id=\"u7282cedc\" id=\"u7282cedc\"><span data-lake-id=\"ud0645e9a\" id=\"ud0645e9a\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p data-lake-id=\"u327bc84a\" id=\"u327bc84a\"><span data-lake-id=\"u0bd847d8\" id=\"u0bd847d8\">​</span><br></p><p data-lake-id=\"u8ac951e3\" id=\"u8ac951e3\"><br></p><p data-lake-id=\"u375590bd\" id=\"u375590bd\"><br></p><p data-lake-id=\"uf6653213\" id=\"uf6653213\"><br></p><p data-lake-id=\"u628e2d18\" id=\"u628e2d18\"><br></p><p data-lake-id=\"u61ca0a14\" id=\"u61ca0a14\"><br></p><p data-lake-id=\"u84a9f2af\" id=\"u84a9f2af\"><br></p><p data-lake-id=\"udc9acb9f\" id=\"udc9acb9f\"><br></p><p data-lake-id=\"u23533efc\" id=\"u23533efc\"><br></p><p data-lake-id=\"uf7120598\" id=\"uf7120598\"><br></p><p data-lake-id=\"u00128f39\" id=\"u00128f39\"><br></p><p data-lake-id=\"u16ba130f\" id=\"u16ba130f\"><br></p><p data-lake-id=\"u710f7f9f\" id=\"u710f7f9f\"><br></p><p data-lake-id=\"u66d7a1fe\" id=\"u66d7a1fe\"><br></p><p data-lake-id=\"u82dfb0b3\" id=\"u82dfb0b3\"><br></p><p data-lake-id=\"ue4c6d16f\" id=\"ue4c6d16f\"><br></p><p data-lake-id=\"u4a729b96\" id=\"u4a729b96\"><br></p><p data-lake-id=\"uf23cedb5\" id=\"uf23cedb5\"><br></p><p data-lake-id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" id=\"99e89eccc910a5e2ae2e84c93d83ad4d\"><br></p><p data-lake-id=\"c6dbb935ccf191afd0f115adcd1c3681\" id=\"c6dbb935ccf191afd0f115adcd1c3681\"><br></p><p data-lake-id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\"><br></p><p data-lake-id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" id=\"c5d22b80c6cd657f1844c8fcb207b7f8\"><br></p><p data-lake-id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" id=\"60d72f9f7aa1cf6553c00edc441f2fc5\"><br></p><p data-lake-id=\"807a0f067997266561dbadbcac84799d\" id=\"807a0f067997266561dbadbcac84799d\"><br></p><p data-lake-id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\"><br></p><p data-lake-id=\"7b918194a737f5e23fe42f911e7b2f41\" id=\"7b918194a737f5e23fe42f911e7b2f41\"><br></p><p data-lake-id=\"6e415308ee3e17698f477ae2b17a36b3\" id=\"6e415308ee3e17698f477ae2b17a36b3\"><br></p><p data-lake-id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\"><br></p><p data-lake-id=\"a93901365cafffe8b0094d5fc1649a2c\" id=\"a93901365cafffe8b0094d5fc1649a2c\"><br></p><p data-lake-id=\"b0dffc3ac245c3c336a8904992538e80\" id=\"b0dffc3ac245c3c336a8904992538e80\"><br></p><p data-lake-id=\"f9b156de99ec06197292f284ee10c9f5\" id=\"f9b156de99ec06197292f284ee10c9f5\"><br></p><p data-lake-id=\"4f63866ba6b48598c77497227be68e3e\" id=\"4f63866ba6b48598c77497227be68e3e\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9ddc50d1\" id=\"u9ddc50d1\"><span data-lake-id=\"uf2e308aa\" id=\"uf2e308aa\">在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！</span></p><p data-lake-id=\"uf0f329f4\" id=\"uf0f329f4\"><span data-lake-id=\"ud28fe703\" id=\"ud28fe703\" style=\"color: var(--color-prettylights-syntax-comment)\">​</span><br></p><h2 data-lake-id=\"kTUlJ\" id=\"kTUlJ\"><span data-lake-id=\"u2f7b6809\" id=\"u2f7b6809\">工程化概述</span></h2><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u4abef9cf\" id=\"u4abef9cf\">前端工程化是指遵循一定标准和规范，通过工具去提升效率，他是一种降低成本的手段。</span></p><p data-lake-id=\"6efeacd3a74808736dedf22c13f949b0\" id=\"6efeacd3a74808736dedf22c13f949b0\"><br></p><p data-lake-id=\"638e06fe26f9d475437043417e1dd76c\" id=\"638e06fe26f9d475437043417e1dd76c\"><span data-lake-id=\"u56306bb9\" id=\"u56306bb9\">当下前端功能不断提高，业务复杂日益复杂。因此，在我们没有工程化之前，我们不得不面对一些问题：</span></p><ul list=\"u714c65b3\"><li fid=\"u95242760\" data-lake-id=\"ab33ea1b686b0d774237deffb978b2f5\" id=\"ab33ea1b686b0d774237deffb978b2f5\"><span data-lake-id=\"u8c6735b6\" id=\"u8c6735b6\">想要使用ES6+新特性，但是兼容有问题</span></li><li fid=\"u95242760\" data-lake-id=\"199af443a534e422015c599a4f8afcc9\" id=\"199af443a534e422015c599a4f8afcc9\"><span data-lake-id=\"u0bc6ac94\" id=\"u0bc6ac94\">想要使用Less/Sass/PostCSS增强CSS的编程性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"bf807345cbfb59260dd244e15c149048\" id=\"bf807345cbfb59260dd244e15c149048\"><span data-lake-id=\"u262fc89a\" id=\"u262fc89a\">想要使用模块化的方式提高项目的可维护性，但是运行环境不能直接支持。</span></li><li fid=\"u95242760\" data-lake-id=\"0647cb8916ab6dd14c1c60f189fed828\" id=\"0647cb8916ab6dd14c1c60f189fed828\"><span data-lake-id=\"u6d3d2bb8\" id=\"u6d3d2bb8\">部署上线前需要</span><strong><span data-lake-id=\"u7952b03d\" id=\"u7952b03d\">手动</span></strong><span data-lake-id=\"ua57d8783\" id=\"ua57d8783\">压缩代码及资源文件，部署过程需要</span><strong><span data-lake-id=\"u51bad8b5\" id=\"u51bad8b5\">手动</span></strong><span data-lake-id=\"u5dd930e1\" id=\"u5dd930e1\">上传代码到服务器。</span></li><li fid=\"u95242760\" data-lake-id=\"46f8f24838060c6b72af26d04c6c3d4a\" id=\"46f8f24838060c6b72af26d04c6c3d4a\"><span data-lake-id=\"u4b14d467\" id=\"u4b14d467\">多人协作开发，无法硬性统一大家的代码风格，从仓库中pull的代码质量无法保证。</span></li><li fid=\"u95242760\" data-lake-id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\" id=\"29ae7ec22d868fe0284fa0fbd0ec5e38\"><span data-lake-id=\"ucdc8558c\" id=\"ucdc8558c\">部分功能开发时需要等待后端服务接口提前完成</span></li></ul><h3 data-lake-id=\"EW0lj\" id=\"EW0lj\"><span data-lake-id=\"ucd3a5627\" id=\"ucd3a5627\">工程化主要解决的问题</span></h3><ul list=\"u7fb76746\"><li fid=\"ud6f1a7d6\" data-lake-id=\"09cf688bab0662a0ab07ba59e1ab53bd\" id=\"09cf688bab0662a0ab07ba59e1ab53bd\"><span data-lake-id=\"u520d9080\" id=\"u520d9080\">传统语言或语法的弊端</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"b1413b1dec964eedb0c14c6e0073b405\" id=\"b1413b1dec964eedb0c14c6e0073b405\"><span data-lake-id=\"u8f76db5a\" id=\"u8f76db5a\">无法使用模块化/组件化</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4b7a29e20de450b4cfdf835c27bceb3d\" id=\"4b7a29e20de450b4cfdf835c27bceb3d\"><span data-lake-id=\"ubd00e10c\" id=\"ubd00e10c\">重复的机械式工作</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"62fccefaae81ecb0ca6610d6be7c6c72\" id=\"62fccefaae81ecb0ca6610d6be7c6c72\"><span data-lake-id=\"ua6d16299\" id=\"ua6d16299\">代码风格统一、质量保证</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"4c96aa6412fe73da068032bc006c0afc\" id=\"4c96aa6412fe73da068032bc006c0afc\"><span data-lake-id=\"ue9b02c0e\" id=\"ue9b02c0e\">依赖后端服务接口支持</span></li><li fid=\"ud6f1a7d6\" data-lake-id=\"c9581f1f56c99656de37e16688b62a45\" id=\"c9581f1f56c99656de37e16688b62a45\"><span data-lake-id=\"u400174a9\" id=\"u400174a9\">整体依赖后端项目</span></li></ul><h3 data-lake-id=\"aUUhn\" id=\"aUUhn\"><span data-lake-id=\"u82965b43\" id=\"u82965b43\">一个项目过程中工程化的表现</span></h3><p data-lake-id=\"a2a28a1300caa6fb05f0c1d29a9ec939\" id=\"a2a28a1300caa6fb05f0c1d29a9ec939\"><span data-lake-id=\"ua6c463e0\" id=\"ua6c463e0\">一切以提高效率、降低成本、质量保证为目的的手段都属于工程化。</span></p><p data-lake-id=\"81fce7b94d8a1033e43d9b09f91936f7\" id=\"81fce7b94d8a1033e43d9b09f91936f7\"><span data-lake-id=\"uae54f73d\" id=\"uae54f73d\">一切重复的工作都应该被自动化，例如：创建项目一&gt;编码一&gt;预览/测试一&gt;提交一&gt;部署</span></p><p data-lake-id=\"0eafa88a5a209274f9772ac08839ed66\" id=\"0eafa88a5a209274f9772ac08839ed66\"><br></p><h3 data-lake-id=\"aoiuJ\" id=\"aoiuJ\"><span data-lake-id=\"u33f50391\" id=\"u33f50391\">工程化不等工具</span></h3><p data-lake-id=\"605fba2d907b03ccc9f7a4cb7200a137\" id=\"605fba2d907b03ccc9f7a4cb7200a137\"><span data-lake-id=\"u2214cc6a\" id=\"u2214cc6a\">工具不是工程化的核心，工程化的核心是对项目整体的规划、架构。而工具只是帮助我们去实现和落地的一种手段，例如文件的组织结构，源代码的开发范式(语法、规范、标准)</span></p><p data-lake-id=\"7495a9a64e5d44a4ef77aeb5478a3256\" id=\"7495a9a64e5d44a4ef77aeb5478a3256\"><span data-lake-id=\"uc4bb710a\" id=\"uc4bb710a\">一些成熟的工程化集成有：create-react-app、vue-cli、angular-cli、gatsby-cli</span></p><p data-lake-id=\"f41ffd19c6ee7218bb8477898486d794\" id=\"f41ffd19c6ee7218bb8477898486d794\"><br></p><p data-lake-id=\"3b67633b8d3aae6a09e2304dc77d51dd\" id=\"3b67633b8d3aae6a09e2304dc77d51dd\"><span data-lake-id=\"u5f48dae7\" id=\"u5f48dae7\">工程化的一切都应该归功于Node.js，它让整个前端进行了一次工业革命，可以说，没有Node.js就没有现在的前端。因为几乎所有的工程化工具都是用Node.js来编写的。</span></p><p data-lake-id=\"4c36f1941103668570c2b99c1d0acd78\" id=\"4c36f1941103668570c2b99c1d0acd78\"><span data-lake-id=\"u3cad878d\" id=\"u3cad878d\">但是，面对各种技术工具和新鲜名词，我们不必盲目追求，因为所有的工具都应该是为了解决问题而存在的。</span></p><p data-lake-id=\"b98204a37bcc3bd5d801a110f29659ab\" id=\"b98204a37bcc3bd5d801a110f29659ab\"><br></p><p data-lake-id=\"72ec9097adc26d851b0eb8359f703474\" id=\"72ec9097adc26d851b0eb8359f703474\"><span data-lake-id=\"u7e625936\" id=\"u7e625936\">从一个项目的开发过程开始，我们来了解前端工程化具体实现：</span></p><h2 data-lake-id=\"ZxEVm\" id=\"ZxEVm\"><span data-lake-id=\"ube28f0c6\" id=\"ube28f0c6\">脚手架工具</span></h2><p data-lake-id=\"6702e0d0af26abea5d8b361fcec1ffe1\" id=\"6702e0d0af26abea5d8b361fcec1ffe1\"><span data-lake-id=\"uba2c3ac9\" id=\"uba2c3ac9\">自动帮助我们创建项目基础结构，并且提供项目规范和约定。</span></p><p data-lake-id=\"07f4feba31b01fa3081db7367cdffb18\" id=\"07f4feba31b01fa3081db7367cdffb18\"><span data-lake-id=\"u1ed9bf66\" id=\"u1ed9bf66\">看似很普通的需求，背后却隐藏了一定的哲学。因为除了创建文件，它更重要的是还给开发者</span><strong><span data-lake-id=\"u5fbe1612\" id=\"u5fbe1612\">提供了一套规范和约定</span></strong><span data-lake-id=\"ue851e0dd\" id=\"ue851e0dd\">。</span></p><p data-lake-id=\"cdae1020279af93b28bdf120d48fccda\" id=\"cdae1020279af93b28bdf120d48fccda\"><span data-lake-id=\"u9201fabb\" id=\"u9201fabb\">比如在开发类似项目时，他们都有以下特征：</span></p><ul list=\"u9c7b0d6a\"><li fid=\"ue5007b75\" data-lake-id=\"87f50a971760378fff4399a2eef909ec\" id=\"87f50a971760378fff4399a2eef909ec\"><span data-lake-id=\"u61247e35\" id=\"u61247e35\">相同的组织结构</span></li><li fid=\"ue5007b75\" data-lake-id=\"ade3ab0adab563b6694aefea1a2bad95\" id=\"ade3ab0adab563b6694aefea1a2bad95\"><span data-lake-id=\"uf02418de\" id=\"uf02418de\">相同的开发范式</span></li><li fid=\"ue5007b75\" data-lake-id=\"39c9bdc8966936673935c53ee4607e41\" id=\"39c9bdc8966936673935c53ee4607e41\"><span data-lake-id=\"uf8754778\" id=\"uf8754778\">相同的模块依赖</span></li><li fid=\"ue5007b75\" data-lake-id=\"07f5c73b4fefd013fffb949ed9c71bba\" id=\"07f5c73b4fefd013fffb949ed9c71bba\"><span data-lake-id=\"u70fdc6d0\" id=\"u70fdc6d0\">相同的工具配置</span></li><li fid=\"ue5007b75\" data-lake-id=\"3dc5321383ac48f068b7ccd8db3b84cd\" id=\"3dc5321383ac48f068b7ccd8db3b84cd\"><span data-lake-id=\"u24d59e3e\" id=\"u24d59e3e\">相同的基础代码</span></li></ul><p data-lake-id=\"45f28bf233bd5a54a4c435c34b774829\" id=\"45f28bf233bd5a54a4c435c34b774829\"><span data-lake-id=\"u13a4fbc4\" id=\"u13a4fbc4\">这导致我们在创建新项目时，有大量的重复工作要做，所以脚手架工具就是用来解决这一类问题的。我们可以通过脚手架快速搭建项目基础骨架，然后基于这个项目骨架来开发项目。</span></p><p data-lake-id=\"2a402333b402665c5d003778c04649aa\" id=\"2a402333b402665c5d003778c04649aa\"><span data-lake-id=\"ube532606\" id=\"ube532606\">由于前端技术选型比较多样，另外也没有一个统一的标准，所以前端方向的脚手架不会集成在某个IDE中，它都是以一个独立的工具存在。</span></p><h3 data-lake-id=\"n1S8J\" id=\"n1S8J\"><span data-lake-id=\"u4588e8c7\" id=\"u4588e8c7\">Yeoman</span></h3><p data-lake-id=\"6e71447cdf53b36bca75977dd78e40f9\" id=\"6e71447cdf53b36bca75977dd78e40f9\"><span data-lake-id=\"uab762e2c\" id=\"uab762e2c\">是一个用于创建现代化web应用的脚手架工具。不同于</span><code data-lake-id=\"uf24d8ce4\" id=\"uf24d8ce4\"><span data-lake-id=\"ueadd0cf3\" id=\"ueadd0cf3\">vue-cli</span></code><span data-lake-id=\"uc0677493\" id=\"uc0677493\">这样的工具，它更像一个脚手架的运行平台，我们可以通过</span><code data-lake-id=\"u724533e3\" id=\"u724533e3\"><span data-lake-id=\"udd9465e0\" id=\"udd9465e0\">Yeoman</span></code><span data-lake-id=\"u57f1a7a4\" id=\"u57f1a7a4\">搭配不同的</span><code data-lake-id=\"u8704cb4a\" id=\"u8704cb4a\"><span data-lake-id=\"u83aeafdf\" id=\"u83aeafdf\">generator</span></code><span data-lake-id=\"uafcb805a\" id=\"uafcb805a\">去创建任何类型的项目。也就是说，我们可以创建自己的</span><code data-lake-id=\"u16522b31\" id=\"u16522b31\"><span data-lake-id=\"u39a4b215\" id=\"u39a4b215\">generator</span></code><span data-lake-id=\"u9481d789\" id=\"u9481d789\">，从而定制属于我们自己的前端的前端脚手架。</span></p><p data-lake-id=\"947ac1ac2bff3be7bacd231e8849d926\" id=\"947ac1ac2bff3be7bacd231e8849d926\"><br></p><p data-lake-id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\" id=\"b7ec4aa0296e4dcab9103b9c79cfcaef\"><span data-lake-id=\"ud4d799b8\" id=\"ud4d799b8\">但是它的优点也是它的缺点，在专注于基于框架开发项目的人的眼中，它过于通用化，不够专注。所以他们更愿意使用</span><code data-lake-id=\"uce81b59f\" id=\"uce81b59f\"><span data-lake-id=\"u7a2c9589\" id=\"u7a2c9589\">vue-cli</span></code><span data-lake-id=\"u36681221\" id=\"u36681221\">这种专注于某个框架的脚手架。</span></p><h3 data-lake-id=\"tgPov\" id=\"tgPov\"><span data-lake-id=\"u27ed86c5\" id=\"u27ed86c5\">Yeoman基本使用</span></h3><h4 data-lake-id=\"kF8fE\" id=\"kF8fE\"><span data-lake-id=\"u32a5dec5\" id=\"u32a5dec5\">安装</span><code data-lake-id=\"ud08c2796\" id=\"ud08c2796\"><span data-lake-id=\"u6907f0a9\" id=\"u6907f0a9\">Yeoman</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20yo%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UctVY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f7709d684c14977c491c71417b926a40\" id=\"f7709d684c14977c491c71417b926a40\"><span data-lake-id=\"u293a1e59\" id=\"u293a1e59\">Yeoman是搭配特定的generator才能使用的，所以还需要安装generator</span></p><h4 data-lake-id=\"ZB9tX\" id=\"ZB9tX\"><span data-lake-id=\"u79fe4734\" id=\"u79fe4734\">安装对应的</span><code data-lake-id=\"u6185a7da\" id=\"u6185a7da\"><span data-lake-id=\"u12849491\" id=\"u12849491\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20global%20add%20generator-node%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AjYIe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"H0JOj\" id=\"H0JOj\"><span data-lake-id=\"u2947582c\" id=\"u2947582c\">通过</span><code data-lake-id=\"ua95853b0\" id=\"ua95853b0\"><span data-lake-id=\"ue5b291ec\" id=\"ue5b291ec\">yo</span></code><span data-lake-id=\"u9143c573\" id=\"u9143c573\">运行</span><code data-lake-id=\"u4a99be42\" id=\"u4a99be42\"><span data-lake-id=\"u75955163\" id=\"u75955163\">generator</span></code></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22A4OVz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"813cbeb31ce8bdce63bccb7753ebc0ac\" id=\"813cbeb31ce8bdce63bccb7753ebc0ac\"><span data-lake-id=\"u7869bcc6\" id=\"u7869bcc6\">然后根据提示输入项目的相关信息，完成后会自动生成项目。</span></p><p data-lake-id=\"567970277a390e29489bb7abcc78fc9b\" id=\"567970277a390e29489bb7abcc78fc9b\"><br></p><h3 data-lake-id=\"iGQPb\" id=\"iGQPb\"><span data-lake-id=\"u13581dc9\" id=\"u13581dc9\">Sub Generator</span></h3><p data-lake-id=\"63764b123afef28b5719a6f559b476ec\" id=\"63764b123afef28b5719a6f559b476ec\"><span data-lake-id=\"u3df000dd\" id=\"u3df000dd\">有时候我们并不想安转完整的项目，仅仅只是想在原有的项目基础之上去增加部分文件。</span></p><p data-lake-id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\" id=\"d81c7ab2a041ba325b00ec7c9f9ff3dd\"><br></p><p data-lake-id=\"80d578d3bc0a21e1d8325c6e51f6537d\" id=\"80d578d3bc0a21e1d8325c6e51f6537d\"><span data-lake-id=\"uf79d2bee\" id=\"uf79d2bee\">例如我们想运行</span><code data-lake-id=\"u0681e65d\" id=\"u0681e65d\"><span data-lake-id=\"u6eef3108\" id=\"u6eef3108\">generator-node</span></code><span data-lake-id=\"uffbc1618\" id=\"uffbc1618\">子集下面的cli命令，创建一个cli应用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20node%3Acli%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22itHe0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceac8b3ad92013955a96917234e89a6a\" id=\"ceac8b3ad92013955a96917234e89a6a\"><br></p><h2 data-lake-id=\"Vtd5i\" id=\"Vtd5i\"><span data-lake-id=\"ub8f2d24b\" id=\"ub8f2d24b\">自定义Generator</span></h2><p data-lake-id=\"e7777b3396c25ee50253db223ca52e92\" id=\"e7777b3396c25ee50253db223ca52e92\"><span data-lake-id=\"uee5b990d\" id=\"uee5b990d\">虽然市面上也有很多</span><code data-lake-id=\"ufbebab81\" id=\"ufbebab81\"><span data-lake-id=\"uc831a5fa\" id=\"uc831a5fa\">generator</span></code><span data-lake-id=\"uedf94604\" id=\"uedf94604\">，但是他们并不包含我们自己项目的一些公用的依赖或者业务代码。所以，我们仍然有必要自己编写一个专属的</span><code data-lake-id=\"u6240c313\" id=\"u6240c313\"><span data-lake-id=\"u53de307f\" id=\"u53de307f\">generator</span></code><span data-lake-id=\"u8385b73b\" id=\"u8385b73b\">。</span></p><p data-lake-id=\"97205b7f70cc38df9bdd6381147ad581\" id=\"97205b7f70cc38df9bdd6381147ad581\"><br></p><h3 data-lake-id=\"GOsVL\" id=\"GOsVL\"><span data-lake-id=\"ucee9cf39\" id=\"ucee9cf39\">创建Generator模块</span></h3><p data-lake-id=\"d6afb45aa645a0838bd647331fb54173\" id=\"d6afb45aa645a0838bd647331fb54173\"><span data-lake-id=\"ub265eadd\" id=\"ub265eadd\">generator本质上就是一个npm模块。不同于其他模块，yeoman的ganerator模块名称必须是generator-&lt;name&gt;的格式命名。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22mkdir%20generator%5Cncd%20generator%5Cnyarn%20init%5Cnyarn%20add%20yeoman-generator%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kEYzQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3d884f7ed0face815245f6a5ac2a9a9e\" id=\"3d884f7ed0face815245f6a5ac2a9a9e\"><span data-lake-id=\"u797e24cf\" id=\"u797e24cf\">上述命令完成后，接下来我们打开项目，然后在项目根目录创建</span><code data-lake-id=\"u5e955203\" id=\"u5e955203\"><span data-lake-id=\"ud6c4de0c\" id=\"ud6c4de0c\">generators/app/index.js</span></code><span data-lake-id=\"uda487af5\" id=\"uda487af5\">文件</span></p><p data-lake-id=\"1d49178701cccbb5059d5fb0a91c8f5f\" id=\"1d49178701cccbb5059d5fb0a91c8f5f\"><span data-lake-id=\"uf5e978c6\" id=\"uf5e978c6\">这个文件会作为</span><code data-lake-id=\"ud516e490\" id=\"ud516e490\"><span data-lake-id=\"u43447756\" id=\"u43447756\">Generator</span></code><span data-lake-id=\"u32837693\" id=\"u32837693\">的核心入口</span></p><p data-lake-id=\"7619f32339a07d42bf6dc2f080f2193d\" id=\"7619f32339a07d42bf6dc2f080f2193d\"><span data-lake-id=\"u553260c2\" id=\"u553260c2\">它需要导出一个继承自</span><code data-lake-id=\"u3d11baac\" id=\"u3d11baac\"><span data-lake-id=\"ub5d856f9\" id=\"ub5d856f9\">Yeoman Generator</span></code><span data-lake-id=\"u0be39170\" id=\"u0be39170\">的类</span></p><p data-lake-id=\"bacc3f5ab6b162acb14404949722f40a\" id=\"bacc3f5ab6b162acb14404949722f40a\"><span data-lake-id=\"u2e3050e7\" id=\"u2e3050e7\">Yeoman Generator 在工作时会自动调用我们在此类中定义的一些生命周期方法</span></p><p data-lake-id=\"9d5006b75fdc3bc94b297dcc927f628b\" id=\"9d5006b75fdc3bc94b297dcc927f628b\"><span data-lake-id=\"ucde9e4b9\" id=\"ucde9e4b9\">我们在这些方法中可以调用父类提供的一些工具方法实现一些功能，例如文件写入。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.write(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20this.destinationPath(%5C%22temp.txt%5C%22)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Math.random().toString()%5Cn%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DZpLB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4931ef260fa23ecf2763bf7e84a8541b\" id=\"4931ef260fa23ecf2763bf7e84a8541b\"><span data-lake-id=\"u5c9cc00c\" id=\"u5c9cc00c\">然后我们把这个模块，挂载到本地全局上</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20link%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pJuu8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f91fb4526321f3e477467a49d911317a\" id=\"f91fb4526321f3e477467a49d911317a\"><span data-lake-id=\"u75cfc814\" id=\"u75cfc814\">接着就可以使用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yo%20simple%20%20%2F%2F%20simple%20%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22r7HSb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"K2W5G\" id=\"K2W5G\"><span data-lake-id=\"ub127323c\" id=\"ub127323c\">根据模板创建文件</span></h3><p data-lake-id=\"a1fb2fda7663118ce3a48917cbb98917\" id=\"a1fb2fda7663118ce3a48917cbb98917\"><span data-lake-id=\"u7a7c45dd\" id=\"u7a7c45dd\">很多时候我们需要自动去创建的文件有很多，而且文件的内容也相对复杂，在这样的情况下，我们可以用模板来创建文件，因为这样更加便捷。</span></p><p data-lake-id=\"8dc055009d114168f171f6a1dc5181f9\" id=\"8dc055009d114168f171f6a1dc5181f9\"><span data-lake-id=\"u2cb80fe9\" id=\"u2cb80fe9\">在app目录下创建</span><code data-lake-id=\"ubda2118b\" id=\"ubda2118b\"><span data-lake-id=\"ub5c9d701\" id=\"ub5c9d701\">templates/foo.txt</span></code><span data-lake-id=\"u081027aa\" id=\"u081027aa\">文件，模板文件支持ejs模板引擎的模板语法，比如我们可以使用模板标记</span><code data-lake-id=\"uf304d685\" id=\"uf304d685\"><span data-lake-id=\"u993498ab\" id=\"u993498ab\">&lt;%= title %&gt;</span></code><span data-lake-id=\"u280436be\" id=\"u280436be\">动态输出内容，也可以做一些判断、循环的操作。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Genetator%20%3D%20require(%5C%22yeoman-generator%5C%22)%5Cn%5Cnmodule.exports%20%3D%20class%20extends%20Generator%20%7B%5Cn%20%20%20%20%20writing()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20Yeoman%20%E8%87%AA%E5%8A%A8%E5%9C%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E9%98%B6%E6%AE%B5%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20tmpl%20%3D%20this.templatePath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BE%93%E5%87%BA%E7%9B%AE%E6%A0%87%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20%20%20const%20output%20%3D%20this.destinationPath(%5C%22foo.txt%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87%5Cn%20%20%20%20%20%20%20%20%20%20const%20context%20%3D%20%7Btitle%3A%20%5C%22Hello%20xsl~%5C%22%7D%5Cn%20%20%20%20%20%20%20%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20context)%5Cn%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NRHkn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"41d4df42f2e1c49170cdd872db525534\" id=\"41d4df42f2e1c49170cdd872db525534\"><span data-lake-id=\"u378646ce\" id=\"u378646ce\">相对于手动创建每一个文件，通过模板创建大大提升了效率，特别是文件比较多比较复杂的情况下。</span></p><p data-lake-id=\"59b219ee88b413579d46edbf26ff0cd2\" id=\"59b219ee88b413579d46edbf26ff0cd2\"><br></p><h3 data-lake-id=\"XepZf\" id=\"XepZf\"><span data-lake-id=\"u2fcaf512\" id=\"u2fcaf512\">接收用户输入</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20...%5Cnprompting()%20%7B%5Cn%20%20%20%2F%2F%20Yeoman%20%E5%9C%A8%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E8%8A%82%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E6%AD%A4%E6%96%B9%E6%B3%95%5Cn%20%20%20%2F%2F%20%20%E5%9C%A8%E6%AD%A4%E6%96%B9%E6%B3%95%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84prompt()%20%E6%96%B9%E6%B3%95%E5%8F%91%E5%87%BA%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A2%E9%97%AE%5Cn%20%20%20return%20this.prompt(%5B%7B%5Cn%20%20%20%20%20%20type%3A%20%5C%22input%5C%22%2C%5Cn%20%20%20%20%20%20name%3A%20%5C%22name%5C%22%2C%5Cn%20%20%20%20%20%20message%3A%5C%22Your%20project%20name%5C%22%2C%5Cn%20%20%20%20%20%20default%3A%20this.appname%2C%20%2F%2F%20appname%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%7D%5D).then(answers%20%3D%3E%20%7B%5Cn%20%20%20%20%20this.answers%20%3D%20answers%5Cn%20%20%20%7D)%5Cn%7D%5Cnwriting()%7B%5Cn%20%20%20%2F%2F%20...%5Cn%20%20%20this.fs.copyTpl(tmpl%2C%20output%2C%20this.answers)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qEFYB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"eXNQ4\" id=\"eXNQ4\"><span data-lake-id=\"u425a213f\" id=\"u425a213f\">Plop</span></h2><p data-lake-id=\"04bb18225809481c4cbc3d41eae336cc\" id=\"04bb18225809481c4cbc3d41eae336cc\"><span data-lake-id=\"ud698a0eb\" id=\"ud698a0eb\">一个小而美的脚手架工具。主要创建项目中特定类型文件的小工具，它类似于Yeoman中的Sub Generator。不过它一般不会独立运行，它用来集成在项目当中，去创建同类型的项目文件。</span></p><p data-lake-id=\"36e30a882a7a8d73579aaf52e808f7fb\" id=\"36e30a882a7a8d73579aaf52e808f7fb\"><span data-lake-id=\"uec65ea81\" id=\"uec65ea81\">在一个项目当中使用Plop，需要以下几个步骤：</span></p><ol list=\"u0551e1dd\"><li fid=\"u5ffd975a\" data-lake-id=\"u6eb65025\" id=\"u6eb65025\"><span data-lake-id=\"u0ff7b416\" id=\"u0ff7b416\">将Plop模块作为项目开发依赖安装</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u8596f26f\" id=\"u8596f26f\"><span data-lake-id=\"u9dc9bc31\" id=\"u9dc9bc31\">在项目根目录下创建一个plopfile.js文件</span></li><li fid=\"u5ffd975a\" data-lake-id=\"u05d99019\" id=\"u05d99019\"><span data-lake-id=\"u0749f652\" id=\"u0749f652\">在plopfile.js文件中定义脚手架任务</span></li><li fid=\"u5ffd975a\" data-lake-id=\"uaa4745c1\" id=\"uaa4745c1\"><span data-lake-id=\"u1f9c54c0\" id=\"u1f9c54c0\">编写用于生成特定类型文件的模板</span></li><li fid=\"u5ffd975a\" data-lake-id=\"ud5c3be8a\" id=\"ud5c3be8a\"><span data-lake-id=\"u4c64d8f6\" id=\"u4c64d8f6\">通过Plop提供的CLI运行脚手架任务</span></li></ol><p data-lake-id=\"ee85b5bcf99f1e2988f97c5b711bcd34\" id=\"ee85b5bcf99f1e2988f97c5b711bcd34\"><br></p><h2 data-lake-id=\"bmH42\" id=\"bmH42\"><span data-lake-id=\"u5bd4c3e7\" id=\"u5bd4c3e7\">脚手架工作原理</span></h2><p data-lake-id=\"ufc46286c\" id=\"ufc46286c\"><span data-lake-id=\"ufa24ebd6\" id=\"ufa24ebd6\">脚手架启动后，会先询问用户一些问题，然后根据这些问题的答案，结合一些模版文件去自动生成项目结构。</span></p><p data-lake-id=\"45a1809166e515f21f299c74efed1e27\" id=\"45a1809166e515f21f299c74efed1e27\"><br></p><h2 data-lake-id=\"kzFtP\" id=\"kzFtP\"><span data-lake-id=\"u84bad02b\" id=\"u84bad02b\">自动化构建</span></h2><blockquote data-lake-id=\"u6fd49020\" id=\"u6fd49020\"><p data-lake-id=\"ub7e5f02f\" id=\"ub7e5f02f\"><span data-lake-id=\"u7e9be0b0\" id=\"u7e9be0b0\">一切重复工作本应该自动化。自动化：让机器代替手工；构建：将A转换为B。</span></p></blockquote><p data-lake-id=\"9a32ced10e6459e239a05a1a1e5df1bb\" id=\"9a32ced10e6459e239a05a1a1e5df1bb\"><span data-lake-id=\"uf529b7e4\" id=\"uf529b7e4\">将开发环境的源代码自动化构建为生产环境可运行的代码。一般我们把这个转换的过程称为自动化构建工作流，它的作用是尽可能脱离运行环境兼容带来的问题，在开发环境阶段使用一些提高效率的语法、规范和标准。</span></p><p data-lake-id=\"d18acf5af7787992ff284a698d01d418\" id=\"d18acf5af7787992ff284a698d01d418\"><br></p><p data-lake-id=\"2736b42029477f90d7bcd9cd0cf4929d\" id=\"2736b42029477f90d7bcd9cd0cf4929d\"><span data-lake-id=\"u294e7de4\" id=\"u294e7de4\">自动化构建将那些不被支持的『特性』，转换为能够直接运行的代码，我们在开发过程中就可以尽情使用提高效率的代码了。</span></p><p data-lake-id=\"96334d6e3c97e357fbf85c11c11ccd26\" id=\"96334d6e3c97e357fbf85c11c11ccd26\"><br></p><h2 data-lake-id=\"We1Dg\" id=\"We1Dg\"><span data-lake-id=\"uce2467ce\" id=\"uce2467ce\">NPM Scripts自动构建工作流</span></h2><p data-lake-id=\"u05daf93d\" id=\"u05daf93d\"><span data-lake-id=\"uc1dee9cc\" id=\"uc1dee9cc\">可以在package.json中定义一些与项目相关的构建命令，它是实现自动化构建工作流的最简方式。</span></p><p data-lake-id=\"u75895150\" id=\"u75895150\"><span data-lake-id=\"u493035c0\" id=\"u493035c0\">在启动serve之前构建项目：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22preserve%5C%22%3A%20%5C%22yarn%20build%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HwiWx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\" id=\"ceb43fc992dfef1cf3cfb8071bc7e12a\"><span data-lake-id=\"ua5a9349c\" id=\"ua5a9349c\">同时执行多个任务：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20add%20npm-run-all%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SkcZV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u390d0a26\" id=\"u390d0a26\"><span data-lake-id=\"ub13e0d6a\" id=\"ub13e0d6a\">然后在scripts中添加：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vQPuB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"30746ddfc4aee0df1a14a5759fbd2da0\" id=\"30746ddfc4aee0df1a14a5759fbd2da0\"><span data-lake-id=\"u16ae39d6\" id=\"u16ae39d6\">监听文件变化并重新编译，监听文件变化并自动热更新：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%2F%2F%20...%5Cn%5C%22scripts%5C%22%3A%20%7B%5Cn%5Ct%5C%22build%5C%22%3A%20%5C%22sass%20scss%2Fmain.scss%20css%2Fstyle.css%20--watch%5C%22%2C%5Cn%20%20%5C%22serve%5C%22%3A%20%5C%22browser-sync%20.%20--files%20%5C%5C%E2%80%9Ccss%2F*.css%5C%5C%5C%22%5C%22%2C%5Cn%20%20%5C%22start%5C%22%3A%20%5C%22run-p%20build%20serve%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22BTiLz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"924fbd896dfc87f378125e354a4653cd\" id=\"924fbd896dfc87f378125e354a4653cd\"><br></p><h2 data-lake-id=\"MTfJX\" id=\"MTfJX\"><span data-lake-id=\"u499bea89\" id=\"u499bea89\">常见的自动化构建工具</span></h2><blockquote data-lake-id=\"u2e8dadc2\" id=\"u2e8dadc2\"><p data-lake-id=\"077ede272d301418bbaba7486729e376\" id=\"077ede272d301418bbaba7486729e376\"><span data-lake-id=\"ubbab3705\" id=\"ubbab3705\">严格意义上来说，Webpack属于模块化打包工具，所以不归类在此处</span></p></blockquote><h3 data-lake-id=\"mUW98\" id=\"mUW98\"><span data-lake-id=\"u30b1b51f\" id=\"u30b1b51f\">Grunt</span></h3><p data-lake-id=\"ufef91aad\" id=\"ufef91aad\"><span data-lake-id=\"uc9638db0\" id=\"uc9638db0\">最早的前端构建系统，生态完善。因为它基于临时文件编译的，它在构建过程会对磁盘进行读写操作，所以构建速度会比较慢。例如它在工作时，上个插件将构建结果存储到一个临时文件中，下一个插件又会基于这个临时文件读取内容。如果处理的环节越多，那么对磁盘读写的次数也就会越多，也会更加耗时。</span></p><p data-lake-id=\"u5de15af5\" id=\"u5de15af5\"><br></p><h3 data-lake-id=\"Gvli3\" id=\"Gvli3\"><span data-lake-id=\"u100cd57c\" id=\"u100cd57c\">Gulp</span></h3><p data-lake-id=\"ua9d9c760\" id=\"ua9d9c760\"><span data-lake-id=\"u8710bd46\" id=\"u8710bd46\">对于文件读写都是在内存中完成的，所以相对于磁盘读写操作，它的速度更快。同时他也支持多个任务同时执行。它的使用方式比Grunt更简单，生态也很完善，是目前前端构建最流行的系统。</span></p><p data-lake-id=\"ud3041ade\" id=\"ud3041ade\"><br></p><h3 data-lake-id=\"c0d3i\" id=\"c0d3i\"><span data-lake-id=\"ubeea5e24\" id=\"ubeea5e24\">FIS</span></h3><p data-lake-id=\"u7282cedc\" id=\"u7282cedc\"><span data-lake-id=\"ud0645e9a\" id=\"ud0645e9a\">百度前端开源内部的构建系统，它把我们在项目中常见的需求都集成在内部了。例如资源加载、模块化开发、代码部署、性能优化。</span></p><p data-lake-id=\"u327bc84a\" id=\"u327bc84a\"><span data-lake-id=\"u0bd847d8\" id=\"u0bd847d8\">​</span><br></p><p data-lake-id=\"u8ac951e3\" id=\"u8ac951e3\"><br></p><p data-lake-id=\"u375590bd\" id=\"u375590bd\"><br></p><p data-lake-id=\"uf6653213\" id=\"uf6653213\"><br></p><p data-lake-id=\"u628e2d18\" id=\"u628e2d18\"><br></p><p data-lake-id=\"u61ca0a14\" id=\"u61ca0a14\"><br></p><p data-lake-id=\"u84a9f2af\" id=\"u84a9f2af\"><br></p><p data-lake-id=\"udc9acb9f\" id=\"udc9acb9f\"><br></p><p data-lake-id=\"u23533efc\" id=\"u23533efc\"><br></p><p data-lake-id=\"uf7120598\" id=\"uf7120598\"><br></p><p data-lake-id=\"u00128f39\" id=\"u00128f39\"><br></p><p data-lake-id=\"u16ba130f\" id=\"u16ba130f\"><br></p><p data-lake-id=\"u710f7f9f\" id=\"u710f7f9f\"><br></p><p data-lake-id=\"u66d7a1fe\" id=\"u66d7a1fe\"><br></p><p data-lake-id=\"u82dfb0b3\" id=\"u82dfb0b3\"><br></p><p data-lake-id=\"ue4c6d16f\" id=\"ue4c6d16f\"><br></p><p data-lake-id=\"u4a729b96\" id=\"u4a729b96\"><br></p><p data-lake-id=\"uf23cedb5\" id=\"uf23cedb5\"><br></p><p data-lake-id=\"99e89eccc910a5e2ae2e84c93d83ad4d\" id=\"99e89eccc910a5e2ae2e84c93d83ad4d\"><br></p><p data-lake-id=\"c6dbb935ccf191afd0f115adcd1c3681\" id=\"c6dbb935ccf191afd0f115adcd1c3681\"><br></p><p data-lake-id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\" id=\"a8582f2ac9018ff7fa6bb571e68e7a5e\"><br></p><p data-lake-id=\"c5d22b80c6cd657f1844c8fcb207b7f8\" id=\"c5d22b80c6cd657f1844c8fcb207b7f8\"><br></p><p data-lake-id=\"60d72f9f7aa1cf6553c00edc441f2fc5\" id=\"60d72f9f7aa1cf6553c00edc441f2fc5\"><br></p><p data-lake-id=\"807a0f067997266561dbadbcac84799d\" id=\"807a0f067997266561dbadbcac84799d\"><br></p><p data-lake-id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\" id=\"4e2b927e5d8c2a790a90d94d03ba8c4b\"><br></p><p data-lake-id=\"7b918194a737f5e23fe42f911e7b2f41\" id=\"7b918194a737f5e23fe42f911e7b2f41\"><br></p><p data-lake-id=\"6e415308ee3e17698f477ae2b17a36b3\" id=\"6e415308ee3e17698f477ae2b17a36b3\"><br></p><p data-lake-id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\" id=\"07f4015a0cd57b3971ab2c4f2db7b5e9\"><br></p><p data-lake-id=\"a93901365cafffe8b0094d5fc1649a2c\" id=\"a93901365cafffe8b0094d5fc1649a2c\"><br></p><p data-lake-id=\"b0dffc3ac245c3c336a8904992538e80\" id=\"b0dffc3ac245c3c336a8904992538e80\"><br></p><p data-lake-id=\"f9b156de99ec06197292f284ee10c9f5\" id=\"f9b156de99ec06197292f284ee10c9f5\"><br></p><p data-lake-id=\"4f63866ba6b48598c77497227be68e3e\" id=\"4f63866ba6b48598c77497227be68e3e\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T07:08:47.000Z",
    "deleted_at": null,
    "created_at": "2021-06-07T01:49:08.000Z",
    "updated_at": "2022-03-31T07:08:47.000Z",
    "published_at": "2022-03-31T07:08:47.000Z",
    "first_published_at": "2021-06-07T07:07:06.000Z",
    "word_count": 2917,
    "cover": null,
    "description": "在没有Node的远古时代，面对复杂的项目结构往往束手无策，即使采用变量模块化、等一些代码抽象的手段，还是不尽如人意。那么此时就有一个划时代的英雄出现了，它就是Node，如果说Ajax给前端能力范围带来了一次革命，那么Node也同样给前端工程化带来一次伟大的革命！工程化概述前端工程化是指遵循一定...",
    "custom_description": null,
    "hits": 13,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46070568,
    "slug": "cmdzmq",
    "title": "JS性能优化",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"i1eB3\"></a>\n## 内存管理\n内存为什么需要管理？<br />如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。\n\n- 内存：由可读写单元组成，表示一片可操作空间\n- 管理：人为的去操作一片空间的申请、使用和释放。\n- 内存管理: 开发者主动申请空间、使用空间、释放空间。\n- 管理流程:申请一使用一释放\n```javascript\n// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）\nlet obj = {}\n// 使用空间\nobj.name = 1\n// 释放空间\nobj = null\n```\n\n<a name=\"OWSFc\"></a>\n## JS中的垃圾回收\n对象在什么情况下会被视为垃圾？\n\n- JS中的垃圾回收是自动的\n- 当对象不再被引用时，被视为垃圾\n- 对象不能从根(全局执行上下文)上访问到时是垃圾\n```javascript\nlet obj = {name: 11} \nlet ali = obj\nobj = null // {name: 11} 被ali引用，不是一个垃圾\n```\n\n<a name=\"SJ4dA\"></a>\n## GC算法\nGC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。<br />那么什么样的东西可以被当作垃圾呢？\n\n- 程序中不再使用的对象\n- 程序中能再访问的对象\n\nGC算法：算法就是工作时查找和回收所遵循的规则。<br />常见的GC算法有：\n\n- 引用计数\n\n     判断对象的引用来决定是不是垃圾\n\n- 标记清除\n\n     给活动对象添加标记，来判断他是不是垃圾\n\n- 标记整理\n\n     类似标记清除\n\n- 分代回收\n\n<a name=\"a4eQ0\"></a>\n## 引用计数算法实现原理\n核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。\n\n当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。<br />引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。\n\n<a name=\"KSzgb\"></a>\n### 引用计数算法的优缺点\n<a name=\"NYKWp\"></a>\n#### 优点\n\n- 发现垃圾时立即回收\n\n如果引用为0就会立即进行回收、释放\n\n- 最大限度减少程序暂停\n\n由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。\n\n<a name=\"JQ2ki\"></a>\n#### 缺点\n\n- 无法回收循环引用的对象\n```javascript\nfunction fn() {\n\tconst obj1 = {}\n  const obj2 = {}\n  // 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了\n  // 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。\n  obj1.name = obj2\n  obj2.name = obj1\n  \n  return 'ok'\n}\nfn() // 当函数执行完毕，会释放里面的空间\n```\n\n- 时间开销大\n\n需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点\n\n<a name=\"l6fT2\"></a>\n## 标记清除算法实现原理\n> 标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。\n\n核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。\n<a name=\"ZuPlu\"></a>\n### 标记清除算法的优缺点\n<a name=\"MDeW8\"></a>\n#### 优点\n\n- 解决了引用计数算法中对象循环引用无法回收的问题\n\n标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。\n<a name=\"sXQJL\"></a>\n#### 缺点\n\n- 不会立即回收对象\n\n       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。\n\n- 空间碎片化\n\n回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。\n\n<a name=\"CcfMF\"></a>\n## 标记整理算法实现原理\n> 和标记清除算法一样，标记整理算法在V8也被频繁使用\n\n标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。\n\n但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。\n\n这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。\n\n<a name=\"hPlDu\"></a>\n### 标记整理算法优缺点\n<a name=\"x4mSu\"></a>\n#### 优点\n减少碎片化空间\n<a name=\"eMzeK\"></a>\n#### 缺点\n不会立即回收垃圾对象\n\n<a name=\"kkh47\"></a>\n## V8\nV8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。<br />V8内存的上限设定：64位1.5G   32位800M\n<a name=\"pazTz\"></a>\n### V8垃圾回收策略\n采用分代回收的思想，把内存空间按照一定的规则分为两类，**新生代**存储区和**老生代**存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg)\n\n<a name=\"nfYoM\"></a>\n### V8中常用的GC算法\n\n- 分代回收\n- 空间复制\n- 标记清除\n- 标记整理\n- 标记增量\n<a name=\"yplWV\"></a>\n### V8如何回收新生代对象\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png#crop=0&crop=0&crop=1&crop=1&height=89&id=ubca4cc3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12542&status=done&style=shadow&title=&width=749)<br />如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；<br />**新生代指的是存活时间较短的对象**。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。<br />那么，V8是如何完成新生代对象回收的呢？\n<a name=\"f2HMO\"></a>\n#### 新生代对象回收实现\n回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。\n<a name=\"ChXnK\"></a>\n#### 回收细节\n如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生**晋升**的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。<br />判断是否晋升的条件有以下几个：\n\n- 经过一轮GC还存活的新生代对象需要晋升\n\n如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。\n\n- 在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。\n\nTo空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。\n\n<a name=\"qM202\"></a>\n### V8如何回收老生代对象\n如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。\n<a name=\"BOoO7\"></a>\n### 老生代对象回收实现\n主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。\n<a name=\"UN1OR\"></a>\n#### 新老代细节对比\n新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。\n\n<a name=\"wyMkD\"></a>\n## 标记增量如何优化垃圾回收\n当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。\n",
    "body_draft": "<a name=\"i1eB3\"></a>\n## 内存管理\n内存为什么需要管理？<br />如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。\n\n- 内存：由可读写单元组成，表示一片可操作空间\n- 管理：人为的去操作一片空间的申请、使用和释放。\n- 内存管理: 开发者主动申请空间、使用空间、释放空间。\n- 管理流程:申请一使用一释放\n```javascript\n// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）\nlet obj = {}\n// 使用空间\nobj.name = 1\n// 释放空间\nobj = null\n```\n\n<a name=\"OWSFc\"></a>\n## JS中的垃圾回收\n对象在什么情况下会被视为垃圾？\n\n- JS中的垃圾回收是自动的\n- 当对象不再被引用时，被视为垃圾\n- 对象不能从根(全局执行上下文)上访问到时是垃圾\n```javascript\nlet obj = {name: 11} \nlet ali = obj\nobj = null // {name: 11} 被ali引用，不是一个垃圾\n```\n\n<a name=\"SJ4dA\"></a>\n## GC算法\nGC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。<br />那么什么样的东西可以被当作垃圾呢？\n\n- 程序中不再使用的对象\n- 程序中能再访问的对象\n\nGC算法：算法就是工作时查找和回收所遵循的规则。<br />常见的GC算法有：\n\n- 引用计数\n\n     判断对象的引用来决定是不是垃圾\n\n- 标记清除\n\n     给活动对象添加标记，来判断他是不是垃圾\n\n- 标记整理\n\n     类似标记清除\n\n- 分代回收\n\n<a name=\"a4eQ0\"></a>\n## 引用计数算法实现原理\n核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。\n\n当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。<br />引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。\n\n<a name=\"KSzgb\"></a>\n### 引用计数算法的优缺点\n<a name=\"NYKWp\"></a>\n#### 优点\n\n- 发现垃圾时立即回收\n\n如果引用为0就会立即进行回收、释放\n\n- 最大限度减少程序暂停\n\n由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。\n\n<a name=\"JQ2ki\"></a>\n#### 缺点\n\n- 无法回收循环引用的对象\n```javascript\nfunction fn() {\n\tconst obj1 = {}\n  const obj2 = {}\n  // 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了\n  // 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。\n  obj1.name = obj2\n  obj2.name = obj1\n  \n  return 'ok'\n}\nfn() // 当函数执行完毕，会释放里面的空间\n```\n\n- 时间开销大\n\n需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点\n\n<a name=\"l6fT2\"></a>\n## 标记清除算法实现原理\n> 标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。\n\n核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。\n<a name=\"ZuPlu\"></a>\n### 标记清除算法的优缺点\n<a name=\"MDeW8\"></a>\n#### 优点\n\n- 解决了引用计数算法中对象循环引用无法回收的问题\n\n标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。\n<a name=\"sXQJL\"></a>\n#### 缺点\n\n- 不会立即回收对象\n\n       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。\n\n- 空间碎片化\n\n回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。\n\n<a name=\"CcfMF\"></a>\n## 标记整理算法实现原理\n> 和标记清除算法一样，标记整理算法在V8也被频繁使用\n\n标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。\n\n但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。\n\n这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。\n\n<a name=\"hPlDu\"></a>\n### 标记整理算法优缺点\n<a name=\"x4mSu\"></a>\n#### 优点\n减少碎片化空间\n<a name=\"eMzeK\"></a>\n#### 缺点\n不会立即回收垃圾对象\n\n<a name=\"kkh47\"></a>\n## V8\nV8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。<br />V8内存的上限设定：64位1.5G   32位800M\n<a name=\"pazTz\"></a>\n### V8垃圾回收策略\n采用分代回收的思想，把内存空间按照一定的规则分为两类，**新生代**存储区和**老生代**存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg)\n\n<a name=\"nfYoM\"></a>\n### V8中常用的GC算法\n\n- 分代回收\n- 空间复制\n- 标记清除\n- 标记整理\n- 标记增量\n<a name=\"yplWV\"></a>\n### V8如何回收新生代对象\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png#crop=0&crop=0&crop=1&crop=1&height=89&id=ubca4cc3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12542&status=done&style=shadow&title=&width=749)<br />如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；<br />**新生代指的是存活时间较短的对象**。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。<br />那么，V8是如何完成新生代对象回收的呢？\n<a name=\"f2HMO\"></a>\n#### 新生代对象回收实现\n回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。\n<a name=\"ChXnK\"></a>\n#### 回收细节\n如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生**晋升**的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。<br />判断是否晋升的条件有以下几个：\n\n- 经过一轮GC还存活的新生代对象需要晋升\n\n如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。\n\n- 在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。\n\nTo空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。\n\n<a name=\"qM202\"></a>\n### V8如何回收老生代对象\n如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。\n<a name=\"BOoO7\"></a>\n### 老生代对象回收实现\n主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。\n<a name=\"UN1OR\"></a>\n#### 新老代细节对比\n新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。\n\n<a name=\"wyMkD\"></a>\n## 标记增量如何优化垃圾回收\n当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h2 id=\"i1eB3\"><span class=\"ne-text\">内存管理</span></h2><p id=\"3ed4a301309484107f017d569b990dd1\" class=\"ne-p\"><span class=\"ne-text\">内存为什么需要管理？</span></p><p id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" class=\"ne-p\"><span class=\"ne-text\">如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span><span class=\"ne-text\" style=\"color: var(--color-prettylights-syntax-comment)\"></span></p><ul class=\"ne-ul\"><li id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span class=\"ne-text\">内存：由可读写单元组成，表示一片可操作空间</span></li><li id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span class=\"ne-text\">管理：人为的去操作一片空间的申请、使用和释放。</span></li><li id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span class=\"ne-text\">内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li id=\"3dd0a478e0ac8848f92a72dc70441467\"><span class=\"ne-text\">管理流程:申请一使用一释放</span></li></ul><pre data-language=\"javascript\" id=\"lOC05\" class=\"ne-codeblock language-javascript\">// 申请空间（由于JavaScript没有提供相关api，我们只能通过JS执行引擎，遇到变量定义的时候，自动去申请空间）\nlet obj = {}\n// 使用空间\nobj.name = 1\n// 释放空间\nobj = null</pre><p id=\"b0081576b73a0fd9875ea9d6235b58a7\" class=\"ne-p\"><br></p><h2 id=\"OWSFc\"><span class=\"ne-text\">JS中的垃圾回收</span></h2><p id=\"u999b7739\" class=\"ne-p\"><span class=\"ne-text\">对象在什么情况下会被视为垃圾？</span></p><ul class=\"ne-ul\"><li id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span class=\"ne-text\">JS中的垃圾回收是自动的</span></li><li id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span class=\"ne-text\">当对象不再被引用时，被视为垃圾</span></li><li id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span class=\"ne-text\">对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><pre data-language=\"javascript\" id=\"HWLSc\" class=\"ne-codeblock language-javascript\">let obj = {name: 11} \nlet ali = obj\nobj = null // {name: 11} 被ali引用，不是一个垃圾</pre><p id=\"744a212f9e7d0ca5bf8db2d102991b55\" class=\"ne-p\"><br></p><h2 id=\"SJ4dA\"><span class=\"ne-text\">GC算法</span></h2><p id=\"ab4d248ed5019a210126e0c8c16f4bbf\" class=\"ne-p\"><span class=\"ne-text\">GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" class=\"ne-p\"><span class=\"ne-text\">那么什么样的东西可以被当作垃圾呢？</span></p><ul class=\"ne-ul\"><li id=\"a6ff021f080f8cc705e48cb4517b1492\"><span class=\"ne-text\">程序中不再使用的对象</span></li><li id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span class=\"ne-text\">程序中能再访问的对象</span></li></ul><p id=\"411f9a0e735a919d55003880da3bd660\" class=\"ne-p\"><span class=\"ne-text\">GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p id=\"8798931f20afa627222e13ef6c35359b\" class=\"ne-p\"><span class=\"ne-text\">常见的GC算法有：</span></p><ul class=\"ne-ul\"><li id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span class=\"ne-text\">引用计数</span></li></ul><p id=\"98731bd03a205e78a79da038ba1045a8\" class=\"ne-p\"><span class=\"ne-text\">     判断对象的引用来决定是不是垃圾</span></p><ul class=\"ne-ul\"><li id=\"c425fbcbd3e712658fccd70b64f7d877\"><span class=\"ne-text\">标记清除</span></li></ul><p id=\"48fd1e6ab75d04887058f1b595603458\" class=\"ne-p\"><span class=\"ne-text\">     给活动对象添加标记，来判断他是不是垃圾</span></p><ul class=\"ne-ul\"><li id=\"97d2b53baa97ae25f5357791db807563\"><span class=\"ne-text\">标记整理</span></li></ul><p id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" class=\"ne-p\"><span class=\"ne-text\">     类似标记清除</span></p><ul class=\"ne-ul\"><li id=\"d17f0a5311a8746763290ba5074f7b80\"><span class=\"ne-text\">分代回收</span></li></ul><p id=\"77511a1169f5d183b2ef7207363ccbaa\" class=\"ne-p\"><br></p><h2 id=\"a4eQ0\"><span class=\"ne-text\">引用计数算法实现原理</span></h2><p id=\"ebcf02bb5e61ef0dd4f012c200870762\" class=\"ne-p\"><span class=\"ne-text\">核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p id=\"ucc3bdc85\" class=\"ne-p\"><br></p><p id=\"180498aa3cae6ce1130ab6ac43da55c6\" class=\"ne-p\"><span class=\"ne-text\">当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p id=\"u902d73f2\" class=\"ne-p\"><span class=\"ne-text\">引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p id=\"uae16e0aa\" class=\"ne-p\"><br></p><h3 id=\"KSzgb\"><span class=\"ne-text\">引用计数算法的优缺点</span></h3><h4 id=\"NYKWp\"><span class=\"ne-text\">优点</span></h4><ul class=\"ne-ul\"><li id=\"ube1b554e\"><span class=\"ne-text\">发现垃圾时立即回收</span></li></ul><p id=\"u6f712f22\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">如果引用为0就会立即进行回收、释放</span></p><ul class=\"ne-ul\"><li id=\"udc2e1992\"><span class=\"ne-text\">最大限度减少程序暂停</span></li></ul><p id=\"ue027de04\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p id=\"ua7150238\" class=\"ne-p\" style=\"text-indent: 2em\"><br></p><h4 id=\"JQ2ki\"><span class=\"ne-text\">缺点</span></h4><ul class=\"ne-ul\"><li id=\"uac835717\"><span class=\"ne-text\">无法回收循环引用的对象</span></li></ul><pre data-language=\"javascript\" id=\"u84h9\" class=\"ne-codeblock language-javascript\">function fn() {\n\tconst obj1 = {}\n  const obj2 = {}\n  // 在全局上下文中，没有使用到这两个对象了，他们已经可以被回收了\n  // 但是由于这两个对象相互循环引用，在使用引用计数算法时，他仍然还是有引用并且不为0，因此GC无法对其回收。\n  obj1.name = obj2\n  obj2.name = obj1\n  \n  return 'ok'\n}\nfn() // 当函数执行完毕，会释放里面的空间</pre><ul class=\"ne-ul\"><li id=\"ud3c4ce49\"><span class=\"ne-text\">时间开销大</span></li></ul><p id=\"ude675e9f\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p id=\"ue7480f80\" class=\"ne-p\" style=\"text-indent: 2em\"><br></p><h2 id=\"l6fT2\"><span class=\"ne-text\">标记清除算法实现原理</span></h2><div class=\"ne-quote\"><p id=\"uea79233d\" class=\"ne-p\"><span class=\"ne-text\">标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></div><p id=\"u47c36318\" class=\"ne-p\"><span class=\"ne-text\">核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 id=\"ZuPlu\"><span class=\"ne-text\">标记清除算法的优缺点</span></h3><h4 id=\"MDeW8\"><span class=\"ne-text\">优点</span></h4><ul class=\"ne-ul\"><li id=\"u1f059613\"><span class=\"ne-text\">解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p id=\"u4ea8692f\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 id=\"sXQJL\"><span class=\"ne-text\">缺点</span></h4><ul class=\"ne-ul\"><li id=\"u5d173730\"><span class=\"ne-text\">不会立即回收对象</span></li></ul><p id=\"c196c8cd1b1c3af12971cc33a795c11f\" class=\"ne-p\"><span class=\"ne-text\">       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul class=\"ne-ul\"><li id=\"c66739eb16ad7259c0f8c6266f067a18\"><span class=\"ne-text\">空间碎片化</span></li></ul><p id=\"u35c36092\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p id=\"3e4e66ed660724cc8561b95418fe4194\" class=\"ne-p\"><br></p><h2 id=\"CcfMF\"><span class=\"ne-text\">标记整理算法实现原理</span></h2><div class=\"ne-quote\"><p id=\"u4ef6d3db\" class=\"ne-p\"><span class=\"ne-text\">和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></div><p id=\"1210fe16630370d68dc58f767d5f064a\" class=\"ne-p\"><span class=\"ne-text\">标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p id=\"7ea118596bad803afe4343db54d62fac\" class=\"ne-p\"><br></p><p id=\"e6ec6769e8dddc37df070278172754a2\" class=\"ne-p\"><span class=\"ne-text\">但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p id=\"4e60332e04d2aedeb479c71764b2f763\" class=\"ne-p\"><br></p><p id=\"c64cc78c8b336099f356cc72e10e6b69\" class=\"ne-p\"><span class=\"ne-text\">这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p id=\"10da3079833c154f76295ef3264ba8fc\" class=\"ne-p\"><br></p><h3 id=\"hPlDu\"><span class=\"ne-text\">标记整理算法优缺点</span></h3><h4 id=\"x4mSu\"><span class=\"ne-text\">优点</span></h4><p id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" class=\"ne-p\"><span class=\"ne-text\">减少碎片化空间</span></p><h4 id=\"eMzeK\"><span class=\"ne-text\">缺点</span></h4><p id=\"18f8cbb8e47a4bd5092de7dccfed182b\" class=\"ne-p\"><span class=\"ne-text\">不会立即回收垃圾对象</span></p><p id=\"df7f29a51628e2757fb1455d7100be71\" class=\"ne-p\"><br></p><h2 id=\"kkh47\"><span class=\"ne-text\">V8</span></h2><p id=\"b201485eb2f8942dec72d83b9f9850f3\" class=\"ne-p\"><span class=\"ne-text\">V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" class=\"ne-p\"><span class=\"ne-text\">V8内存的上限设定：64位1.5G   32位800M</span></p><h3 id=\"pazTz\"><span class=\"ne-text\">V8垃圾回收策略</span></h3><p id=\"u9c685dac\" class=\"ne-p\"><span class=\"ne-text\">采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span class=\"ne-text\">新生代</span></strong><span class=\"ne-text\">存储区和</span><strong><span class=\"ne-text\">老生代</span></strong><span class=\"ne-text\">存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg\" id=\"ol4HT\" style=\"display: block; width: 100%\"><p id=\"06e4b36b0241a2becc72994d2292356c\" class=\"ne-p\"><br></p><h3 id=\"nfYoM\"><span class=\"ne-text\">V8中常用的GC算法</span></h3><ul class=\"ne-ul\"><li id=\"u04b5b087\"><span class=\"ne-text\">分代回收</span></li><li id=\"u9084b809\"><span class=\"ne-text\">空间复制</span></li><li id=\"udb480781\"><span class=\"ne-text\">标记清除</span></li><li id=\"u9209e5b2\"><span class=\"ne-text\">标记整理</span></li><li id=\"ub48e7a64\"><span class=\"ne-text\">标记增量</span></li></ul><h3 id=\"yplWV\"><span class=\"ne-text\">V8如何回收新生代对象</span></h3><p id=\"ucb62e279\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1429353/1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png\" width=\"749\" id=\"ubca4cc3b\" class=\"ne-image\"></p><p id=\"ub4e6f2f7\" class=\"ne-p\"><span class=\"ne-text\">如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p id=\"ub7fcb526\" class=\"ne-p\"><strong><span class=\"ne-text\">新生代指的是存活时间较短的对象</span></strong><span class=\"ne-text\">。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p id=\"u6462d8cf\" class=\"ne-p\"><span class=\"ne-text\">那么，V8是如何完成新生代对象回收的呢？</span></p><h4 id=\"f2HMO\"><span class=\"ne-text\">新生代对象回收实现</span></h4><p id=\"u0edc7469\" class=\"ne-p\"><span class=\"ne-text\">回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 id=\"ChXnK\"><span class=\"ne-text\">回收细节</span></h4><p id=\"u2a6a5439\" class=\"ne-p\"><span class=\"ne-text\">如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span class=\"ne-text\">晋升</span></strong><span class=\"ne-text\">的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p id=\"u6f89bcf8\" class=\"ne-p\"><span class=\"ne-text\">判断是否晋升的条件有以下几个：</span></p><ul class=\"ne-ul\"><li id=\"uc587a861\"><span class=\"ne-text\">经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p id=\"ue13d4ee4\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul class=\"ne-ul\"><li id=\"ue5e2206a\"><span class=\"ne-text\">在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p id=\"u1cc36f07\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p id=\"u2e97449b\" class=\"ne-p\" style=\"text-indent: 2em\"><br></p><h3 id=\"qM202\"><span class=\"ne-text\">V8如何回收老生代对象</span></h3><p id=\"da1723261339c23350c949641abbe4cf\" class=\"ne-p\"><span class=\"ne-text\">如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 id=\"BOoO7\"><span class=\"ne-text\">老生代对象回收实现</span></h3><p id=\"9a3270127d0f0fc475d5faa883e4bdb2\" class=\"ne-p\"><span class=\"ne-text\">主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 id=\"UN1OR\"><span class=\"ne-text\">新老代细节对比</span></h4><p id=\"ea1437ffcfb5ee946525ad5611952daf\" class=\"ne-p\"><span class=\"ne-text\">新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p id=\"73715c27eeed9d41f97645118fb3a358\" class=\"ne-p\"><br></p><h2 id=\"wyMkD\"><span class=\"ne-text\">标记增量如何优化垃圾回收</span></h2><p id=\"2bdebdbb7be7635c016ca00a3388a500\" class=\"ne-p\"><span class=\"ne-text\">当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"i1eB3\" id=\"i1eB3\"><span data-lake-id=\"u455f6cdb\" id=\"u455f6cdb\">内存管理</span></h2><p data-lake-id=\"3ed4a301309484107f017d569b990dd1\" id=\"3ed4a301309484107f017d569b990dd1\"><span data-lake-id=\"uc0f00c8f\" id=\"uc0f00c8f\">内存为什么需要管理？</span></p><p data-lake-id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\"><span data-lake-id=\"uf79d42d1\" id=\"uf79d42d1\">如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span><span data-lake-id=\"udbbb3f06\" id=\"udbbb3f06\" style=\"color: var(--color-prettylights-syntax-comment)\">​</span></p><ul list=\"udf8bec21\"><li fid=\"uee682c52\" data-lake-id=\"07052ad7077ff4dada3d15e4873d8ea3\" id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span data-lake-id=\"u14712ac9\" id=\"u14712ac9\">内存：由可读写单元组成，表示一片可操作空间</span></li><li fid=\"uee682c52\" data-lake-id=\"b7d5e3e6908181dfb13659ca5a3fe959\" id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span data-lake-id=\"ucba96c17\" id=\"ucba96c17\">管理：人为的去操作一片空间的申请、使用和释放。</span></li><li fid=\"uee682c52\" data-lake-id=\"8c38107ab08c5bcdf03e8009cccc7f14\" id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span data-lake-id=\"u6ca9cfeb\" id=\"u6ca9cfeb\">内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li fid=\"uee682c52\" data-lake-id=\"3dd0a478e0ac8848f92a72dc70441467\" id=\"3dd0a478e0ac8848f92a72dc70441467\"><span data-lake-id=\"u79fcfda0\" id=\"u79fcfda0\">管理流程:申请一使用一释放</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%88%E7%94%B1%E4%BA%8EJavaScript%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%85%B3api%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87JS%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%EF%BC%8C%E9%81%87%E5%88%B0%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8E%BB%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%89%5Cnlet%20obj%20%3D%20%7B%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E9%97%B4%5Cnobj.name%20%3D%201%5Cn%2F%2F%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%5Cnobj%20%3D%20null%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lOC05%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b0081576b73a0fd9875ea9d6235b58a7\" id=\"b0081576b73a0fd9875ea9d6235b58a7\"><br></p><h2 data-lake-id=\"OWSFc\" id=\"OWSFc\"><span data-lake-id=\"ud81625d2\" id=\"ud81625d2\">JS中的垃圾回收</span></h2><p data-lake-id=\"u999b7739\" id=\"u999b7739\"><span data-lake-id=\"ue02f492a\" id=\"ue02f492a\">对象在什么情况下会被视为垃圾？</span></p><ul list=\"uad3fa9ca\"><li fid=\"uee8d793e\" data-lake-id=\"c8113a1d1919a06f9087fb06f9d64dc3\" id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span data-lake-id=\"udce929b5\" id=\"udce929b5\">JS中的垃圾回收是自动的</span></li><li fid=\"uee8d793e\" data-lake-id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\" id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span data-lake-id=\"ufc902595\" id=\"ufc902595\">当对象不再被引用时，被视为垃圾</span></li><li fid=\"uee8d793e\" data-lake-id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\" id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span data-lake-id=\"u409765b5\" id=\"u409765b5\">对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj%20%3D%20%7Bname%3A%2011%7D%20%5Cnlet%20ali%20%3D%20obj%5Cnobj%20%3D%20null%20%2F%2F%20%7Bname%3A%2011%7D%20%E8%A2%ABali%E5%BC%95%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9E%83%E5%9C%BE%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__height%22%3A103%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HWLSc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A103%7D\"></card><p data-lake-id=\"744a212f9e7d0ca5bf8db2d102991b55\" id=\"744a212f9e7d0ca5bf8db2d102991b55\"><br></p><h2 data-lake-id=\"SJ4dA\" id=\"SJ4dA\"><span data-lake-id=\"u5b18c11f\" id=\"u5b18c11f\">GC算法</span></h2><p data-lake-id=\"ab4d248ed5019a210126e0c8c16f4bbf\" id=\"ab4d248ed5019a210126e0c8c16f4bbf\"><span data-lake-id=\"u0dfce60d\" id=\"u0dfce60d\">GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p data-lake-id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" id=\"e30385dfe8aee2e067f087a9a3a3c4b7\"><span data-lake-id=\"u4ebb5f76\" id=\"u4ebb5f76\">那么什么样的东西可以被当作垃圾呢？</span></p><ul list=\"ua530603c\"><li fid=\"u9a06217b\" data-lake-id=\"a6ff021f080f8cc705e48cb4517b1492\" id=\"a6ff021f080f8cc705e48cb4517b1492\"><span data-lake-id=\"u3aa2a7cb\" id=\"u3aa2a7cb\">程序中不再使用的对象</span></li><li fid=\"u9a06217b\" data-lake-id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\" id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span data-lake-id=\"u98a3598c\" id=\"u98a3598c\">程序中能再访问的对象</span></li></ul><p data-lake-id=\"411f9a0e735a919d55003880da3bd660\" id=\"411f9a0e735a919d55003880da3bd660\"><span data-lake-id=\"ue1ca21f6\" id=\"ue1ca21f6\">GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p data-lake-id=\"8798931f20afa627222e13ef6c35359b\" id=\"8798931f20afa627222e13ef6c35359b\"><span data-lake-id=\"ub55c8b70\" id=\"ub55c8b70\">常见的GC算法有：</span></p><ul list=\"u684b1b9b\"><li fid=\"u9dc99901\" data-lake-id=\"93c8b99bf0f41485690d7eb7cccca1ba\" id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span data-lake-id=\"ua6ae21f6\" id=\"ua6ae21f6\">引用计数</span></li></ul><p data-lake-id=\"98731bd03a205e78a79da038ba1045a8\" id=\"98731bd03a205e78a79da038ba1045a8\"><span data-lake-id=\"u708eed36\" id=\"u708eed36\">     判断对象的引用来决定是不是垃圾</span></p><ul list=\"u63a23d49\"><li fid=\"u6251f742\" data-lake-id=\"c425fbcbd3e712658fccd70b64f7d877\" id=\"c425fbcbd3e712658fccd70b64f7d877\"><span data-lake-id=\"uba85ef8c\" id=\"uba85ef8c\">标记清除</span></li></ul><p data-lake-id=\"48fd1e6ab75d04887058f1b595603458\" id=\"48fd1e6ab75d04887058f1b595603458\"><span data-lake-id=\"u5e432131\" id=\"u5e432131\">     给活动对象添加标记，来判断他是不是垃圾</span></p><ul list=\"u8fe5d66a\"><li fid=\"u738e5f4e\" data-lake-id=\"97d2b53baa97ae25f5357791db807563\" id=\"97d2b53baa97ae25f5357791db807563\"><span data-lake-id=\"u71275ee8\" id=\"u71275ee8\">标记整理</span></li></ul><p data-lake-id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" id=\"eb2b7fbe2867cde5cec64a59db0abbdb\"><span data-lake-id=\"u051de77b\" id=\"u051de77b\">     类似标记清除</span></p><ul list=\"ucde65fcc\"><li fid=\"uc73785d6\" data-lake-id=\"d17f0a5311a8746763290ba5074f7b80\" id=\"d17f0a5311a8746763290ba5074f7b80\"><span data-lake-id=\"uee1163a1\" id=\"uee1163a1\">分代回收</span></li></ul><p data-lake-id=\"77511a1169f5d183b2ef7207363ccbaa\" id=\"77511a1169f5d183b2ef7207363ccbaa\"><br></p><h2 data-lake-id=\"a4eQ0\" id=\"a4eQ0\"><span data-lake-id=\"u83e5167a\" id=\"u83e5167a\">引用计数算法实现原理</span></h2><p data-lake-id=\"ebcf02bb5e61ef0dd4f012c200870762\" id=\"ebcf02bb5e61ef0dd4f012c200870762\"><span data-lake-id=\"uedb833be\" id=\"uedb833be\">核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p data-lake-id=\"ucc3bdc85\" id=\"ucc3bdc85\"><br></p><p data-lake-id=\"180498aa3cae6ce1130ab6ac43da55c6\" id=\"180498aa3cae6ce1130ab6ac43da55c6\"><span data-lake-id=\"u5d96e48b\" id=\"u5d96e48b\">当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p data-lake-id=\"u902d73f2\" id=\"u902d73f2\"><span data-lake-id=\"u68d4c947\" id=\"u68d4c947\">引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p data-lake-id=\"uae16e0aa\" id=\"uae16e0aa\"><br></p><h3 data-lake-id=\"KSzgb\" id=\"KSzgb\"><span data-lake-id=\"udb3854a7\" id=\"udb3854a7\">引用计数算法的优缺点</span></h3><h4 data-lake-id=\"NYKWp\" id=\"NYKWp\"><span data-lake-id=\"uf3c5dd30\" id=\"uf3c5dd30\">优点</span></h4><ul list=\"uadd5863d\"><li fid=\"u5ec03fa9\" data-lake-id=\"ube1b554e\" id=\"ube1b554e\"><span data-lake-id=\"uf0d3c3ed\" id=\"uf0d3c3ed\">发现垃圾时立即回收</span></li></ul><p data-lake-id=\"u6f712f22\" id=\"u6f712f22\" style=\"text-indent: 2em\"><span data-lake-id=\"u64eb366c\" id=\"u64eb366c\">如果引用为0就会立即进行回收、释放</span></p><ul list=\"u43fc13f1\"><li fid=\"u68d6a0d7\" data-lake-id=\"udc2e1992\" id=\"udc2e1992\"><span data-lake-id=\"u8c5f3250\" id=\"u8c5f3250\">最大限度减少程序暂停</span></li></ul><p data-lake-id=\"ue027de04\" id=\"ue027de04\" style=\"text-indent: 2em\"><span data-lake-id=\"uadabb625\" id=\"uadabb625\">由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p data-lake-id=\"ua7150238\" id=\"ua7150238\" style=\"text-indent: 2em\"><br></p><h4 data-lake-id=\"JQ2ki\" id=\"JQ2ki\"><span data-lake-id=\"uf9e515ad\" id=\"uf9e515ad\">缺点</span></h4><ul list=\"u4fb864bc\"><li fid=\"u23068e42\" data-lake-id=\"uac835717\" id=\"uac835717\"><span data-lake-id=\"u8ba40071\" id=\"u8ba40071\">无法回收循环引用的对象</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20fn()%20%7B%5Cn%5Ctconst%20obj1%20%3D%20%7B%7D%5Cn%20%20const%20obj2%20%3D%20%7B%7D%5Cn%20%20%2F%2F%20%E5%9C%A8%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E5%88%B0%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E4%BB%96%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86%5Cn%20%20%2F%2F%20%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95%E6%97%B6%EF%BC%8C%E4%BB%96%E4%BB%8D%E7%84%B6%E8%BF%98%E6%98%AF%E6%9C%89%E5%BC%95%E7%94%A8%E5%B9%B6%E4%B8%94%E4%B8%8D%E4%B8%BA0%EF%BC%8C%E5%9B%A0%E6%AD%A4GC%E6%97%A0%E6%B3%95%E5%AF%B9%E5%85%B6%E5%9B%9E%E6%94%B6%E3%80%82%5Cn%20%20obj1.name%20%3D%20obj2%5Cn%20%20obj2.name%20%3D%20obj1%5Cn%20%20%5Cn%20%20return%20'ok'%5Cn%7D%5Cnfn()%20%2F%2F%20%E5%BD%93%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E4%BC%9A%E9%87%8A%E6%94%BE%E9%87%8C%E9%9D%A2%E7%9A%84%E7%A9%BA%E9%97%B4%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u84h9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u0ee5e3ea\"><li fid=\"u46c67728\" data-lake-id=\"ud3c4ce49\" id=\"ud3c4ce49\"><span data-lake-id=\"ue819314e\" id=\"ue819314e\">时间开销大</span></li></ul><p data-lake-id=\"ude675e9f\" id=\"ude675e9f\" style=\"text-indent: 2em\"><span data-lake-id=\"udf58f694\" id=\"udf58f694\">需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p data-lake-id=\"ue7480f80\" id=\"ue7480f80\" style=\"text-indent: 2em\"><br></p><h2 data-lake-id=\"l6fT2\" id=\"l6fT2\"><span data-lake-id=\"u09810861\" id=\"u09810861\">标记清除算法实现原理</span></h2><blockquote data-lake-id=\"uf53e7b68\" id=\"uf53e7b68\"><p data-lake-id=\"uea79233d\" id=\"uea79233d\"><span data-lake-id=\"u8802bdb3\" id=\"u8802bdb3\">标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></blockquote><p data-lake-id=\"u47c36318\" id=\"u47c36318\"><span data-lake-id=\"uc4fd5cf9\" id=\"uc4fd5cf9\">核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 data-lake-id=\"ZuPlu\" id=\"ZuPlu\"><span data-lake-id=\"u5a9a275a\" id=\"u5a9a275a\">标记清除算法的优缺点</span></h3><h4 data-lake-id=\"MDeW8\" id=\"MDeW8\"><span data-lake-id=\"ue3950982\" id=\"ue3950982\">优点</span></h4><ul list=\"u7036e34b\"><li fid=\"u4547751f\" data-lake-id=\"u1f059613\" id=\"u1f059613\"><span data-lake-id=\"u5975907a\" id=\"u5975907a\">解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p data-lake-id=\"u4ea8692f\" id=\"u4ea8692f\" style=\"text-indent: 2em\"><span data-lake-id=\"u80b63d60\" id=\"u80b63d60\">标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 data-lake-id=\"sXQJL\" id=\"sXQJL\"><span data-lake-id=\"u45600ed2\" id=\"u45600ed2\">缺点</span></h4><ul list=\"ub25df2fd\"><li fid=\"ufafaf7d8\" data-lake-id=\"u5d173730\" id=\"u5d173730\"><span data-lake-id=\"uba480768\" id=\"uba480768\">不会立即回收对象</span></li></ul><p data-lake-id=\"c196c8cd1b1c3af12971cc33a795c11f\" id=\"c196c8cd1b1c3af12971cc33a795c11f\"><span data-lake-id=\"u0bdaf98e\" id=\"u0bdaf98e\">       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul list=\"ucaa137f8\"><li fid=\"u5fe0109e\" data-lake-id=\"c66739eb16ad7259c0f8c6266f067a18\" id=\"c66739eb16ad7259c0f8c6266f067a18\"><span data-lake-id=\"u419c0cb8\" id=\"u419c0cb8\">空间碎片化</span></li></ul><p data-lake-id=\"u35c36092\" id=\"u35c36092\" style=\"text-indent: 2em\"><span data-lake-id=\"ue22a6a7a\" id=\"ue22a6a7a\">回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p data-lake-id=\"3e4e66ed660724cc8561b95418fe4194\" id=\"3e4e66ed660724cc8561b95418fe4194\"><br></p><h2 data-lake-id=\"CcfMF\" id=\"CcfMF\"><span data-lake-id=\"u9e5a8612\" id=\"u9e5a8612\">标记整理算法实现原理</span></h2><blockquote data-lake-id=\"u2e0c227a\" id=\"u2e0c227a\"><p data-lake-id=\"u4ef6d3db\" id=\"u4ef6d3db\"><span data-lake-id=\"u3be6e771\" id=\"u3be6e771\">和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></blockquote><p data-lake-id=\"1210fe16630370d68dc58f767d5f064a\" id=\"1210fe16630370d68dc58f767d5f064a\"><span data-lake-id=\"u7264a3dd\" id=\"u7264a3dd\">标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p data-lake-id=\"7ea118596bad803afe4343db54d62fac\" id=\"7ea118596bad803afe4343db54d62fac\"><br></p><p data-lake-id=\"e6ec6769e8dddc37df070278172754a2\" id=\"e6ec6769e8dddc37df070278172754a2\"><span data-lake-id=\"uad797910\" id=\"uad797910\">但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p data-lake-id=\"4e60332e04d2aedeb479c71764b2f763\" id=\"4e60332e04d2aedeb479c71764b2f763\"><br></p><p data-lake-id=\"c64cc78c8b336099f356cc72e10e6b69\" id=\"c64cc78c8b336099f356cc72e10e6b69\"><span data-lake-id=\"ud9f18fda\" id=\"ud9f18fda\">这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p data-lake-id=\"10da3079833c154f76295ef3264ba8fc\" id=\"10da3079833c154f76295ef3264ba8fc\"><br></p><h3 data-lake-id=\"hPlDu\" id=\"hPlDu\"><span data-lake-id=\"u177f97f4\" id=\"u177f97f4\">标记整理算法优缺点</span></h3><h4 data-lake-id=\"x4mSu\" id=\"x4mSu\"><span data-lake-id=\"u06700a4e\" id=\"u06700a4e\">优点</span></h4><p data-lake-id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" id=\"8458ad6bbf1e961255bb2cd302e6a5b5\"><span data-lake-id=\"u6bb97ce7\" id=\"u6bb97ce7\">减少碎片化空间</span></p><h4 data-lake-id=\"eMzeK\" id=\"eMzeK\"><span data-lake-id=\"uda6efee3\" id=\"uda6efee3\">缺点</span></h4><p data-lake-id=\"18f8cbb8e47a4bd5092de7dccfed182b\" id=\"18f8cbb8e47a4bd5092de7dccfed182b\"><span data-lake-id=\"u6cb5a07b\" id=\"u6cb5a07b\">不会立即回收垃圾对象</span></p><p data-lake-id=\"df7f29a51628e2757fb1455d7100be71\" id=\"df7f29a51628e2757fb1455d7100be71\"><br></p><h2 data-lake-id=\"kkh47\" id=\"kkh47\"><span data-lake-id=\"uf9ea3314\" id=\"uf9ea3314\">V8</span></h2><p data-lake-id=\"b201485eb2f8942dec72d83b9f9850f3\" id=\"b201485eb2f8942dec72d83b9f9850f3\"><span data-lake-id=\"u45d7c1a6\" id=\"u45d7c1a6\">V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p data-lake-id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\"><span data-lake-id=\"ueeead858\" id=\"ueeead858\">V8内存的上限设定：64位1.5G   32位800M</span></p><h3 data-lake-id=\"pazTz\" id=\"pazTz\"><span data-lake-id=\"ud01bc0a5\" id=\"ud01bc0a5\">V8垃圾回收策略</span></h3><p data-lake-id=\"u9c685dac\" id=\"u9c685dac\"><span data-lake-id=\"uf0c03330\" id=\"uf0c03330\">采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span data-lake-id=\"u22d5d359\" id=\"u22d5d359\">新生代</span></strong><span data-lake-id=\"u2eeb0a0d\" id=\"u2eeb0a0d\">存储区和</span><strong><span data-lake-id=\"u6bfed1f0\" id=\"u6bfed1f0\">老生代</span></strong><span data-lake-id=\"u150d08f7\" id=\"u150d08f7\">存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22W%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%7D%2C%22id%22%3A%2272e8ba29-f571-4976-9887-f8f35c28899b%22%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%7D%2C%22id%22%3A%22b0ec9b09-66bd-4dd7-b477-3eb405497aca%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%7D%2C%22id%22%3A%22ece33aaf-fd6a-4999-873b-1c3c486306e0%22%2C%22zIndex%22%3A2%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%7D%2C%22id%22%3A%22e9690d3f-8140-45f6-a23c-0007ee7288f9%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A-23%2C%22y%22%3A-314%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3EV8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A8%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-305.5%2C-322%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A461%7D%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95V8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg%22%2C%22__height%22%3A443%2C%22graphicsBBox%22%3A%7B%22x%22%3A-187%2C%22y%22%3A-314%2C%22width%22%3A443%2C%22height%22%3A418%7D%2C%22id%22%3A%22ol4HT%22%2C%22height%22%3A443%7D\"></card><p data-lake-id=\"06e4b36b0241a2becc72994d2292356c\" id=\"06e4b36b0241a2becc72994d2292356c\"><br></p><h3 data-lake-id=\"nfYoM\" id=\"nfYoM\"><span data-lake-id=\"u6883433b\" id=\"u6883433b\">V8中常用的GC算法</span></h3><ul list=\"uf3488a33\"><li fid=\"ud49f436e\" data-lake-id=\"u04b5b087\" id=\"u04b5b087\"><span data-lake-id=\"u96ef1953\" id=\"u96ef1953\">分代回收</span></li><li fid=\"ud49f436e\" data-lake-id=\"u9084b809\" id=\"u9084b809\"><span data-lake-id=\"ufbdc8d91\" id=\"ufbdc8d91\">空间复制</span></li><li fid=\"ud49f436e\" data-lake-id=\"udb480781\" id=\"udb480781\"><span data-lake-id=\"u27ebd787\" id=\"u27ebd787\">标记清除</span></li><li fid=\"ud49f436e\" data-lake-id=\"u9209e5b2\" id=\"u9209e5b2\"><span data-lake-id=\"ubbcc5cb1\" id=\"ubbcc5cb1\">标记整理</span></li><li fid=\"ud49f436e\" data-lake-id=\"ub48e7a64\" id=\"ub48e7a64\"><span data-lake-id=\"uae403bd0\" id=\"uae403bd0\">标记增量</span></li></ul><h3 data-lake-id=\"yplWV\" id=\"yplWV\"><span data-lake-id=\"u0294d25d\" id=\"u0294d25d\">V8如何回收新生代对象</span></h3><p data-lake-id=\"ucb62e279\" id=\"ucb62e279\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A749%2C%22height%22%3A89%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12542%2C%22originWidth%22%3A831%2C%22originHeight%22%3A99%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%20To%20From%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A371.20895%2C%22y%22%3A41.943043%2C%22width%22%3A85.69268999999997%2C%22height%22%3A16.674186999999996%2C%22text%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%22%7D%2C%7B%22x%22%3A152.04552%2C%22y%22%3A43.356525%2C%22width%22%3A20.57271%2C%22height%22%3A13.644950999999999%2C%22text%22%3A%22To%22%7D%2C%7B%22x%22%3A40.085224%2C%22y%22%3A43.81187%2C%22width%22%3A37.553816%2C%22height%22%3A12.758973000000005%2C%22text%22%3A%22From%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ubca4cc3b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ub4e6f2f7\" id=\"ub4e6f2f7\"><span data-lake-id=\"ubefb5070\" id=\"ubefb5070\">如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p data-lake-id=\"ub7fcb526\" id=\"ub7fcb526\"><strong><span data-lake-id=\"ufa2681a0\" id=\"ufa2681a0\">新生代指的是存活时间较短的对象</span></strong><span data-lake-id=\"u5991fb8b\" id=\"u5991fb8b\">。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p data-lake-id=\"u6462d8cf\" id=\"u6462d8cf\"><span data-lake-id=\"u8b41709a\" id=\"u8b41709a\">那么，V8是如何完成新生代对象回收的呢？</span></p><h4 data-lake-id=\"f2HMO\" id=\"f2HMO\"><span data-lake-id=\"u1367016a\" id=\"u1367016a\">新生代对象回收实现</span></h4><p data-lake-id=\"u0edc7469\" id=\"u0edc7469\"><span data-lake-id=\"u00fe3556\" id=\"u00fe3556\">回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 data-lake-id=\"ChXnK\" id=\"ChXnK\"><span data-lake-id=\"u1b01739b\" id=\"u1b01739b\">回收细节</span></h4><p data-lake-id=\"u2a6a5439\" id=\"u2a6a5439\"><span data-lake-id=\"u8fecf02f\" id=\"u8fecf02f\">如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span data-lake-id=\"udfe18a32\" id=\"udfe18a32\">晋升</span></strong><span data-lake-id=\"ud2f4b6f3\" id=\"ud2f4b6f3\">的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p data-lake-id=\"u6f89bcf8\" id=\"u6f89bcf8\"><span data-lake-id=\"u6f9acc8c\" id=\"u6f9acc8c\">判断是否晋升的条件有以下几个：</span></p><ul list=\"u7e640b8c\"><li fid=\"ud7f87fbb\" data-lake-id=\"uc587a861\" id=\"uc587a861\"><span data-lake-id=\"u074a1163\" id=\"u074a1163\">经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p data-lake-id=\"ue13d4ee4\" id=\"ue13d4ee4\" style=\"text-indent: 2em\"><span data-lake-id=\"u899ffb3a\" id=\"u899ffb3a\">如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul list=\"u65153cf9\"><li fid=\"u6fb716f8\" data-lake-id=\"ue5e2206a\" id=\"ue5e2206a\"><span data-lake-id=\"u2f9fce1c\" id=\"u2f9fce1c\">在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p data-lake-id=\"u1cc36f07\" id=\"u1cc36f07\" style=\"text-indent: 2em\"><span data-lake-id=\"ud043d429\" id=\"ud043d429\">To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p data-lake-id=\"u2e97449b\" id=\"u2e97449b\" style=\"text-indent: 2em\"><br></p><h3 data-lake-id=\"qM202\" id=\"qM202\"><span data-lake-id=\"u52123574\" id=\"u52123574\">V8如何回收老生代对象</span></h3><p data-lake-id=\"da1723261339c23350c949641abbe4cf\" id=\"da1723261339c23350c949641abbe4cf\"><span data-lake-id=\"u1d23f20e\" id=\"u1d23f20e\">如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 data-lake-id=\"BOoO7\" id=\"BOoO7\"><span data-lake-id=\"u51bf57da\" id=\"u51bf57da\">老生代对象回收实现</span></h3><p data-lake-id=\"9a3270127d0f0fc475d5faa883e4bdb2\" id=\"9a3270127d0f0fc475d5faa883e4bdb2\"><span data-lake-id=\"u851b64aa\" id=\"u851b64aa\">主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 data-lake-id=\"UN1OR\" id=\"UN1OR\"><span data-lake-id=\"u807fe157\" id=\"u807fe157\">新老代细节对比</span></h4><p data-lake-id=\"ea1437ffcfb5ee946525ad5611952daf\" id=\"ea1437ffcfb5ee946525ad5611952daf\"><span data-lake-id=\"u923a0626\" id=\"u923a0626\">新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p data-lake-id=\"73715c27eeed9d41f97645118fb3a358\" id=\"73715c27eeed9d41f97645118fb3a358\"><br></p><h2 data-lake-id=\"wyMkD\" id=\"wyMkD\"><span data-lake-id=\"u3bdcd3dc\" id=\"u3bdcd3dc\">标记增量如何优化垃圾回收</span></h2><p data-lake-id=\"2bdebdbb7be7635c016ca00a3388a500\" id=\"2bdebdbb7be7635c016ca00a3388a500\"><span data-lake-id=\"ud0e9e30b\" id=\"ud0e9e30b\">当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"i1eB3\" id=\"i1eB3\"><span data-lake-id=\"u455f6cdb\" id=\"u455f6cdb\">内存管理</span></h2><p data-lake-id=\"3ed4a301309484107f017d569b990dd1\" id=\"3ed4a301309484107f017d569b990dd1\"><span data-lake-id=\"uc0f00c8f\" id=\"uc0f00c8f\">内存为什么需要管理？</span></p><p data-lake-id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\" id=\"0ad2ac38d54ce0cfa0514f8c654af2d6\"><span data-lake-id=\"uf79d42d1\" id=\"uf79d42d1\">如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。</span><span data-lake-id=\"udbbb3f06\" id=\"udbbb3f06\" style=\"color: var(--color-prettylights-syntax-comment)\">​</span></p><ul list=\"udf8bec21\"><li fid=\"uee682c52\" data-lake-id=\"07052ad7077ff4dada3d15e4873d8ea3\" id=\"07052ad7077ff4dada3d15e4873d8ea3\"><span data-lake-id=\"u14712ac9\" id=\"u14712ac9\">内存：由可读写单元组成，表示一片可操作空间</span></li><li fid=\"uee682c52\" data-lake-id=\"b7d5e3e6908181dfb13659ca5a3fe959\" id=\"b7d5e3e6908181dfb13659ca5a3fe959\"><span data-lake-id=\"ucba96c17\" id=\"ucba96c17\">管理：人为的去操作一片空间的申请、使用和释放。</span></li><li fid=\"uee682c52\" data-lake-id=\"8c38107ab08c5bcdf03e8009cccc7f14\" id=\"8c38107ab08c5bcdf03e8009cccc7f14\"><span data-lake-id=\"u6ca9cfeb\" id=\"u6ca9cfeb\">内存管理: 开发者主动申请空间、使用空间、释放空间。</span></li><li fid=\"uee682c52\" data-lake-id=\"3dd0a478e0ac8848f92a72dc70441467\" id=\"3dd0a478e0ac8848f92a72dc70441467\"><span data-lake-id=\"u79fcfda0\" id=\"u79fcfda0\">管理流程:申请一使用一释放</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%88%E7%94%B1%E4%BA%8EJavaScript%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%85%B3api%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87JS%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%EF%BC%8C%E9%81%87%E5%88%B0%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8E%BB%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%89%5Cnlet%20obj%20%3D%20%7B%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E9%97%B4%5Cnobj.name%20%3D%201%5Cn%2F%2F%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%5Cnobj%20%3D%20null%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lOC05%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b0081576b73a0fd9875ea9d6235b58a7\" id=\"b0081576b73a0fd9875ea9d6235b58a7\"><br></p><h2 data-lake-id=\"OWSFc\" id=\"OWSFc\"><span data-lake-id=\"ud81625d2\" id=\"ud81625d2\">JS中的垃圾回收</span></h2><p data-lake-id=\"u999b7739\" id=\"u999b7739\"><span data-lake-id=\"ue02f492a\" id=\"ue02f492a\">对象在什么情况下会被视为垃圾？</span></p><ul list=\"uad3fa9ca\"><li fid=\"uee8d793e\" data-lake-id=\"c8113a1d1919a06f9087fb06f9d64dc3\" id=\"c8113a1d1919a06f9087fb06f9d64dc3\"><span data-lake-id=\"udce929b5\" id=\"udce929b5\">JS中的垃圾回收是自动的</span></li><li fid=\"uee8d793e\" data-lake-id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\" id=\"eb0b42d65f9d21b3f7b5b88c3dbd0068\"><span data-lake-id=\"ufc902595\" id=\"ufc902595\">当对象不再被引用时，被视为垃圾</span></li><li fid=\"uee8d793e\" data-lake-id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\" id=\"ab9c98b1ce607ef3fdf60aed2ffbef6c\"><span data-lake-id=\"u409765b5\" id=\"u409765b5\">对象不能从根(全局执行上下文)上访问到时是垃圾</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj%20%3D%20%7Bname%3A%2011%7D%20%5Cnlet%20ali%20%3D%20obj%5Cnobj%20%3D%20null%20%2F%2F%20%7Bname%3A%2011%7D%20%E8%A2%ABali%E5%BC%95%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9E%83%E5%9C%BE%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__height%22%3A103%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HWLSc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A103%7D\"></card><p data-lake-id=\"744a212f9e7d0ca5bf8db2d102991b55\" id=\"744a212f9e7d0ca5bf8db2d102991b55\"><br></p><h2 data-lake-id=\"SJ4dA\" id=\"SJ4dA\"><span data-lake-id=\"u5b18c11f\" id=\"u5b18c11f\">GC算法</span></h2><p data-lake-id=\"ab4d248ed5019a210126e0c8c16f4bbf\" id=\"ab4d248ed5019a210126e0c8c16f4bbf\"><span data-lake-id=\"u0dfce60d\" id=\"u0dfce60d\">GC：垃圾回收机制；它可以找到内存中的垃圾、并释放和回收空间。</span></p><p data-lake-id=\"e30385dfe8aee2e067f087a9a3a3c4b7\" id=\"e30385dfe8aee2e067f087a9a3a3c4b7\"><span data-lake-id=\"u4ebb5f76\" id=\"u4ebb5f76\">那么什么样的东西可以被当作垃圾呢？</span></p><ul list=\"ua530603c\"><li fid=\"u9a06217b\" data-lake-id=\"a6ff021f080f8cc705e48cb4517b1492\" id=\"a6ff021f080f8cc705e48cb4517b1492\"><span data-lake-id=\"u3aa2a7cb\" id=\"u3aa2a7cb\">程序中不再使用的对象</span></li><li fid=\"u9a06217b\" data-lake-id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\" id=\"5fa5ca0fd53b4603193e1ccfc13c05ad\"><span data-lake-id=\"u98a3598c\" id=\"u98a3598c\">程序中能再访问的对象</span></li></ul><p data-lake-id=\"411f9a0e735a919d55003880da3bd660\" id=\"411f9a0e735a919d55003880da3bd660\"><span data-lake-id=\"ue1ca21f6\" id=\"ue1ca21f6\">GC算法：算法就是工作时查找和回收所遵循的规则。</span></p><p data-lake-id=\"8798931f20afa627222e13ef6c35359b\" id=\"8798931f20afa627222e13ef6c35359b\"><span data-lake-id=\"ub55c8b70\" id=\"ub55c8b70\">常见的GC算法有：</span></p><ul list=\"u684b1b9b\"><li fid=\"u9dc99901\" data-lake-id=\"93c8b99bf0f41485690d7eb7cccca1ba\" id=\"93c8b99bf0f41485690d7eb7cccca1ba\"><span data-lake-id=\"ua6ae21f6\" id=\"ua6ae21f6\">引用计数</span></li></ul><p data-lake-id=\"98731bd03a205e78a79da038ba1045a8\" id=\"98731bd03a205e78a79da038ba1045a8\"><span data-lake-id=\"u708eed36\" id=\"u708eed36\">     判断对象的引用来决定是不是垃圾</span></p><ul list=\"u63a23d49\"><li fid=\"u6251f742\" data-lake-id=\"c425fbcbd3e712658fccd70b64f7d877\" id=\"c425fbcbd3e712658fccd70b64f7d877\"><span data-lake-id=\"uba85ef8c\" id=\"uba85ef8c\">标记清除</span></li></ul><p data-lake-id=\"48fd1e6ab75d04887058f1b595603458\" id=\"48fd1e6ab75d04887058f1b595603458\"><span data-lake-id=\"u5e432131\" id=\"u5e432131\">     给活动对象添加标记，来判断他是不是垃圾</span></p><ul list=\"u8fe5d66a\"><li fid=\"u738e5f4e\" data-lake-id=\"97d2b53baa97ae25f5357791db807563\" id=\"97d2b53baa97ae25f5357791db807563\"><span data-lake-id=\"u71275ee8\" id=\"u71275ee8\">标记整理</span></li></ul><p data-lake-id=\"eb2b7fbe2867cde5cec64a59db0abbdb\" id=\"eb2b7fbe2867cde5cec64a59db0abbdb\"><span data-lake-id=\"u051de77b\" id=\"u051de77b\">     类似标记清除</span></p><ul list=\"ucde65fcc\"><li fid=\"uc73785d6\" data-lake-id=\"d17f0a5311a8746763290ba5074f7b80\" id=\"d17f0a5311a8746763290ba5074f7b80\"><span data-lake-id=\"uee1163a1\" id=\"uee1163a1\">分代回收</span></li></ul><p data-lake-id=\"77511a1169f5d183b2ef7207363ccbaa\" id=\"77511a1169f5d183b2ef7207363ccbaa\"><br></p><h2 data-lake-id=\"a4eQ0\" id=\"a4eQ0\"><span data-lake-id=\"u83e5167a\" id=\"u83e5167a\">引用计数算法实现原理</span></h2><p data-lake-id=\"ebcf02bb5e61ef0dd4f012c200870762\" id=\"ebcf02bb5e61ef0dd4f012c200870762\"><span data-lake-id=\"uedb833be\" id=\"uedb833be\">核心思想：内部通过一个计数器来维护当前对象的引用数，从而判断当前对象的引用数是否为0，来决定它是不是一个垃圾对象。当这个对象的引用为0的时候，GC就开始工作，将其所在的对象空间进行回收和释放，然后再使用。</span></p><p data-lake-id=\"ucc3bdc85\" id=\"ucc3bdc85\"><br></p><p data-lake-id=\"180498aa3cae6ce1130ab6ac43da55c6\" id=\"180498aa3cae6ce1130ab6ac43da55c6\"><span data-lake-id=\"u5d96e48b\" id=\"u5d96e48b\">当某个对象的引用关系发生改变时，引用计数器就会主动去修改当前对象所对应的引用数值。当引用为0时，GC就会将其所在的空间回收。</span></p><p data-lake-id=\"u902d73f2\" id=\"u902d73f2\"><span data-lake-id=\"u68d4c947\" id=\"u68d4c947\">引用关系发生改变：假设我们的代码里面有一个对象空间，如果有一个变量名指向它，这时就把对象空间的引用加1，如果又有一个变量指向它，那就再加1；如果是减少的情况，例如取消引用，那就减1。为0时，GC就会立即将其回收。</span></p><p data-lake-id=\"uae16e0aa\" id=\"uae16e0aa\"><br></p><h3 data-lake-id=\"KSzgb\" id=\"KSzgb\"><span data-lake-id=\"udb3854a7\" id=\"udb3854a7\">引用计数算法的优缺点</span></h3><h4 data-lake-id=\"NYKWp\" id=\"NYKWp\"><span data-lake-id=\"uf3c5dd30\" id=\"uf3c5dd30\">优点</span></h4><ul list=\"uadd5863d\"><li fid=\"u5ec03fa9\" data-lake-id=\"ube1b554e\" id=\"ube1b554e\"><span data-lake-id=\"uf0d3c3ed\" id=\"uf0d3c3ed\">发现垃圾时立即回收</span></li></ul><p data-lake-id=\"u6f712f22\" id=\"u6f712f22\" style=\"text-indent: 2em\"><span data-lake-id=\"u64eb366c\" id=\"u64eb366c\">如果引用为0就会立即进行回收、释放</span></p><ul list=\"u43fc13f1\"><li fid=\"u68d6a0d7\" data-lake-id=\"udc2e1992\" id=\"udc2e1992\"><span data-lake-id=\"u8c5f3250\" id=\"u8c5f3250\">最大限度减少程序暂停</span></li></ul><p data-lake-id=\"ue027de04\" id=\"ue027de04\" style=\"text-indent: 2em\"><span data-lake-id=\"uadabb625\" id=\"uadabb625\">由于引用计数算法会时刻监控着那么引用为0的对象，如果在栈满时，会以最快的速度释放空间。程序就不会因为栈满而停止运行了。</span></p><p data-lake-id=\"ua7150238\" id=\"ua7150238\" style=\"text-indent: 2em\"><br></p><h4 data-lake-id=\"JQ2ki\" id=\"JQ2ki\"><span data-lake-id=\"uf9e515ad\" id=\"uf9e515ad\">缺点</span></h4><ul list=\"u4fb864bc\"><li fid=\"u23068e42\" data-lake-id=\"uac835717\" id=\"uac835717\"><span data-lake-id=\"u8ba40071\" id=\"u8ba40071\">无法回收循环引用的对象</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20fn()%20%7B%5Cn%5Ctconst%20obj1%20%3D%20%7B%7D%5Cn%20%20const%20obj2%20%3D%20%7B%7D%5Cn%20%20%2F%2F%20%E5%9C%A8%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E5%88%B0%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E4%BB%96%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86%5Cn%20%20%2F%2F%20%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95%E6%97%B6%EF%BC%8C%E4%BB%96%E4%BB%8D%E7%84%B6%E8%BF%98%E6%98%AF%E6%9C%89%E5%BC%95%E7%94%A8%E5%B9%B6%E4%B8%94%E4%B8%8D%E4%B8%BA0%EF%BC%8C%E5%9B%A0%E6%AD%A4GC%E6%97%A0%E6%B3%95%E5%AF%B9%E5%85%B6%E5%9B%9E%E6%94%B6%E3%80%82%5Cn%20%20obj1.name%20%3D%20obj2%5Cn%20%20obj2.name%20%3D%20obj1%5Cn%20%20%5Cn%20%20return%20'ok'%5Cn%7D%5Cnfn()%20%2F%2F%20%E5%BD%93%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E4%BC%9A%E9%87%8A%E6%94%BE%E9%87%8C%E9%9D%A2%E7%9A%84%E7%A9%BA%E9%97%B4%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u84h9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u0ee5e3ea\"><li fid=\"u46c67728\" data-lake-id=\"ud3c4ce49\" id=\"ud3c4ce49\"><span data-lake-id=\"ue819314e\" id=\"ue819314e\">时间开销大</span></li></ul><p data-lake-id=\"ude675e9f\" id=\"ude675e9f\" style=\"text-indent: 2em\"><span data-lake-id=\"udf58f694\" id=\"udf58f694\">需要时刻监控对象是否修改，如果有很多的对象需要修改，需要的时间就会更久一点</span></p><p data-lake-id=\"ue7480f80\" id=\"ue7480f80\" style=\"text-indent: 2em\"><br></p><h2 data-lake-id=\"l6fT2\" id=\"l6fT2\"><span data-lake-id=\"u09810861\" id=\"u09810861\">标记清除算法实现原理</span></h2><blockquote data-lake-id=\"uf53e7b68\" id=\"uf53e7b68\"><p data-lake-id=\"uea79233d\" id=\"uea79233d\"><span data-lake-id=\"u8802bdb3\" id=\"u8802bdb3\">标记清除算法相较于引用计数算法，他能解决更多的问题，因此它在V8中被大量使用。</span></p></blockquote><p data-lake-id=\"u47c36318\" id=\"u47c36318\"><span data-lake-id=\"uc4fd5cf9\" id=\"uc4fd5cf9\">核心思想：将整个垃圾回收操作分为两个阶段；第一个阶段，遍历所有对象，然后找到这些活动的对象(可达对象)并进行标记，如果不可达就不会标记并且会在第二个阶段被回收掉。第二个阶段，再次遍历所有对象，然后把那些没有被标记的对象进行清除操作，并把第一阶段中设置的标记抹掉，便于下次GC还能够正常工作。最后就可以把相应的垃圾进行回收，然后再把回收的空间交给空闲链表进行维护，下次程序执行就可以向空闲链表申请空间进行使用。</span></p><h3 data-lake-id=\"ZuPlu\" id=\"ZuPlu\"><span data-lake-id=\"u5a9a275a\" id=\"u5a9a275a\">标记清除算法的优缺点</span></h3><h4 data-lake-id=\"MDeW8\" id=\"MDeW8\"><span data-lake-id=\"ue3950982\" id=\"ue3950982\">优点</span></h4><ul list=\"u7036e34b\"><li fid=\"u4547751f\" data-lake-id=\"u1f059613\" id=\"u1f059613\"><span data-lake-id=\"u5975907a\" id=\"u5975907a\">解决了引用计数算法中对象循环引用无法回收的问题</span></li></ul><p data-lake-id=\"u4ea8692f\" id=\"u4ea8692f\" style=\"text-indent: 2em\"><span data-lake-id=\"u80b63d60\" id=\"u80b63d60\">标记清除算法会递归遍历所有对象，然后将可达对象进行标记；如果两个对象相互循环引用，一旦对象不可达，它始终也能清除标记，GC也能正常回收。</span></p><h4 data-lake-id=\"sXQJL\" id=\"sXQJL\"><span data-lake-id=\"u45600ed2\" id=\"u45600ed2\">缺点</span></h4><ul list=\"ub25df2fd\"><li fid=\"ufafaf7d8\" data-lake-id=\"u5d173730\" id=\"u5d173730\"><span data-lake-id=\"uba480768\" id=\"uba480768\">不会立即回收对象</span></li></ul><p data-lake-id=\"c196c8cd1b1c3af12971cc33a795c11f\" id=\"c196c8cd1b1c3af12971cc33a795c11f\"><span data-lake-id=\"u0bdaf98e\" id=\"u0bdaf98e\">       当遍历对象的时候，即使发现了不可达对象，它也不会立即去进行回收，只有等到最后才会去回收，而且其实这个时候程序是停止工作的。</span></p><ul list=\"ucaa137f8\"><li fid=\"u5fe0109e\" data-lake-id=\"c66739eb16ad7259c0f8c6266f067a18\" id=\"c66739eb16ad7259c0f8c6266f067a18\"><span data-lake-id=\"u419c0cb8\" id=\"u419c0cb8\">空间碎片化</span></li></ul><p data-lake-id=\"u35c36092\" id=\"u35c36092\" style=\"text-indent: 2em\"><span data-lake-id=\"ue22a6a7a\" id=\"ue22a6a7a\">回收后的空闲地址有可能不是连续的，使用空间时很容易造成空间上的浪费。</span></p><p data-lake-id=\"3e4e66ed660724cc8561b95418fe4194\" id=\"3e4e66ed660724cc8561b95418fe4194\"><br></p><h2 data-lake-id=\"CcfMF\" id=\"CcfMF\"><span data-lake-id=\"u9e5a8612\" id=\"u9e5a8612\">标记整理算法实现原理</span></h2><blockquote data-lake-id=\"u2e0c227a\" id=\"u2e0c227a\"><p data-lake-id=\"u4ef6d3db\" id=\"u4ef6d3db\"><span data-lake-id=\"u3be6e771\" id=\"u3be6e771\">和标记清除算法一样，标记整理算法在V8也被频繁使用</span></p></blockquote><p data-lake-id=\"1210fe16630370d68dc58f767d5f064a\" id=\"1210fe16630370d68dc58f767d5f064a\"><span data-lake-id=\"u7264a3dd\" id=\"u7264a3dd\">标记整理算法其实可以看做是标记清除算法的增强版，因为它们在第一个阶段是相同的，都会先遍历所有对象，然后对当前活动对象(可达对象)进行标记操作。</span></p><p data-lake-id=\"7ea118596bad803afe4343db54d62fac\" id=\"7ea118596bad803afe4343db54d62fac\"><br></p><p data-lake-id=\"e6ec6769e8dddc37df070278172754a2\" id=\"e6ec6769e8dddc37df070278172754a2\"><span data-lake-id=\"uad797910\" id=\"uad797910\">但是不同的是，标记清除算法是直接对没有标记的进行清除，而标记整理算法会在清除之前进行整理操作，移动对象的位置，并让他们在地址上产生连续。</span></p><p data-lake-id=\"4e60332e04d2aedeb479c71764b2f763\" id=\"4e60332e04d2aedeb479c71764b2f763\"><br></p><p data-lake-id=\"c64cc78c8b336099f356cc72e10e6b69\" id=\"c64cc78c8b336099f356cc72e10e6b69\"><span data-lake-id=\"ud9f18fda\" id=\"ud9f18fda\">这样连续的可用空间，能够最大化的让程序使用到内存释放出来的空闲空间，避免空间碎片化造成空间浪费。</span></p><p data-lake-id=\"10da3079833c154f76295ef3264ba8fc\" id=\"10da3079833c154f76295ef3264ba8fc\"><br></p><h3 data-lake-id=\"hPlDu\" id=\"hPlDu\"><span data-lake-id=\"u177f97f4\" id=\"u177f97f4\">标记整理算法优缺点</span></h3><h4 data-lake-id=\"x4mSu\" id=\"x4mSu\"><span data-lake-id=\"u06700a4e\" id=\"u06700a4e\">优点</span></h4><p data-lake-id=\"8458ad6bbf1e961255bb2cd302e6a5b5\" id=\"8458ad6bbf1e961255bb2cd302e6a5b5\"><span data-lake-id=\"u6bb97ce7\" id=\"u6bb97ce7\">减少碎片化空间</span></p><h4 data-lake-id=\"eMzeK\" id=\"eMzeK\"><span data-lake-id=\"uda6efee3\" id=\"uda6efee3\">缺点</span></h4><p data-lake-id=\"18f8cbb8e47a4bd5092de7dccfed182b\" id=\"18f8cbb8e47a4bd5092de7dccfed182b\"><span data-lake-id=\"u6cb5a07b\" id=\"u6cb5a07b\">不会立即回收垃圾对象</span></p><p data-lake-id=\"df7f29a51628e2757fb1455d7100be71\" id=\"df7f29a51628e2757fb1455d7100be71\"><br></p><h2 data-lake-id=\"kkh47\" id=\"kkh47\"><span data-lake-id=\"uf9ea3314\" id=\"uf9ea3314\">V8</span></h2><p data-lake-id=\"b201485eb2f8942dec72d83b9f9850f3\" id=\"b201485eb2f8942dec72d83b9f9850f3\"><span data-lake-id=\"u45d7c1a6\" id=\"u45d7c1a6\">V8是一款主流的JavaScript执行引擎。V8之所以有优越的性能，是因为它优秀的内存管理机制以及V8采用的即时编译机制。</span></p><p data-lake-id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\" id=\"ff48c8dbfe4699d1b1def1a2c9ceabf1\"><span data-lake-id=\"ueeead858\" id=\"ueeead858\">V8内存的上限设定：64位1.5G   32位800M</span></p><h3 data-lake-id=\"pazTz\" id=\"pazTz\"><span data-lake-id=\"ud01bc0a5\" id=\"ud01bc0a5\">V8垃圾回收策略</span></h3><p data-lake-id=\"u9c685dac\" id=\"u9c685dac\"><span data-lake-id=\"uf0c03330\" id=\"uf0c03330\">采用分代回收的思想，把内存空间按照一定的规则分为两类，</span><strong><span data-lake-id=\"u22d5d359\" id=\"u22d5d359\">新生代</span></strong><span data-lake-id=\"u2eeb0a0d\" id=\"u2eeb0a0d\">存储区和</span><strong><span data-lake-id=\"u6bfed1f0\" id=\"u6bfed1f0\">老生代</span></strong><span data-lake-id=\"u150d08f7\" id=\"u150d08f7\">存储区。针对不同代采用最高效的GC算法，从而对不同的对象进行回收操作。</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%7D%2C%22body%22%3A%5B%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22W%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%7D%2C%22id%22%3A%2272e8ba29-f571-4976-9887-f8f35c28899b%22%2C%22zIndex%22%3A0%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22connection%22%3A%22E%22%7D%2C%22target%22%3A%7B%22connection%22%3A%22N%22%2C%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%7D%2C%22id%22%3A%22b0ec9b09-66bd-4dd7-b477-3eb405497aca%22%2C%22zIndex%22%3A1%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%7D%2C%22id%22%3A%22ece33aaf-fd6a-4999-873b-1c3c486306e0%22%2C%22zIndex%22%3A2%7D%2C%7B%22type%22%3A%22line%22%2C%22shape%22%3A%22elbow%22%2C%22source%22%3A%7B%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22connection%22%3A%22S%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%7D%2C%22id%22%3A%22e9690d3f-8140-45f6-a23c-0007ee7288f9%22%2C%22zIndex%22%3A3%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb3a4bc3-e37b-4a94-afbf-cac086495d46%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A4%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A136%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%220589599b-a15f-4379-8bb3-8341c40bf1a5%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A5%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22start-end%22%2C%22id%22%3A%229987140f-1575-4455-9627-a5b05621cfa0%22%2C%22x%22%3A-23%2C%22y%22%3A-314%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3EV8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%3C%2Fdiv%3E%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A-144%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%2235ed498f-d9a2-4904-bf69-8f31e47d239c%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A7%7D%2C%7B%22type%22%3A%22geometry%22%2C%22shape%22%3A%22process%22%2C%22x%22%3A-187%2C%22y%22%3A44%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%3Cbr%3E%3C%2Fdiv%3E%22%2C%22id%22%3A%22cb10f28e-f2e2-4f95-9e96-8bdb8a0f6479%22%2C%22width%22%3A120%2C%22height%22%3A60%2C%22zIndex%22%3A8%7D%5D%7D%2C%22viewportOption%22%3A%22WYSIWYG%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-305.5%2C-322%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A461%7D%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95V8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84GC%E7%AE%97%E6%B3%95%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg%22%2C%22__height%22%3A443%2C%22graphicsBBox%22%3A%7B%22x%22%3A-187%2C%22y%22%3A-314%2C%22width%22%3A443%2C%22height%22%3A418%7D%2C%22id%22%3A%22ol4HT%22%2C%22height%22%3A443%7D\"></card><p data-lake-id=\"06e4b36b0241a2becc72994d2292356c\" id=\"06e4b36b0241a2becc72994d2292356c\"><br></p><h3 data-lake-id=\"nfYoM\" id=\"nfYoM\"><span data-lake-id=\"u6883433b\" id=\"u6883433b\">V8中常用的GC算法</span></h3><ul list=\"uf3488a33\"><li fid=\"ud49f436e\" data-lake-id=\"u04b5b087\" id=\"u04b5b087\"><span data-lake-id=\"u96ef1953\" id=\"u96ef1953\">分代回收</span></li><li fid=\"ud49f436e\" data-lake-id=\"u9084b809\" id=\"u9084b809\"><span data-lake-id=\"ufbdc8d91\" id=\"ufbdc8d91\">空间复制</span></li><li fid=\"ud49f436e\" data-lake-id=\"udb480781\" id=\"udb480781\"><span data-lake-id=\"u27ebd787\" id=\"u27ebd787\">标记清除</span></li><li fid=\"ud49f436e\" data-lake-id=\"u9209e5b2\" id=\"u9209e5b2\"><span data-lake-id=\"ubbcc5cb1\" id=\"ubbcc5cb1\">标记整理</span></li><li fid=\"ud49f436e\" data-lake-id=\"ub48e7a64\" id=\"ub48e7a64\"><span data-lake-id=\"uae403bd0\" id=\"uae403bd0\">标记增量</span></li></ul><h3 data-lake-id=\"yplWV\" id=\"yplWV\"><span data-lake-id=\"u0294d25d\" id=\"u0294d25d\">V8如何回收新生代对象</span></h3><p data-lake-id=\"ucb62e279\" id=\"ucb62e279\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1622954154226-5f921e40-e7a4-4868-9956-afae918bd89f.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A749%2C%22height%22%3A89%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12542%2C%22originWidth%22%3A831%2C%22originHeight%22%3A99%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%20To%20From%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A371.20895%2C%22y%22%3A41.943043%2C%22width%22%3A85.69268999999997%2C%22height%22%3A16.674186999999996%2C%22text%22%3A%22%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8%E5%8C%BA%22%7D%2C%7B%22x%22%3A152.04552%2C%22y%22%3A43.356525%2C%22width%22%3A20.57271%2C%22height%22%3A13.644950999999999%2C%22text%22%3A%22To%22%7D%2C%7B%22x%22%3A40.085224%2C%22y%22%3A43.81187%2C%22width%22%3A37.553816%2C%22height%22%3A12.758973000000005%2C%22text%22%3A%22From%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ubca4cc3b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ub4e6f2f7\" id=\"ub4e6f2f7\"><span data-lake-id=\"ubefb5070\" id=\"ubefb5070\">如图所示，V8内部将空间分为了两部分，左侧(From To)小空间专门用于存储新生代对象，在64位操作系统中，它的大小为32M，32位系统中，它的大小是16M；</span></p><p data-lake-id=\"ub7fcb526\" id=\"ub7fcb526\"><strong><span data-lake-id=\"ufa2681a0\" id=\"ufa2681a0\">新生代指的是存活时间较短的对象</span></strong><span data-lake-id=\"u5991fb8b\" id=\"u5991fb8b\">。比如局部作用域(函数)中定义的变量，当函数执行完，函数出栈时函数中的变量就会被回收。</span></p><p data-lake-id=\"u6462d8cf\" id=\"u6462d8cf\"><span data-lake-id=\"u8b41709a\" id=\"u8b41709a\">那么，V8是如何完成新生代对象回收的呢？</span></p><h4 data-lake-id=\"f2HMO\" id=\"f2HMO\"><span data-lake-id=\"u1367016a\" id=\"u1367016a\">新生代对象回收实现</span></h4><p data-lake-id=\"u0edc7469\" id=\"u0edc7469\"><span data-lake-id=\"u00fe3556\" id=\"u00fe3556\">回收过程采用复制算法+标记整理算法。首先它会将左侧的小空间也会分成两个部分(From、To)，而且这两个空间是相同大小的。其中我们将From称为使用空间，将To称为空闲空间。当程序要申请空间时，它会将新申请的活动对象存储于From空间，这个时候To空间是空闲的没有使用。当From使用到一定程度后就会触发GC操作，它将From空间中的活动对象进行标记，然后对空间整理为连续的，便于后续不会产生碎片化空间，这些操作完成后再将这些活动对象拷贝至To空间，From空间里的对象就有一份备份，这就意味着可以对它进行回收，因为活动对象都在To空间里有所体现，所以会直接把From空间中的对象进行回收。</span></p><h4 data-lake-id=\"ChXnK\" id=\"ChXnK\"><span data-lake-id=\"u1b01739b\" id=\"u1b01739b\">回收细节</span></h4><p data-lake-id=\"u2a6a5439\" id=\"u2a6a5439\"><span data-lake-id=\"u8fecf02f\" id=\"u8fecf02f\">如果我们在拷贝时，发现某一个变量对象所指向的空间，在我们老生代存储区也存在，这个时候就会发生</span><strong><span data-lake-id=\"udfe18a32\" id=\"udfe18a32\">晋升</span></strong><span data-lake-id=\"ud2f4b6f3\" id=\"ud2f4b6f3\">的现象。这里的晋升指的就是将新生代的对象移动至老生代中进行存储。</span></p><p data-lake-id=\"u6f89bcf8\" id=\"u6f89bcf8\"><span data-lake-id=\"u6f9acc8c\" id=\"u6f9acc8c\">判断是否晋升的条件有以下几个：</span></p><ul list=\"u7e640b8c\"><li fid=\"ud7f87fbb\" data-lake-id=\"uc587a861\" id=\"uc587a861\"><span data-lake-id=\"u074a1163\" id=\"u074a1163\">经过一轮GC还存活的新生代对象需要晋升</span></li></ul><p data-lake-id=\"ue13d4ee4\" id=\"ue13d4ee4\" style=\"text-indent: 2em\"><span data-lake-id=\"u899ffb3a\" id=\"u899ffb3a\">如果新生代中的对象经过一轮GC还存活的，我们就可以把它拷贝至老生代存储区进行存储操作。</span></p><ul list=\"u65153cf9\"><li fid=\"u6fb716f8\" data-lake-id=\"ue5e2206a\" id=\"ue5e2206a\"><span data-lake-id=\"u2f9fce1c\" id=\"u2f9fce1c\">在拷贝的过程中，发现To空间的使用率超过25%，也需要把这次的活动对象都移动至老生代存储区中进行存储。</span></li></ul><p data-lake-id=\"u1cc36f07\" id=\"u1cc36f07\" style=\"text-indent: 2em\"><span data-lake-id=\"ud043d429\" id=\"ud043d429\">To空间的使用率如果超过了限制，那么新进来的对象空间好像就存放不进去了，所以在这里有25%的限制操作。</span></p><p data-lake-id=\"u2e97449b\" id=\"u2e97449b\" style=\"text-indent: 2em\"><br></p><h3 data-lake-id=\"qM202\" id=\"qM202\"><span data-lake-id=\"u52123574\" id=\"u52123574\">V8如何回收老生代对象</span></h3><p data-lake-id=\"da1723261339c23350c949641abbe4cf\" id=\"da1723261339c23350c949641abbe4cf\"><span data-lake-id=\"u1d23f20e\" id=\"u1d23f20e\">如上图所示，老生代对象存放在右侧老生代区域。同样针对于老生代存储区也有大小限制，64位的操作系统为1.4G，32位的操作系统为700M。老生代对象就是指存活时间较长的对象，例如在全局上下文中存放的变量、闭包中存放的变量数据等。</span></p><h3 data-lake-id=\"BOoO7\" id=\"BOoO7\"><span data-lake-id=\"u51bf57da\" id=\"u51bf57da\">老生代对象回收实现</span></h3><p data-lake-id=\"9a3270127d0f0fc475d5faa883e4bdb2\" id=\"9a3270127d0f0fc475d5faa883e4bdb2\"><span data-lake-id=\"u851b64aa\" id=\"u851b64aa\">主要采用标记清除、标记整理、增量标记算法。其实首先使用的是标记清除算法完成垃圾空间的释放和回收，因为它执行的速度是比较快的。当把新生代区域中的内容往老生代存储区域中移动(也就是晋升)的时候，而且老生代的空间又不足以存放所移过来的这些对象，就会触发标记整理，把之前的碎片空间进行整理回收，让我们有更多的空间进行使用。最后会采用增量标记算法对回收效率进行提升。</span></p><h4 data-lake-id=\"UN1OR\" id=\"UN1OR\"><span data-lake-id=\"u807fe157\" id=\"u807fe157\">新老代细节对比</span></h4><p data-lake-id=\"ea1437ffcfb5ee946525ad5611952daf\" id=\"ea1437ffcfb5ee946525ad5611952daf\"><span data-lake-id=\"u923a0626\" id=\"u923a0626\">新生代区域垃圾回收使用空间换时间，因为他采用的是复制算法，这也就意味着每时每刻都会有空闲的空间存在。但是新生代存储区本身的存储就很小，那么优化出来的空间就更小，所以相对于它带来的时间效率上的提升是微不足道的。老生代区域垃圾回收不适合复制算法，因为他的空间很大，复制很多对象时也会非常消耗时间。</span></p><p data-lake-id=\"73715c27eeed9d41f97645118fb3a358\" id=\"73715c27eeed9d41f97645118fb3a358\"><br></p><h2 data-lake-id=\"wyMkD\" id=\"wyMkD\"><span data-lake-id=\"u3bdcd3dc\" id=\"u3bdcd3dc\">标记增量如何优化垃圾回收</span></h2><p data-lake-id=\"2bdebdbb7be7635c016ca00a3388a500\" id=\"2bdebdbb7be7635c016ca00a3388a500\"><span data-lake-id=\"ud0e9e30b\" id=\"ud0e9e30b\">当垃圾回收机制工作的时候，是会阻塞我们的程序运行的，程序执行完成后，会暂停下来进行回收操作。标记增量其实就是将一整段的垃圾回收操作拆分成多个小步骤组合着去完成，从而替换掉我们之前一口气去做完的垃圾回收操作。这样做的好处是可以让程序和垃圾回收机制交替着去执行，而不是执行程序时不能进行垃圾回收，垃圾回收时不能执行程序，这样带来的时间消耗也是非常合理的。而且GC执行的效率非常快，给用户带来的体验也更加友好了。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T07:08:31.000Z",
    "deleted_at": null,
    "created_at": "2021-05-26T13:16:12.000Z",
    "updated_at": "2022-03-31T07:08:32.000Z",
    "published_at": "2022-03-31T07:08:31.000Z",
    "first_published_at": "2021-05-26T13:17:02.000Z",
    "word_count": 3271,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1622989590392-e6acf015-001d-47af-a104-21ed4ab67419.jpeg",
    "description": "内存管理内存为什么需要管理？如果我们在写代码的过程中，不够了解内存的管理机制，写出不容易被察觉的内存问题性代码，就会给程序带来意想不到的BUG。内存：由可读写单元组成，表示一片可操作空间管理：人为的去操作一片空间的申请、使用和释放。内存管理: 开发者主动申请空间、使用空间、释放空间。管理流程:...",
    "custom_description": "",
    "hits": 44,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 46031969,
    "slug": "ocmg9x",
    "title": "ES新特性与TypeScript",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T09:49:11.881Z",
      "updated_at": "2022-03-31T09:49:12.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [ES6]<br />categories: [JavaScript]\n\n---\n\n我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。\n\n在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)\n\n在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)\n\n所以，JavaScript语言本身指的就是ECMAScript。\n\n由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。\n\n<a name=\"HkOqc\"></a>\n## ES2015 let与块级作用域\nvar会被变量提升，let不会有这个问题\n\n<a name=\"ZNvYJ\"></a>\n## ES2015 const\nconst声明的常量不能再次修改引用的内存地址。\n\n<a name=\"J0cTK\"></a>\n## ES2015 数组的解构\nconst [a.b] = [100, 200]<br />可以根据位置提取对应的值\n\n<a name=\"CZhW7\"></a>\n## ES2015 对象的解构\nconst {a} = {a:200}<br />和数组不同的是，它需要指定解构的属性名\n\n<a name=\"e8qOh\"></a>\n## ES2015 模板字符串\n和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。\n\n<a name=\"UjcAB\"></a>\n## ES2015 带标签的模板字符串\nconst str = console.log'hello wolrd'<br />模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。\n\n<a name=\"fgbbo\"></a>\n## ES2015 字符串的扩展方法\nstartWith<br />endWith<br />includes\n\n<a name=\"VA2FF\"></a>\n## ES 2015 参数默认值\nfunction fn(a = 100){}<br />可以在形参后面加上=值<br />一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:<br />function fn(a=100,b){}<br />fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。<br />因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。\n\n<a name=\"dImiD\"></a>\n## ES2015 剩余参数\narguments<br />...args\n\n<a name=\"BXrvd\"></a>\n## ES2015 展开数组\nconsole.log(...[100,200,300])\n\n<a name=\"naD2s\"></a>\n## ES2015 箭头函数与this\n在箭头函数中没有this，它的this指向它的上级作用域。\n\n<a name=\"p8QSG\"></a>\n## ES2015 对象字面量的增强\n对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。\n\n<a name=\"tW994\"></a>\n## ES2015 Object.assign\nvar obj3=Object.assign(obj1, obj2)<br />用obj2覆盖obj1对象，返回的obj3它其实就是obj1\n\n<a name=\"rYaWA\"></a>\n## ES2015 Object.is\n==只比较值，不比较类型，会自动类型转换<br />===比较值和类型，严格模式<br />NaN ===NaN //false<br />Object.is(NaN,NaN)//true\n\n<a name=\"pYv7C\"></a>\n## ES2015 Proxy\n可以对对象的属性改动进行检测和拦截\n\n<a name=\"j4sVE\"></a>\n## ES2015 Proxy对比Object.defineProperty\nProxy功能更强大一些。<br />proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用<br />可以对数组检测<br />Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。\n\n<a name=\"B8pRM\"></a>\n## ES2015 Reflect\nReflect.get<br />Reflect.set<br />提供了一套对对象操作的api<br />以前的操作方式可能会被废弃掉\n\n<a name=\"ScdtP\"></a>\n## ES2015 Promise\n异步编程解决方案\n\n<a name=\"MH3LB\"></a>\n## ES2015 class\n\n<a name=\"KsCTY\"></a>\n## es2015 静态方法\n\n<a name=\"vfjM6\"></a>\n## es2015 类的继承\nsuper\n\n<a name=\"S5ulm\"></a>\n## ES2015 Set\n不重复的数组  常用来去重\n\n<a name=\"Lc8dG\"></a>\n## ES2015 Map\nlet obj ={a:100}<br />let o = new Map()<br />o.set(obj, 666) //它的键就是obj对象本身<br />严格的键值对集合，它的键可以是任意类型。\n\n<a name=\"NNQQy\"></a>\n## ES2015 Symbol\nSymbol表示独一无二的值，他可以作为对象的键( key)。\n<a name=\"d4fdM\"></a>\n#### Symbol.for\n内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。\n```javascript\n// 因此Symbol.for(\"aa\") = Symbol. for(\"aa\") // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(\" true\") // true\n```\n<a name=\"kC8Ep\"></a>\n#### Symbol用途\n\n1. 我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用`Symbol`作为属性就不会出现这种问题。\n1. 可以为对象添加私有属性\n```javascript\nconst name = Symbol()\nclass Person {\n  [name]: \"xsl\",\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)\n```\n   3. `Symbol`提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：\n```javascript\n// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: \"XObject\"\n}\nconsole.log(obj.toString()) // [ object XObject]\n```\n对象的`Symbol`属性无法通过`for in`和`Object.keys`获取，`JSON.stringify`时`Symbol`的属性也会被忽略掉。<br />**可以使用**`**Object.getOwnPropertySymbols**`**获取对象的所有**`**Symbol**`**类型的属性。**\n\n<a name=\"Th2zC\"></a>\n## ES2015 for of\n使用for of可以遍历所有数据类型<br />默认可以对数组遍历<br />需要实现统一的Iterable接口，数组默认内部已经实现了。\n\n<a name=\"ynMdl\"></a>\n## ES2015 Iterable\n\n\n<a name=\"k6z3d\"></a>\n## ES2016 概述\n\n<a name=\"gLEad\"></a>\n## ES2017 概述\n允许在参数和数组字面量后边加上小逗号\n",
    "body_draft": "tags: [ES6]<br />categories: [JavaScript]\n\n---\n\n我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。\n\n在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)\n\n在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)\n\n所以，JavaScript语言本身指的就是ECMAScript。\n\n由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。\n\n<a name=\"HkOqc\"></a>\n## ES2015 let与块级作用域\nvar会被变量提升，let不会有这个问题\n\n<a name=\"ZNvYJ\"></a>\n## ES2015 const\nconst声明的常量不能再次修改引用的内存地址。\n\n<a name=\"J0cTK\"></a>\n## ES2015 数组的解构\nconst [a.b] = [100, 200]<br />可以根据位置提取对应的值\n\n<a name=\"CZhW7\"></a>\n## ES2015 对象的解构\nconst {a} = {a:200}<br />和数组不同的是，它需要指定解构的属性名\n\n<a name=\"e8qOh\"></a>\n## ES2015 模板字符串\n和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。\n\n<a name=\"UjcAB\"></a>\n## ES2015 带标签的模板字符串\nconst str = console.log'hello wolrd'<br />模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。\n\n<a name=\"fgbbo\"></a>\n## ES2015 字符串的扩展方法\nstartWith<br />endWith<br />includes\n\n<a name=\"VA2FF\"></a>\n## ES 2015 参数默认值\nfunction fn(a = 100){}<br />可以在形参后面加上=值<br />一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:<br />function fn(a=100,b){}<br />fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。<br />因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。\n\n<a name=\"dImiD\"></a>\n## ES2015 剩余参数\narguments<br />...args\n\n<a name=\"BXrvd\"></a>\n## ES2015 展开数组\nconsole.log(...[100,200,300])\n\n<a name=\"naD2s\"></a>\n## ES2015 箭头函数与this\n在箭头函数中没有this，它的this指向它的上级作用域。\n\n<a name=\"p8QSG\"></a>\n## ES2015 对象字面量的增强\n对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。\n\n<a name=\"tW994\"></a>\n## ES2015 Object.assign\nvar obj3=Object.assign(obj1, obj2)<br />用obj2覆盖obj1对象，返回的obj3它其实就是obj1\n\n<a name=\"rYaWA\"></a>\n## ES2015 Object.is\n==只比较值，不比较类型，会自动类型转换<br />===比较值和类型，严格模式<br />NaN ===NaN //false<br />Object.is(NaN,NaN)//true\n\n<a name=\"pYv7C\"></a>\n## ES2015 Proxy\n可以对对象的属性改动进行检测和拦截\n\n<a name=\"j4sVE\"></a>\n## ES2015 Proxy对比Object.defineProperty\nProxy功能更强大一些。<br />proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用<br />可以对数组检测<br />Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。\n\n<a name=\"B8pRM\"></a>\n## ES2015 Reflect\nReflect.get<br />Reflect.set<br />提供了一套对对象操作的api<br />以前的操作方式可能会被废弃掉\n\n<a name=\"ScdtP\"></a>\n## ES2015 Promise\n异步编程解决方案\n\n<a name=\"MH3LB\"></a>\n## ES2015 class\n\n<a name=\"KsCTY\"></a>\n## es2015 静态方法\n\n<a name=\"vfjM6\"></a>\n## es2015 类的继承\nsuper\n\n<a name=\"S5ulm\"></a>\n## ES2015 Set\n不重复的数组  常用来去重\n\n<a name=\"Lc8dG\"></a>\n## ES2015 Map\nlet obj ={a:100}<br />let o = new Map()<br />o.set(obj, 666) //它的键就是obj对象本身<br />严格的键值对集合，它的键可以是任意类型。\n\n<a name=\"NNQQy\"></a>\n## ES2015 Symbol\nSymbol表示独一无二的值，他可以作为对象的键( key)。\n<a name=\"d4fdM\"></a>\n#### Symbol.for\n内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。\n```javascript\n// 因此Symbol.for(\"aa\") = Symbol. for(\"aa\") // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(\" true\") // true\n```\n<a name=\"kC8Ep\"></a>\n#### Symbol用途\n\n1. 我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用`Symbol`作为属性就不会出现这种问题。\n1. 可以为对象添加私有属性\n```javascript\nconst name = Symbol()\nclass Person {\n  [name]: \"xsl\",\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)\n```\n   3. `Symbol`提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：\n```javascript\n// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: \"XObject\"\n}\nconsole.log(obj.toString()) // [ object XObject]\n```\n对象的`Symbol`属性无法通过`for in`和`Object.keys`获取，`JSON.stringify`时`Symbol`的属性也会被忽略掉。<br />**可以使用**`**Object.getOwnPropertySymbols**`**获取对象的所有**`**Symbol**`**类型的属性。**\n\n<a name=\"Th2zC\"></a>\n## ES2015 for of\n使用for of可以遍历所有数据类型<br />默认可以对数组遍历<br />需要实现统一的Iterable接口，数组默认内部已经实现了。\n\n<a name=\"ynMdl\"></a>\n## ES2015 Iterable\n\n\n<a name=\"k6z3d\"></a>\n## ES2016 概述\n\n<a name=\"gLEad\"></a>\n## ES2017 概述\n允许在参数和数组字面量后边加上小逗号\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u7e224043\" class=\"ne-p\"><span class=\"ne-text\">tags: [ES6]</span></p><p id=\"uf1736aee\" class=\"ne-p\"><span class=\"ne-text\">categories: [JavaScript]</span></p><hr id=\"dWENV\" class=\"ne-hr\"><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p id=\"d3cbb52d6d52c80ccf2d65591448fab9\" class=\"ne-p\"><br></p><p id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" class=\"ne-p\"><span class=\"ne-text\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p id=\"ff3ffd5440184610f6f8d2e694398516\" class=\"ne-p\"><br></p><p id=\"81a82c175e6408af98467dc09c2c0870\" class=\"ne-p\"><span class=\"ne-text\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p id=\"48122c837e9e1e883a3abd1d8c31c74d\" class=\"ne-p\"><br></p><p id=\"a3f83d1af971926a0ebd593ef4ae133b\" class=\"ne-p\"><span class=\"ne-text\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p id=\"7d3162cfb13cf8cd0b519edb15ae2487\" class=\"ne-p\"><br></p><p id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" class=\"ne-p\"><span class=\"ne-text\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p id=\"u39a7d6bd\" class=\"ne-p\"><br></p><h2 id=\"HkOqc\"><span class=\"ne-text\">ES2015 let与块级作用域</span></h2><p id=\"a7d58fd87dfe4f73457cb2884320ffb8\" class=\"ne-p\"><span class=\"ne-text\">var会被变量提升，let不会有这个问题</span></p><p id=\"0013fb4aa6397b6b4655835fd2adb9d8\" class=\"ne-p\"><br></p><h2 id=\"ZNvYJ\"><span class=\"ne-text\">ES2015 const</span></h2><p id=\"7232ee60dc640e8c0fa206900fe41af0\" class=\"ne-p\"><span class=\"ne-text\">const声明的常量不能再次修改引用的内存地址。</span></p><p id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" class=\"ne-p\"><br></p><h2 id=\"J0cTK\"><span class=\"ne-text\">ES2015 数组的解构</span></h2><p id=\"0d50255207efb51be0471eeddf106559\" class=\"ne-p\"><span class=\"ne-text\">const [a.b] = [100, 200]</span></p><p id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" class=\"ne-p\"><span class=\"ne-text\">可以根据位置提取对应的值</span></p><p id=\"a909120279a6cc355c3098367cd76fc8\" class=\"ne-p\"><br></p><h2 id=\"CZhW7\"><span class=\"ne-text\">ES2015 对象的解构</span></h2><p id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" class=\"ne-p\"><span class=\"ne-text\">const {a} = {a:200}</span></p><p id=\"fc5a7abc8887d704b807426868c17df3\" class=\"ne-p\"><span class=\"ne-text\">和数组不同的是，它需要指定解构的属性名</span></p><p id=\"239a5af75036cda388b52e0a6977cd0e\" class=\"ne-p\"><br></p><h2 id=\"e8qOh\"><span class=\"ne-text\">ES2015 模板字符串</span></h2><p id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" class=\"ne-p\"><span class=\"ne-text\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" class=\"ne-p\"><br></p><h2 id=\"UjcAB\"><span class=\"ne-text\">ES2015 带标签的模板字符串</span></h2><p id=\"fa847889a38f60e93911037652d375c7\" class=\"ne-p\"><span class=\"ne-text\">const str = console.log'hello wolrd'</span></p><p id=\"f8c8c795f5f8836b2ead806315c9ddbc\" class=\"ne-p\"><span class=\"ne-text\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p id=\"2366c3dc2a42397f46f2404396517423\" class=\"ne-p\"><br></p><h2 id=\"fgbbo\"><span class=\"ne-text\">ES2015 字符串的扩展方法</span></h2><p id=\"57371814a3d7b11e0501c5af3faca3a5\" class=\"ne-p\"><span class=\"ne-text\">startWith</span></p><p id=\"f00a311809e779a530ea987f12288f1d\" class=\"ne-p\"><span class=\"ne-text\">endWith</span></p><p id=\"60969596c3ae112f93567cc5731e4dfc\" class=\"ne-p\"><span class=\"ne-text\">includes</span></p><p id=\"4a632fc50f8d951732842457a24b2019\" class=\"ne-p\"><br></p><h2 id=\"VA2FF\"><span class=\"ne-text\">ES 2015 参数默认值</span></h2><p id=\"558108fa39e43277eec2bb466f8ac466\" class=\"ne-p\"><span class=\"ne-text\">function fn(a = 100){}</span></p><p id=\"9948aefd5dd067496238fc9dc7b1b95b\" class=\"ne-p\"><span class=\"ne-text\">可以在形参后面加上=值</span></p><p id=\"a4c17d0d43f12f905c3304b9bd4451e5\" class=\"ne-p\"><span class=\"ne-text\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p id=\"a35a69e0ed7a099623ced3b2c442b5e2\" class=\"ne-p\"><span class=\"ne-text\">function fn(a=100,b){}</span></p><p id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" class=\"ne-p\"><span class=\"ne-text\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p id=\"4a3fd9b4f90969d634685e4e90d004c2\" class=\"ne-p\"><span class=\"ne-text\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p id=\"3ef505ff83aecba7c5ff389b1005f9d5\" class=\"ne-p\"><br></p><h2 id=\"dImiD\"><span class=\"ne-text\">ES2015 剩余参数</span></h2><p id=\"54c0c20b2fea16c59e29a2bb15f4700d\" class=\"ne-p\"><span class=\"ne-text\">arguments</span></p><p id=\"ef6d7a459ce386feaaa5c1c084eec86b\" class=\"ne-p\"><span class=\"ne-text\">...args</span></p><p id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" class=\"ne-p\"><br></p><h2 id=\"BXrvd\"><span class=\"ne-text\">ES2015 展开数组</span></h2><p id=\"d9e625370f98b10cd1303e97bfd831ca\" class=\"ne-p\"><span class=\"ne-text\">console.log(...[100,200,300])</span></p><p id=\"658964f1c65281a4d07047295f64ddea\" class=\"ne-p\"><br></p><h2 id=\"naD2s\"><span class=\"ne-text\">ES2015 箭头函数与this</span></h2><p id=\"019a46c230981e3ca8b889f0aeacb795\" class=\"ne-p\"><span class=\"ne-text\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p id=\"8d422cebc120b77563d29750149ffbf7\" class=\"ne-p\"><br></p><h2 id=\"p8QSG\"><span class=\"ne-text\">ES2015 对象字面量的增强</span></h2><p id=\"d6b42abd6a4978ff55469ddde4627a2f\" class=\"ne-p\"><span class=\"ne-text\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p id=\"92ca9371cc8a17915cd9de516397a95f\" class=\"ne-p\"><br></p><h2 id=\"tW994\"><span class=\"ne-text\">ES2015 Object.assign</span></h2><p id=\"ec09fd5129f5f645630a2fccdf53b7f9\" class=\"ne-p\"><span class=\"ne-text\">var obj3=Object.assign(obj1, obj2)</span></p><p id=\"0de6ed9e49306e6d0625664f541d2e23\" class=\"ne-p\"><span class=\"ne-text\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p id=\"41e5a6062d6db1bdcd247b00229e3087\" class=\"ne-p\"><br></p><h2 id=\"rYaWA\"><span class=\"ne-text\">ES2015 Object.is</span></h2><p id=\"0cc01364bf48f3357d49e870987c3b13\" class=\"ne-p\"><span class=\"ne-text\">==只比较值，不比较类型，会自动类型转换</span></p><p id=\"cd3806ab093d7491c684ae71b24e3272\" class=\"ne-p\"><span class=\"ne-text\">===比较值和类型，严格模式</span></p><p id=\"6d22ab8995f223b751af30ad66e36e36\" class=\"ne-p\"><span class=\"ne-text\">NaN ===NaN //false</span></p><p id=\"e33f6ca4086c79eeffa1532dcace1e93\" class=\"ne-p\"><span class=\"ne-text\">Object.is(NaN,NaN)//true</span></p><p id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" class=\"ne-p\"><br></p><h2 id=\"pYv7C\"><span class=\"ne-text\">ES2015 Proxy</span></h2><p id=\"1e139c7f6ecbf4bf81fce3789241da0a\" class=\"ne-p\"><span class=\"ne-text\">可以对对象的属性改动进行检测和拦截</span></p><p id=\"9935408458e3fc9d528ad1a38a984dd4\" class=\"ne-p\"><br></p><h2 id=\"j4sVE\"><span class=\"ne-text\">ES2015 Proxy对比Object.defineProperty</span></h2><p id=\"d35def387befa2da830e430e209ec0f8\" class=\"ne-p\"><span class=\"ne-text\">Proxy功能更强大一些。</span></p><p id=\"790ef2815013f32c9fb7eabc6d396986\" class=\"ne-p\"><span class=\"ne-text\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p id=\"16674882cd320bd1432f514cdd7346f8\" class=\"ne-p\"><span class=\"ne-text\">可以对数组检测</span></p><p id=\"9b9bf0c27590b1530284a78d696b5fa2\" class=\"ne-p\"><span class=\"ne-text\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p id=\"4394df20f1e858c6e5a82814be7796bc\" class=\"ne-p\"><br></p><h2 id=\"B8pRM\"><span class=\"ne-text\">ES2015 Reflect</span></h2><p id=\"51d9a7aa69ca41ffecae23265ab50a25\" class=\"ne-p\"><span class=\"ne-text\">Reflect.get</span></p><p id=\"0e687dd808dfc161578d80f86ee8c7e2\" class=\"ne-p\"><span class=\"ne-text\">Reflect.set</span></p><p id=\"935ae49c4a2f967e98fc094387346ae9\" class=\"ne-p\"><span class=\"ne-text\">提供了一套对对象操作的api</span></p><p id=\"3ae5829656745e6485ab83c3d36e73df\" class=\"ne-p\"><span class=\"ne-text\">以前的操作方式可能会被废弃掉</span></p><p id=\"6a3aeda5ea58acc443b9d8492f0f2513\" class=\"ne-p\"><br></p><h2 id=\"ScdtP\"><span class=\"ne-text\">ES2015 Promise</span></h2><p id=\"5aa1f4e3545b531faec5c6d08910cc79\" class=\"ne-p\"><span class=\"ne-text\">异步编程解决方案</span></p><p id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" class=\"ne-p\"><br></p><h2 id=\"MH3LB\"><span class=\"ne-text\">ES2015 class</span></h2><p id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" class=\"ne-p\"><br></p><h2 id=\"KsCTY\"><span class=\"ne-text\">es2015 静态方法</span></h2><p id=\"79799ec53f319300f74fcc41f0058cec\" class=\"ne-p\"><br></p><h2 id=\"vfjM6\"><span class=\"ne-text\">es2015 类的继承</span></h2><p id=\"7efec470976b0b17c48e127588a868ce\" class=\"ne-p\"><span class=\"ne-text\">super</span></p><p id=\"33ebfbffd369193e56112839083cf5c1\" class=\"ne-p\"><br></p><h2 id=\"S5ulm\"><span class=\"ne-text\">ES2015 Set</span></h2><p id=\"f94c9962904b257af11f289e3bbff6e7\" class=\"ne-p\"><span class=\"ne-text\">不重复的数组  常用来去重</span></p><p id=\"1e183c566a0ed891fdcbeec767984bba\" class=\"ne-p\"><br></p><h2 id=\"Lc8dG\"><span class=\"ne-text\">ES2015 Map</span></h2><p id=\"65484a8b9521727866edf723b803328b\" class=\"ne-p\"><span class=\"ne-text\">let obj ={a:100}</span></p><p id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" class=\"ne-p\"><span class=\"ne-text\">let o = new Map()</span></p><p id=\"2473241e478587a4c3c02d4b26ad1eb9\" class=\"ne-p\"><span class=\"ne-text\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p id=\"d9bc79d87b767025b040f75077c473f6\" class=\"ne-p\"><span class=\"ne-text\">严格的键值对集合，它的键可以是任意类型。</span></p><p id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" class=\"ne-p\"><br></p><h2 id=\"NNQQy\"><span class=\"ne-text\">ES2015 Symbol</span></h2><p id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" class=\"ne-p\"><span class=\"ne-text\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 id=\"d4fdM\"><span class=\"ne-text\">Symbol.for</span></h4><p id=\"u67569089\" class=\"ne-p\"><span class=\"ne-text\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><pre data-language=\"javascript\" id=\"pvypQ\" class=\"ne-codeblock language-javascript\">// 因此Symbol.for(&quot;aa&quot;) = Symbol. for(&quot;aa&quot;) // true\n// 如果传入的不是字符串，会自动转换为字符串。\nSymbol.for(true) === Symbol. for(&quot; true&quot;) // true</pre><h4 id=\"kC8Ep\"><span class=\"ne-text\">Symbol用途</span></h4><ol class=\"ne-ol\"><li id=\"9815d6bc47bf82e15c1a8498b246b333\"><span class=\"ne-text\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">作为属性就不会出现这种问题。</span></li><li id=\"b47f21250795d2f5df56c0af532e30eb\"><span class=\"ne-text\">可以为对象添加私有属性</span></li></ol><pre data-language=\"javascript\" id=\"QUZk9\" class=\"ne-codeblock language-javascript\">const name = Symbol()\nclass Person {\n  [name]: &quot;xsl&quot;,\n    say(){\n    // 只能通过这种方式访问\n    console.log(this.[name])\n  }\n}\n// 而当我们在外部使用时，由于不知道内部的唯一键是什么，因此只能通过实例间接访问，而无法在外部直接访问。\nconst obj = new Person()\nconsole. log(obj.say)</pre><p id=\"baf611945256cb585362597404dce10b\" class=\"ne-p\"><span class=\"ne-text\">   3. </span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><pre data-language=\"javascript\" id=\"Dpc6B\" class=\"ne-codeblock language-javascript\">// Symbol.iterator\n// Symbol.hasInstance\n// Symbol.toStringTag\nconst obj = {\n  [Symbol.toStringTag]: &quot;XObject&quot;\n}\nconsole.log(obj.toString()) // [ object XObject]</pre><p id=\"acf7adc4fe407cf00094c862cae7ae50\" class=\"ne-p\"><span class=\"ne-text\">对象的</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">属性无法通过</span><code class=\"ne-code\"><span class=\"ne-text\">for in</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">Object.keys</span></code><span class=\"ne-text\">获取，</span><code class=\"ne-code\"><span class=\"ne-text\">JSON.stringify</span></code><span class=\"ne-text\">时</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol</span></code><span class=\"ne-text\">的属性也会被忽略掉。</span></p><p id=\"u73717d60\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">可以使用</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">Object.getOwnPropertySymbols</span></strong></code><strong><span class=\"ne-text\" style=\"text-decoration: underline\">获取对象的所有</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\" style=\"text-decoration: underline\">Symbol</span></strong></code><strong><span class=\"ne-text\" style=\"text-decoration: underline\">类型的属性。</span></strong></p><p id=\"uccdb7f66\" class=\"ne-p\"><br></p><h2 id=\"Th2zC\"><span class=\"ne-text\">ES2015 for of</span></h2><p id=\"6d770189f5efceef3d9d598e8bc90c1c\" class=\"ne-p\"><span class=\"ne-text\">使用for of可以遍历所有数据类型</span></p><p id=\"a6bc9413c55120431bf78843f2d3966b\" class=\"ne-p\"><span class=\"ne-text\">默认可以对数组遍历</span></p><p id=\"449688b548c3dde68eb750b4c01a9e4c\" class=\"ne-p\"><span class=\"ne-text\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p id=\"u6c3ac6e6\" class=\"ne-p\"><br></p><h2 id=\"ynMdl\"><span class=\"ne-text\">ES2015 Iterable</span></h2><p id=\"u399a8bcc\" class=\"ne-p\"><br></p><p id=\"9a75caaf895fc4f99c1a4adaf29812c6\" class=\"ne-p\"><br></p><h2 id=\"k6z3d\"><span class=\"ne-text\">ES2016 概述</span></h2><p id=\"ue8809a66\" class=\"ne-p\"><br></p><h2 id=\"gLEad\"><span class=\"ne-text\">ES2017 概述</span></h2><p id=\"u4626838c\" class=\"ne-p\"><span class=\"ne-text\">允许在参数和数组字面量后边加上小逗号</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u7e224043\" id=\"u7e224043\"><span data-lake-id=\"ueb2dd97d\" id=\"ueb2dd97d\">tags: [ES6]</span></p><p data-lake-id=\"uf1736aee\" id=\"uf1736aee\"><span data-lake-id=\"u7e12cd95\" id=\"u7e12cd95\">categories: [JavaScript]</span></p><card type=\"block\" name=\"hr\"></card><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u2b234441\" id=\"u2b234441\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p data-lake-id=\"d3cbb52d6d52c80ccf2d65591448fab9\" id=\"d3cbb52d6d52c80ccf2d65591448fab9\"><br></p><p data-lake-id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" id=\"f4ab73c661ebd0b22a68d7d6140bee8a\"><span data-lake-id=\"u45c6e9af\" id=\"u45c6e9af\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p data-lake-id=\"ff3ffd5440184610f6f8d2e694398516\" id=\"ff3ffd5440184610f6f8d2e694398516\"><br></p><p data-lake-id=\"81a82c175e6408af98467dc09c2c0870\" id=\"81a82c175e6408af98467dc09c2c0870\"><span data-lake-id=\"u8883ad7f\" id=\"u8883ad7f\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p data-lake-id=\"48122c837e9e1e883a3abd1d8c31c74d\" id=\"48122c837e9e1e883a3abd1d8c31c74d\"><br></p><p data-lake-id=\"a3f83d1af971926a0ebd593ef4ae133b\" id=\"a3f83d1af971926a0ebd593ef4ae133b\"><span data-lake-id=\"u6f4e7c70\" id=\"u6f4e7c70\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p data-lake-id=\"7d3162cfb13cf8cd0b519edb15ae2487\" id=\"7d3162cfb13cf8cd0b519edb15ae2487\"><br></p><p data-lake-id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" id=\"2d3afc41d8fec39eb9f0aecc60ef450a\"><span data-lake-id=\"u7e1b415b\" id=\"u7e1b415b\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p data-lake-id=\"u39a7d6bd\" id=\"u39a7d6bd\"><br></p><h2 data-lake-id=\"HkOqc\" id=\"HkOqc\"><span data-lake-id=\"u2bb1e948\" id=\"u2bb1e948\">ES2015 let与块级作用域</span></h2><p data-lake-id=\"a7d58fd87dfe4f73457cb2884320ffb8\" id=\"a7d58fd87dfe4f73457cb2884320ffb8\"><span data-lake-id=\"uc44e85d1\" id=\"uc44e85d1\">var会被变量提升，let不会有这个问题</span></p><p data-lake-id=\"0013fb4aa6397b6b4655835fd2adb9d8\" id=\"0013fb4aa6397b6b4655835fd2adb9d8\"><br></p><h2 data-lake-id=\"ZNvYJ\" id=\"ZNvYJ\"><span data-lake-id=\"uaf98899b\" id=\"uaf98899b\">ES2015 const</span></h2><p data-lake-id=\"7232ee60dc640e8c0fa206900fe41af0\" id=\"7232ee60dc640e8c0fa206900fe41af0\"><span data-lake-id=\"u8c754977\" id=\"u8c754977\">const声明的常量不能再次修改引用的内存地址。</span></p><p data-lake-id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" id=\"96ca37a3ac7e214753cb6e4f9caa78f6\"><br></p><h2 data-lake-id=\"J0cTK\" id=\"J0cTK\"><span data-lake-id=\"u7c978d71\" id=\"u7c978d71\">ES2015 数组的解构</span></h2><p data-lake-id=\"0d50255207efb51be0471eeddf106559\" id=\"0d50255207efb51be0471eeddf106559\"><span data-lake-id=\"u80d4b94c\" id=\"u80d4b94c\">const [a.b] = [100, 200]</span></p><p data-lake-id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\"><span data-lake-id=\"ua50333d3\" id=\"ua50333d3\">可以根据位置提取对应的值</span></p><p data-lake-id=\"a909120279a6cc355c3098367cd76fc8\" id=\"a909120279a6cc355c3098367cd76fc8\"><br></p><h2 data-lake-id=\"CZhW7\" id=\"CZhW7\"><span data-lake-id=\"u4fec2785\" id=\"u4fec2785\">ES2015 对象的解构</span></h2><p data-lake-id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" id=\"f73a4e69d9f761ca25c9a9287f80eb7f\"><span data-lake-id=\"u784ad796\" id=\"u784ad796\">const {a} = {a:200}</span></p><p data-lake-id=\"fc5a7abc8887d704b807426868c17df3\" id=\"fc5a7abc8887d704b807426868c17df3\"><span data-lake-id=\"ude7671fa\" id=\"ude7671fa\">和数组不同的是，它需要指定解构的属性名</span></p><p data-lake-id=\"239a5af75036cda388b52e0a6977cd0e\" id=\"239a5af75036cda388b52e0a6977cd0e\"><br></p><h2 data-lake-id=\"e8qOh\" id=\"e8qOh\"><span data-lake-id=\"u2fa6773c\" id=\"u2fa6773c\">ES2015 模板字符串</span></h2><p data-lake-id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" id=\"0efa35e8f8a9a73faffe3fc06c8698f6\"><span data-lake-id=\"ub5a0ec49\" id=\"ub5a0ec49\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p data-lake-id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" id=\"4030a3163fed6ebfa9b6ca59c4d47c33\"><br></p><h2 data-lake-id=\"UjcAB\" id=\"UjcAB\"><span data-lake-id=\"u0a47cf5e\" id=\"u0a47cf5e\">ES2015 带标签的模板字符串</span></h2><p data-lake-id=\"fa847889a38f60e93911037652d375c7\" id=\"fa847889a38f60e93911037652d375c7\"><span data-lake-id=\"u27c6f6f5\" id=\"u27c6f6f5\">const str = console.log'hello wolrd'</span></p><p data-lake-id=\"f8c8c795f5f8836b2ead806315c9ddbc\" id=\"f8c8c795f5f8836b2ead806315c9ddbc\"><span data-lake-id=\"ueeab9416\" id=\"ueeab9416\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p data-lake-id=\"2366c3dc2a42397f46f2404396517423\" id=\"2366c3dc2a42397f46f2404396517423\"><br></p><h2 data-lake-id=\"fgbbo\" id=\"fgbbo\"><span data-lake-id=\"uf09f2995\" id=\"uf09f2995\">ES2015 字符串的扩展方法</span></h2><p data-lake-id=\"57371814a3d7b11e0501c5af3faca3a5\" id=\"57371814a3d7b11e0501c5af3faca3a5\"><span data-lake-id=\"uda029414\" id=\"uda029414\">startWith</span></p><p data-lake-id=\"f00a311809e779a530ea987f12288f1d\" id=\"f00a311809e779a530ea987f12288f1d\"><span data-lake-id=\"u3f830cb3\" id=\"u3f830cb3\">endWith</span></p><p data-lake-id=\"60969596c3ae112f93567cc5731e4dfc\" id=\"60969596c3ae112f93567cc5731e4dfc\"><span data-lake-id=\"ueb1b6573\" id=\"ueb1b6573\">includes</span></p><p data-lake-id=\"4a632fc50f8d951732842457a24b2019\" id=\"4a632fc50f8d951732842457a24b2019\"><br></p><h2 data-lake-id=\"VA2FF\" id=\"VA2FF\"><span data-lake-id=\"u6321e849\" id=\"u6321e849\">ES 2015 参数默认值</span></h2><p data-lake-id=\"558108fa39e43277eec2bb466f8ac466\" id=\"558108fa39e43277eec2bb466f8ac466\"><span data-lake-id=\"u8621bffa\" id=\"u8621bffa\">function fn(a = 100){}</span></p><p data-lake-id=\"9948aefd5dd067496238fc9dc7b1b95b\" id=\"9948aefd5dd067496238fc9dc7b1b95b\"><span data-lake-id=\"u2cf3db66\" id=\"u2cf3db66\">可以在形参后面加上=值</span></p><p data-lake-id=\"a4c17d0d43f12f905c3304b9bd4451e5\" id=\"a4c17d0d43f12f905c3304b9bd4451e5\"><span data-lake-id=\"uca09f316\" id=\"uca09f316\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p data-lake-id=\"a35a69e0ed7a099623ced3b2c442b5e2\" id=\"a35a69e0ed7a099623ced3b2c442b5e2\"><span data-lake-id=\"u97105e23\" id=\"u97105e23\">function fn(a=100,b){}</span></p><p data-lake-id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\"><span data-lake-id=\"u203f4bce\" id=\"u203f4bce\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p data-lake-id=\"4a3fd9b4f90969d634685e4e90d004c2\" id=\"4a3fd9b4f90969d634685e4e90d004c2\"><span data-lake-id=\"u015a65ee\" id=\"u015a65ee\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p data-lake-id=\"3ef505ff83aecba7c5ff389b1005f9d5\" id=\"3ef505ff83aecba7c5ff389b1005f9d5\"><br></p><h2 data-lake-id=\"dImiD\" id=\"dImiD\"><span data-lake-id=\"u9ecfe781\" id=\"u9ecfe781\">ES2015 剩余参数</span></h2><p data-lake-id=\"54c0c20b2fea16c59e29a2bb15f4700d\" id=\"54c0c20b2fea16c59e29a2bb15f4700d\"><span data-lake-id=\"ufe4f4f4a\" id=\"ufe4f4f4a\">arguments</span></p><p data-lake-id=\"ef6d7a459ce386feaaa5c1c084eec86b\" id=\"ef6d7a459ce386feaaa5c1c084eec86b\"><span data-lake-id=\"u17c92a10\" id=\"u17c92a10\">...args</span></p><p data-lake-id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\"><br></p><h2 data-lake-id=\"BXrvd\" id=\"BXrvd\"><span data-lake-id=\"uc6dd2b03\" id=\"uc6dd2b03\">ES2015 展开数组</span></h2><p data-lake-id=\"d9e625370f98b10cd1303e97bfd831ca\" id=\"d9e625370f98b10cd1303e97bfd831ca\"><span data-lake-id=\"u9c9756d6\" id=\"u9c9756d6\">console.log(...[100,200,300])</span></p><p data-lake-id=\"658964f1c65281a4d07047295f64ddea\" id=\"658964f1c65281a4d07047295f64ddea\"><br></p><h2 data-lake-id=\"naD2s\" id=\"naD2s\"><span data-lake-id=\"u3faf63ad\" id=\"u3faf63ad\">ES2015 箭头函数与this</span></h2><p data-lake-id=\"019a46c230981e3ca8b889f0aeacb795\" id=\"019a46c230981e3ca8b889f0aeacb795\"><span data-lake-id=\"ud68d8b6b\" id=\"ud68d8b6b\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p data-lake-id=\"8d422cebc120b77563d29750149ffbf7\" id=\"8d422cebc120b77563d29750149ffbf7\"><br></p><h2 data-lake-id=\"p8QSG\" id=\"p8QSG\"><span data-lake-id=\"u95ba4135\" id=\"u95ba4135\">ES2015 对象字面量的增强</span></h2><p data-lake-id=\"d6b42abd6a4978ff55469ddde4627a2f\" id=\"d6b42abd6a4978ff55469ddde4627a2f\"><span data-lake-id=\"u25c19cb9\" id=\"u25c19cb9\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p data-lake-id=\"92ca9371cc8a17915cd9de516397a95f\" id=\"92ca9371cc8a17915cd9de516397a95f\"><br></p><h2 data-lake-id=\"tW994\" id=\"tW994\"><span data-lake-id=\"u0e83d7f8\" id=\"u0e83d7f8\">ES2015 Object.assign</span></h2><p data-lake-id=\"ec09fd5129f5f645630a2fccdf53b7f9\" id=\"ec09fd5129f5f645630a2fccdf53b7f9\"><span data-lake-id=\"u54e01d4d\" id=\"u54e01d4d\">var obj3=Object.assign(obj1, obj2)</span></p><p data-lake-id=\"0de6ed9e49306e6d0625664f541d2e23\" id=\"0de6ed9e49306e6d0625664f541d2e23\"><span data-lake-id=\"uc345f071\" id=\"uc345f071\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p data-lake-id=\"41e5a6062d6db1bdcd247b00229e3087\" id=\"41e5a6062d6db1bdcd247b00229e3087\"><br></p><h2 data-lake-id=\"rYaWA\" id=\"rYaWA\"><span data-lake-id=\"ud0cf2a0a\" id=\"ud0cf2a0a\">ES2015 Object.is</span></h2><p data-lake-id=\"0cc01364bf48f3357d49e870987c3b13\" id=\"0cc01364bf48f3357d49e870987c3b13\"><span data-lake-id=\"u2944ddf3\" id=\"u2944ddf3\">==只比较值，不比较类型，会自动类型转换</span></p><p data-lake-id=\"cd3806ab093d7491c684ae71b24e3272\" id=\"cd3806ab093d7491c684ae71b24e3272\"><span data-lake-id=\"u654db60e\" id=\"u654db60e\">===比较值和类型，严格模式</span></p><p data-lake-id=\"6d22ab8995f223b751af30ad66e36e36\" id=\"6d22ab8995f223b751af30ad66e36e36\"><span data-lake-id=\"u91c266a2\" id=\"u91c266a2\">NaN ===NaN //false</span></p><p data-lake-id=\"e33f6ca4086c79eeffa1532dcace1e93\" id=\"e33f6ca4086c79eeffa1532dcace1e93\"><span data-lake-id=\"u1ebb28e4\" id=\"u1ebb28e4\">Object.is(NaN,NaN)//true</span></p><p data-lake-id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\"><br></p><h2 data-lake-id=\"pYv7C\" id=\"pYv7C\"><span data-lake-id=\"u2fcbf904\" id=\"u2fcbf904\">ES2015 Proxy</span></h2><p data-lake-id=\"1e139c7f6ecbf4bf81fce3789241da0a\" id=\"1e139c7f6ecbf4bf81fce3789241da0a\"><span data-lake-id=\"u42b52b32\" id=\"u42b52b32\">可以对对象的属性改动进行检测和拦截</span></p><p data-lake-id=\"9935408458e3fc9d528ad1a38a984dd4\" id=\"9935408458e3fc9d528ad1a38a984dd4\"><br></p><h2 data-lake-id=\"j4sVE\" id=\"j4sVE\"><span data-lake-id=\"u20ab6a6b\" id=\"u20ab6a6b\">ES2015 Proxy对比Object.defineProperty</span></h2><p data-lake-id=\"d35def387befa2da830e430e209ec0f8\" id=\"d35def387befa2da830e430e209ec0f8\"><span data-lake-id=\"u59c94405\" id=\"u59c94405\">Proxy功能更强大一些。</span></p><p data-lake-id=\"790ef2815013f32c9fb7eabc6d396986\" id=\"790ef2815013f32c9fb7eabc6d396986\"><span data-lake-id=\"u3ac44ea8\" id=\"u3ac44ea8\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p data-lake-id=\"16674882cd320bd1432f514cdd7346f8\" id=\"16674882cd320bd1432f514cdd7346f8\"><span data-lake-id=\"u4bb87de6\" id=\"u4bb87de6\">可以对数组检测</span></p><p data-lake-id=\"9b9bf0c27590b1530284a78d696b5fa2\" id=\"9b9bf0c27590b1530284a78d696b5fa2\"><span data-lake-id=\"uad20dbc9\" id=\"uad20dbc9\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p data-lake-id=\"4394df20f1e858c6e5a82814be7796bc\" id=\"4394df20f1e858c6e5a82814be7796bc\"><br></p><h2 data-lake-id=\"B8pRM\" id=\"B8pRM\"><span data-lake-id=\"u05289cfd\" id=\"u05289cfd\">ES2015 Reflect</span></h2><p data-lake-id=\"51d9a7aa69ca41ffecae23265ab50a25\" id=\"51d9a7aa69ca41ffecae23265ab50a25\"><span data-lake-id=\"u331b593e\" id=\"u331b593e\">Reflect.get</span></p><p data-lake-id=\"0e687dd808dfc161578d80f86ee8c7e2\" id=\"0e687dd808dfc161578d80f86ee8c7e2\"><span data-lake-id=\"ub9b9a330\" id=\"ub9b9a330\">Reflect.set</span></p><p data-lake-id=\"935ae49c4a2f967e98fc094387346ae9\" id=\"935ae49c4a2f967e98fc094387346ae9\"><span data-lake-id=\"u9aa2c3f4\" id=\"u9aa2c3f4\">提供了一套对对象操作的api</span></p><p data-lake-id=\"3ae5829656745e6485ab83c3d36e73df\" id=\"3ae5829656745e6485ab83c3d36e73df\"><span data-lake-id=\"u2258931c\" id=\"u2258931c\">以前的操作方式可能会被废弃掉</span></p><p data-lake-id=\"6a3aeda5ea58acc443b9d8492f0f2513\" id=\"6a3aeda5ea58acc443b9d8492f0f2513\"><br></p><h2 data-lake-id=\"ScdtP\" id=\"ScdtP\"><span data-lake-id=\"u0a24ce5e\" id=\"u0a24ce5e\">ES2015 Promise</span></h2><p data-lake-id=\"5aa1f4e3545b531faec5c6d08910cc79\" id=\"5aa1f4e3545b531faec5c6d08910cc79\"><span data-lake-id=\"u833e9b75\" id=\"u833e9b75\">异步编程解决方案</span></p><p data-lake-id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" id=\"1c886fffe778a3b817a1f1c1f59fe3c6\"><br></p><h2 data-lake-id=\"MH3LB\" id=\"MH3LB\"><span data-lake-id=\"udc55a4c6\" id=\"udc55a4c6\">ES2015 class</span></h2><p data-lake-id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" id=\"7881d52bc2d1dc4119c91361c0fa0f4b\"><br></p><h2 data-lake-id=\"KsCTY\" id=\"KsCTY\"><span data-lake-id=\"u0e56aa23\" id=\"u0e56aa23\">es2015 静态方法</span></h2><p data-lake-id=\"79799ec53f319300f74fcc41f0058cec\" id=\"79799ec53f319300f74fcc41f0058cec\"><br></p><h2 data-lake-id=\"vfjM6\" id=\"vfjM6\"><span data-lake-id=\"ub61520f1\" id=\"ub61520f1\">es2015 类的继承</span></h2><p data-lake-id=\"7efec470976b0b17c48e127588a868ce\" id=\"7efec470976b0b17c48e127588a868ce\"><span data-lake-id=\"u677bc8d8\" id=\"u677bc8d8\">super</span></p><p data-lake-id=\"33ebfbffd369193e56112839083cf5c1\" id=\"33ebfbffd369193e56112839083cf5c1\"><br></p><h2 data-lake-id=\"S5ulm\" id=\"S5ulm\"><span data-lake-id=\"u08af8913\" id=\"u08af8913\">ES2015 Set</span></h2><p data-lake-id=\"f94c9962904b257af11f289e3bbff6e7\" id=\"f94c9962904b257af11f289e3bbff6e7\"><span data-lake-id=\"ud0aedb12\" id=\"ud0aedb12\">不重复的数组  常用来去重</span></p><p data-lake-id=\"1e183c566a0ed891fdcbeec767984bba\" id=\"1e183c566a0ed891fdcbeec767984bba\"><br></p><h2 data-lake-id=\"Lc8dG\" id=\"Lc8dG\"><span data-lake-id=\"u2686a169\" id=\"u2686a169\">ES2015 Map</span></h2><p data-lake-id=\"65484a8b9521727866edf723b803328b\" id=\"65484a8b9521727866edf723b803328b\"><span data-lake-id=\"u9ac1bffd\" id=\"u9ac1bffd\">let obj ={a:100}</span></p><p data-lake-id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" id=\"bab10b3ca9b07d421afa1f19f5c6e6df\"><span data-lake-id=\"u143dc5eb\" id=\"u143dc5eb\">let o = new Map()</span></p><p data-lake-id=\"2473241e478587a4c3c02d4b26ad1eb9\" id=\"2473241e478587a4c3c02d4b26ad1eb9\"><span data-lake-id=\"u49d5bd5b\" id=\"u49d5bd5b\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p data-lake-id=\"d9bc79d87b767025b040f75077c473f6\" id=\"d9bc79d87b767025b040f75077c473f6\"><span data-lake-id=\"ub03dec3d\" id=\"ub03dec3d\">严格的键值对集合，它的键可以是任意类型。</span></p><p data-lake-id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" id=\"db88f2cfd11df7498b2c8b1b2c79c88d\"><br></p><h2 data-lake-id=\"NNQQy\" id=\"NNQQy\"><span data-lake-id=\"u363e5ea8\" id=\"u363e5ea8\">ES2015 Symbol</span></h2><p data-lake-id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" id=\"4968a13ad478a6a5e83d44d0ef0fcee2\"><span data-lake-id=\"u97b1e6ce\" id=\"u97b1e6ce\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 data-lake-id=\"d4fdM\" id=\"d4fdM\"><span data-lake-id=\"u6b5d80b2\" id=\"u6b5d80b2\">Symbol.for</span></h4><p data-lake-id=\"u67569089\" id=\"u67569089\"><span data-lake-id=\"u2d70b6dd\" id=\"u2d70b6dd\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%9B%A0%E6%AD%A4Symbol.for(%5C%22aa%5C%22)%20%3D%20Symbol.%20for(%5C%22aa%5C%22)%20%2F%2F%20true%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E7%9A%84%E4%B8%8D%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82%5CnSymbol.for(true)%20%3D%3D%3D%20Symbol.%20for(%5C%22%20true%5C%22)%20%2F%2F%20true%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pvypQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"kC8Ep\" id=\"kC8Ep\"><span data-lake-id=\"u7eecfa25\" id=\"u7eecfa25\">Symbol用途</span></h4><ol list=\"u00b13e16\"><li fid=\"u0d9dfb3c\" data-lake-id=\"9815d6bc47bf82e15c1a8498b246b333\" id=\"9815d6bc47bf82e15c1a8498b246b333\"><span data-lake-id=\"u124034a3\" id=\"u124034a3\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code data-lake-id=\"u2f45c616\" id=\"u2f45c616\"><span data-lake-id=\"ue34ce9cb\" id=\"ue34ce9cb\">Symbol</span></code><span data-lake-id=\"ud9760c1e\" id=\"ud9760c1e\">作为属性就不会出现这种问题。</span></li><li fid=\"u0d9dfb3c\" data-lake-id=\"b47f21250795d2f5df56c0af532e30eb\" id=\"b47f21250795d2f5df56c0af532e30eb\"><span data-lake-id=\"u8f1179ae\" id=\"u8f1179ae\">可以为对象添加私有属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20name%20%3D%20Symbol()%5Cnclass%20Person%20%7B%5Cn%20%20%5Bname%5D%3A%20%5C%22xsl%5C%22%2C%5Cn%20%20%20%20say()%7B%5Cn%20%20%20%20%2F%2F%20%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE%5Cn%20%20%20%20console.log(this.%5Bname%5D)%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E8%80%8C%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A4%96%E9%83%A8%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%8D%E7%9F%A5%E9%81%93%E5%86%85%E9%83%A8%E7%9A%84%E5%94%AF%E4%B8%80%E9%94%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%80%8C%E6%97%A0%E6%B3%95%E5%9C%A8%E5%A4%96%E9%83%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E3%80%82%5Cnconst%20obj%20%3D%20new%20Person()%5Cnconsole.%20log(obj.say)%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QUZk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"baf611945256cb585362597404dce10b\" id=\"baf611945256cb585362597404dce10b\"><span data-lake-id=\"u229aa641\" id=\"u229aa641\">   3. </span><code data-lake-id=\"ua7e76c29\" id=\"ua7e76c29\"><span data-lake-id=\"u2bdc8071\" id=\"u2bdc8071\">Symbol</span></code><span data-lake-id=\"ua649e51c\" id=\"ua649e51c\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Symbol.iterator%5Cn%2F%2F%20Symbol.hasInstance%5Cn%2F%2F%20Symbol.toStringTag%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%5BSymbol.toStringTag%5D%3A%20%5C%22XObject%5C%22%5Cn%7D%5Cnconsole.log(obj.toString())%20%2F%2F%20%5B%20object%20XObject%5D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Dpc6B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"acf7adc4fe407cf00094c862cae7ae50\" id=\"acf7adc4fe407cf00094c862cae7ae50\"><span data-lake-id=\"u46ff891a\" id=\"u46ff891a\">对象的</span><code data-lake-id=\"ub032960a\" id=\"ub032960a\"><span data-lake-id=\"u3311bcd9\" id=\"u3311bcd9\">Symbol</span></code><span data-lake-id=\"u6b626f29\" id=\"u6b626f29\">属性无法通过</span><code data-lake-id=\"ue1d7523c\" id=\"ue1d7523c\"><span data-lake-id=\"u7eae829b\" id=\"u7eae829b\">for in</span></code><span data-lake-id=\"u9984d376\" id=\"u9984d376\">和</span><code data-lake-id=\"u7f8ab7e5\" id=\"u7f8ab7e5\"><span data-lake-id=\"ud80e8a1b\" id=\"ud80e8a1b\">Object.keys</span></code><span data-lake-id=\"uf0d1061e\" id=\"uf0d1061e\">获取，</span><code data-lake-id=\"u637b05fb\" id=\"u637b05fb\"><span data-lake-id=\"uf861266f\" id=\"uf861266f\">JSON.stringify</span></code><span data-lake-id=\"u4bcc4323\" id=\"u4bcc4323\">时</span><code data-lake-id=\"u827be8fa\" id=\"u827be8fa\"><span data-lake-id=\"ubc6103b9\" id=\"ubc6103b9\">Symbol</span></code><span data-lake-id=\"u92364b56\" id=\"u92364b56\">的属性也会被忽略掉。</span></p><p data-lake-id=\"u73717d60\" id=\"u73717d60\"><strong><u><span data-lake-id=\"ufe1e3dae\" id=\"ufe1e3dae\">可以使用</span></u></strong><code data-lake-id=\"u4f9d4aa2\" id=\"u4f9d4aa2\"><strong><u><span data-lake-id=\"u9b35d663\" id=\"u9b35d663\">Object.getOwnPropertySymbols</span></u></strong></code><strong><u><span data-lake-id=\"u6aaf7435\" id=\"u6aaf7435\">获取对象的所有</span></u></strong><code data-lake-id=\"u1fdee7a3\" id=\"u1fdee7a3\"><strong><u><span data-lake-id=\"ud0e8cc1a\" id=\"ud0e8cc1a\">Symbol</span></u></strong></code><strong><u><span data-lake-id=\"uf2a058d8\" id=\"uf2a058d8\">类型的属性。</span></u></strong></p><p data-lake-id=\"uccdb7f66\" id=\"uccdb7f66\"><br></p><h2 data-lake-id=\"Th2zC\" id=\"Th2zC\"><span data-lake-id=\"u8d7ed984\" id=\"u8d7ed984\">ES2015 for of</span></h2><p data-lake-id=\"6d770189f5efceef3d9d598e8bc90c1c\" id=\"6d770189f5efceef3d9d598e8bc90c1c\"><span data-lake-id=\"ud48e988a\" id=\"ud48e988a\">使用for of可以遍历所有数据类型</span></p><p data-lake-id=\"a6bc9413c55120431bf78843f2d3966b\" id=\"a6bc9413c55120431bf78843f2d3966b\"><span data-lake-id=\"ue22e9d53\" id=\"ue22e9d53\">默认可以对数组遍历</span></p><p data-lake-id=\"449688b548c3dde68eb750b4c01a9e4c\" id=\"449688b548c3dde68eb750b4c01a9e4c\"><span data-lake-id=\"u5fc7c328\" id=\"u5fc7c328\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p data-lake-id=\"u6c3ac6e6\" id=\"u6c3ac6e6\"><br></p><h2 data-lake-id=\"ynMdl\" id=\"ynMdl\"><span data-lake-id=\"ubf7d70fe\" id=\"ubf7d70fe\">ES2015 Iterable</span></h2><p data-lake-id=\"u399a8bcc\" id=\"u399a8bcc\"><br></p><p data-lake-id=\"9a75caaf895fc4f99c1a4adaf29812c6\" id=\"9a75caaf895fc4f99c1a4adaf29812c6\"><br></p><h2 data-lake-id=\"k6z3d\" id=\"k6z3d\"><span data-lake-id=\"ua6a73ef4\" id=\"ua6a73ef4\">ES2016 概述</span></h2><p data-lake-id=\"ue8809a66\" id=\"ue8809a66\"><br></p><h2 data-lake-id=\"gLEad\" id=\"gLEad\"><span data-lake-id=\"u3be239fd\" id=\"u3be239fd\">ES2017 概述</span></h2><p data-lake-id=\"u4626838c\" id=\"u4626838c\"><span data-lake-id=\"u5d50e8fc\" id=\"u5d50e8fc\">允许在参数和数组字面量后边加上小逗号</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u7e224043\" id=\"u7e224043\"><span data-lake-id=\"ueb2dd97d\" id=\"ueb2dd97d\">tags: [ES6]</span></p><p data-lake-id=\"uf1736aee\" id=\"uf1736aee\"><span data-lake-id=\"u7e12cd95\" id=\"u7e12cd95\">categories: [JavaScript]</span></p><card type=\"block\" name=\"hr\"></card><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"u2b234441\" id=\"u2b234441\">我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。</span></p><p data-lake-id=\"d3cbb52d6d52c80ccf2d65591448fab9\" id=\"d3cbb52d6d52c80ccf2d65591448fab9\"><br></p><p data-lake-id=\"f4ab73c661ebd0b22a68d7d6140bee8a\" id=\"f4ab73c661ebd0b22a68d7d6140bee8a\"><span data-lake-id=\"u45c6e9af\" id=\"u45c6e9af\">在浏览器环境中，JavaScript等于ECMAScript加上WEB API(DOM+BOM)</span></p><p data-lake-id=\"ff3ffd5440184610f6f8d2e694398516\" id=\"ff3ffd5440184610f6f8d2e694398516\"><br></p><p data-lake-id=\"81a82c175e6408af98467dc09c2c0870\" id=\"81a82c175e6408af98467dc09c2c0870\"><span data-lake-id=\"u8883ad7f\" id=\"u8883ad7f\">在NodeJs环境中，JavaScript等于ECMAScript加上Node APIS(fs、net、etc.)</span></p><p data-lake-id=\"48122c837e9e1e883a3abd1d8c31c74d\" id=\"48122c837e9e1e883a3abd1d8c31c74d\"><br></p><p data-lake-id=\"a3f83d1af971926a0ebd593ef4ae133b\" id=\"a3f83d1af971926a0ebd593ef4ae133b\"><span data-lake-id=\"u6f4e7c70\" id=\"u6f4e7c70\">所以，JavaScript语言本身指的就是ECMAScript。</span></p><p data-lake-id=\"7d3162cfb13cf8cd0b519edb15ae2487\" id=\"7d3162cfb13cf8cd0b519edb15ae2487\"><br></p><p data-lake-id=\"2d3afc41d8fec39eb9f0aecc60ef450a\" id=\"2d3afc41d8fec39eb9f0aecc60ef450a\"><span data-lake-id=\"u7e1b415b\" id=\"u7e1b415b\">由于ES5.1以后的版本相较于之前有了很大的改动，有很多人就习惯简称它们为ES6，其实他的准确简称应该是ES2015。</span></p><p data-lake-id=\"u39a7d6bd\" id=\"u39a7d6bd\"><br></p><h2 data-lake-id=\"HkOqc\" id=\"HkOqc\"><span data-lake-id=\"u2bb1e948\" id=\"u2bb1e948\">ES2015 let与块级作用域</span></h2><p data-lake-id=\"a7d58fd87dfe4f73457cb2884320ffb8\" id=\"a7d58fd87dfe4f73457cb2884320ffb8\"><span data-lake-id=\"uc44e85d1\" id=\"uc44e85d1\">var会被变量提升，let不会有这个问题</span></p><p data-lake-id=\"0013fb4aa6397b6b4655835fd2adb9d8\" id=\"0013fb4aa6397b6b4655835fd2adb9d8\"><br></p><h2 data-lake-id=\"ZNvYJ\" id=\"ZNvYJ\"><span data-lake-id=\"uaf98899b\" id=\"uaf98899b\">ES2015 const</span></h2><p data-lake-id=\"7232ee60dc640e8c0fa206900fe41af0\" id=\"7232ee60dc640e8c0fa206900fe41af0\"><span data-lake-id=\"u8c754977\" id=\"u8c754977\">const声明的常量不能再次修改引用的内存地址。</span></p><p data-lake-id=\"96ca37a3ac7e214753cb6e4f9caa78f6\" id=\"96ca37a3ac7e214753cb6e4f9caa78f6\"><br></p><h2 data-lake-id=\"J0cTK\" id=\"J0cTK\"><span data-lake-id=\"u7c978d71\" id=\"u7c978d71\">ES2015 数组的解构</span></h2><p data-lake-id=\"0d50255207efb51be0471eeddf106559\" id=\"0d50255207efb51be0471eeddf106559\"><span data-lake-id=\"u80d4b94c\" id=\"u80d4b94c\">const [a.b] = [100, 200]</span></p><p data-lake-id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\" id=\"72f0c84cc8151b31f1aa4e82ddd25dbf\"><span data-lake-id=\"ua50333d3\" id=\"ua50333d3\">可以根据位置提取对应的值</span></p><p data-lake-id=\"a909120279a6cc355c3098367cd76fc8\" id=\"a909120279a6cc355c3098367cd76fc8\"><br></p><h2 data-lake-id=\"CZhW7\" id=\"CZhW7\"><span data-lake-id=\"u4fec2785\" id=\"u4fec2785\">ES2015 对象的解构</span></h2><p data-lake-id=\"f73a4e69d9f761ca25c9a9287f80eb7f\" id=\"f73a4e69d9f761ca25c9a9287f80eb7f\"><span data-lake-id=\"u784ad796\" id=\"u784ad796\">const {a} = {a:200}</span></p><p data-lake-id=\"fc5a7abc8887d704b807426868c17df3\" id=\"fc5a7abc8887d704b807426868c17df3\"><span data-lake-id=\"ude7671fa\" id=\"ude7671fa\">和数组不同的是，它需要指定解构的属性名</span></p><p data-lake-id=\"239a5af75036cda388b52e0a6977cd0e\" id=\"239a5af75036cda388b52e0a6977cd0e\"><br></p><h2 data-lake-id=\"e8qOh\" id=\"e8qOh\"><span data-lake-id=\"u2fa6773c\" id=\"u2fa6773c\">ES2015 模板字符串</span></h2><p data-lake-id=\"0efa35e8f8a9a73faffe3fc06c8698f6\" id=\"0efa35e8f8a9a73faffe3fc06c8698f6\"><span data-lake-id=\"ub5a0ec49\" id=\"ub5a0ec49\">和传统的字符串相比，支持多行字符串，还可以使用插值表达式拼接内容，而不用像传统字符串用+号拼接，更便捷。</span></p><p data-lake-id=\"4030a3163fed6ebfa9b6ca59c4d47c33\" id=\"4030a3163fed6ebfa9b6ca59c4d47c33\"><br></p><h2 data-lake-id=\"UjcAB\" id=\"UjcAB\"><span data-lake-id=\"u0a47cf5e\" id=\"u0a47cf5e\">ES2015 带标签的模板字符串</span></h2><p data-lake-id=\"fa847889a38f60e93911037652d375c7\" id=\"fa847889a38f60e93911037652d375c7\"><span data-lake-id=\"u27c6f6f5\" id=\"u27c6f6f5\">const str = console.log'hello wolrd'</span></p><p data-lake-id=\"f8c8c795f5f8836b2ead806315c9ddbc\" id=\"f8c8c795f5f8836b2ead806315c9ddbc\"><span data-lake-id=\"ueeab9416\" id=\"ueeab9416\">模板字符串前面可以带上一个函数，这个函数中可以接收到所有表达式出现的值。</span></p><p data-lake-id=\"2366c3dc2a42397f46f2404396517423\" id=\"2366c3dc2a42397f46f2404396517423\"><br></p><h2 data-lake-id=\"fgbbo\" id=\"fgbbo\"><span data-lake-id=\"uf09f2995\" id=\"uf09f2995\">ES2015 字符串的扩展方法</span></h2><p data-lake-id=\"57371814a3d7b11e0501c5af3faca3a5\" id=\"57371814a3d7b11e0501c5af3faca3a5\"><span data-lake-id=\"uda029414\" id=\"uda029414\">startWith</span></p><p data-lake-id=\"f00a311809e779a530ea987f12288f1d\" id=\"f00a311809e779a530ea987f12288f1d\"><span data-lake-id=\"u3f830cb3\" id=\"u3f830cb3\">endWith</span></p><p data-lake-id=\"60969596c3ae112f93567cc5731e4dfc\" id=\"60969596c3ae112f93567cc5731e4dfc\"><span data-lake-id=\"ueb1b6573\" id=\"ueb1b6573\">includes</span></p><p data-lake-id=\"4a632fc50f8d951732842457a24b2019\" id=\"4a632fc50f8d951732842457a24b2019\"><br></p><h2 data-lake-id=\"VA2FF\" id=\"VA2FF\"><span data-lake-id=\"u6321e849\" id=\"u6321e849\">ES 2015 参数默认值</span></h2><p data-lake-id=\"558108fa39e43277eec2bb466f8ac466\" id=\"558108fa39e43277eec2bb466f8ac466\"><span data-lake-id=\"u8621bffa\" id=\"u8621bffa\">function fn(a = 100){}</span></p><p data-lake-id=\"9948aefd5dd067496238fc9dc7b1b95b\" id=\"9948aefd5dd067496238fc9dc7b1b95b\"><span data-lake-id=\"u2cf3db66\" id=\"u2cf3db66\">可以在形参后面加上=值</span></p><p data-lake-id=\"a4c17d0d43f12f905c3304b9bd4451e5\" id=\"a4c17d0d43f12f905c3304b9bd4451e5\"><span data-lake-id=\"uca09f316\" id=\"uca09f316\">一定要将需要添加默认值的形参放在最后，不然可能导致参数默认值无法正常工作。比如:</span></p><p data-lake-id=\"a35a69e0ed7a099623ced3b2c442b5e2\" id=\"a35a69e0ed7a099623ced3b2c442b5e2\"><span data-lake-id=\"u97105e23\" id=\"u97105e23\">function fn(a=100,b){}</span></p><p data-lake-id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\" id=\"8dbbfcdae94a304fe279c4eb1b6ab29e\"><span data-lake-id=\"u203f4bce\" id=\"u203f4bce\">fn(100) //我想要形参a有一个默认值，但是我可能只会传这一个参数，a的参数默认值就不能正常工作。</span></p><p data-lake-id=\"4a3fd9b4f90969d634685e4e90d004c2\" id=\"4a3fd9b4f90969d634685e4e90d004c2\"><span data-lake-id=\"u015a65ee\" id=\"u015a65ee\">因为参数是依次传递的，可选的参数应该放在后面，保证必传的参数能够优先传递。</span></p><p data-lake-id=\"3ef505ff83aecba7c5ff389b1005f9d5\" id=\"3ef505ff83aecba7c5ff389b1005f9d5\"><br></p><h2 data-lake-id=\"dImiD\" id=\"dImiD\"><span data-lake-id=\"u9ecfe781\" id=\"u9ecfe781\">ES2015 剩余参数</span></h2><p data-lake-id=\"54c0c20b2fea16c59e29a2bb15f4700d\" id=\"54c0c20b2fea16c59e29a2bb15f4700d\"><span data-lake-id=\"ufe4f4f4a\" id=\"ufe4f4f4a\">arguments</span></p><p data-lake-id=\"ef6d7a459ce386feaaa5c1c084eec86b\" id=\"ef6d7a459ce386feaaa5c1c084eec86b\"><span data-lake-id=\"u17c92a10\" id=\"u17c92a10\">...args</span></p><p data-lake-id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\" id=\"8bb5a1a1c75ff85327cfc3d7e63bc917\"><br></p><h2 data-lake-id=\"BXrvd\" id=\"BXrvd\"><span data-lake-id=\"uc6dd2b03\" id=\"uc6dd2b03\">ES2015 展开数组</span></h2><p data-lake-id=\"d9e625370f98b10cd1303e97bfd831ca\" id=\"d9e625370f98b10cd1303e97bfd831ca\"><span data-lake-id=\"u9c9756d6\" id=\"u9c9756d6\">console.log(...[100,200,300])</span></p><p data-lake-id=\"658964f1c65281a4d07047295f64ddea\" id=\"658964f1c65281a4d07047295f64ddea\"><br></p><h2 data-lake-id=\"naD2s\" id=\"naD2s\"><span data-lake-id=\"u3faf63ad\" id=\"u3faf63ad\">ES2015 箭头函数与this</span></h2><p data-lake-id=\"019a46c230981e3ca8b889f0aeacb795\" id=\"019a46c230981e3ca8b889f0aeacb795\"><span data-lake-id=\"ud68d8b6b\" id=\"ud68d8b6b\">在箭头函数中没有this，它的this指向它的上级作用域。</span></p><p data-lake-id=\"8d422cebc120b77563d29750149ffbf7\" id=\"8d422cebc120b77563d29750149ffbf7\"><br></p><h2 data-lake-id=\"p8QSG\" id=\"p8QSG\"><span data-lake-id=\"u95ba4135\" id=\"u95ba4135\">ES2015 对象字面量的增强</span></h2><p data-lake-id=\"d6b42abd6a4978ff55469ddde4627a2f\" id=\"d6b42abd6a4978ff55469ddde4627a2f\"><span data-lake-id=\"u25c19cb9\" id=\"u25c19cb9\">对象中可以省略属性名对应的值，前提是属性名和字面量名称相同。</span></p><p data-lake-id=\"92ca9371cc8a17915cd9de516397a95f\" id=\"92ca9371cc8a17915cd9de516397a95f\"><br></p><h2 data-lake-id=\"tW994\" id=\"tW994\"><span data-lake-id=\"u0e83d7f8\" id=\"u0e83d7f8\">ES2015 Object.assign</span></h2><p data-lake-id=\"ec09fd5129f5f645630a2fccdf53b7f9\" id=\"ec09fd5129f5f645630a2fccdf53b7f9\"><span data-lake-id=\"u54e01d4d\" id=\"u54e01d4d\">var obj3=Object.assign(obj1, obj2)</span></p><p data-lake-id=\"0de6ed9e49306e6d0625664f541d2e23\" id=\"0de6ed9e49306e6d0625664f541d2e23\"><span data-lake-id=\"uc345f071\" id=\"uc345f071\">用obj2覆盖obj1对象，返回的obj3它其实就是obj1</span></p><p data-lake-id=\"41e5a6062d6db1bdcd247b00229e3087\" id=\"41e5a6062d6db1bdcd247b00229e3087\"><br></p><h2 data-lake-id=\"rYaWA\" id=\"rYaWA\"><span data-lake-id=\"ud0cf2a0a\" id=\"ud0cf2a0a\">ES2015 Object.is</span></h2><p data-lake-id=\"0cc01364bf48f3357d49e870987c3b13\" id=\"0cc01364bf48f3357d49e870987c3b13\"><span data-lake-id=\"u2944ddf3\" id=\"u2944ddf3\">==只比较值，不比较类型，会自动类型转换</span></p><p data-lake-id=\"cd3806ab093d7491c684ae71b24e3272\" id=\"cd3806ab093d7491c684ae71b24e3272\"><span data-lake-id=\"u654db60e\" id=\"u654db60e\">===比较值和类型，严格模式</span></p><p data-lake-id=\"6d22ab8995f223b751af30ad66e36e36\" id=\"6d22ab8995f223b751af30ad66e36e36\"><span data-lake-id=\"u91c266a2\" id=\"u91c266a2\">NaN ===NaN //false</span></p><p data-lake-id=\"e33f6ca4086c79eeffa1532dcace1e93\" id=\"e33f6ca4086c79eeffa1532dcace1e93\"><span data-lake-id=\"u1ebb28e4\" id=\"u1ebb28e4\">Object.is(NaN,NaN)//true</span></p><p data-lake-id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\" id=\"58dfcd55dfa8a891ceb3e84b3db0cb87\"><br></p><h2 data-lake-id=\"pYv7C\" id=\"pYv7C\"><span data-lake-id=\"u2fcbf904\" id=\"u2fcbf904\">ES2015 Proxy</span></h2><p data-lake-id=\"1e139c7f6ecbf4bf81fce3789241da0a\" id=\"1e139c7f6ecbf4bf81fce3789241da0a\"><span data-lake-id=\"u42b52b32\" id=\"u42b52b32\">可以对对象的属性改动进行检测和拦截</span></p><p data-lake-id=\"9935408458e3fc9d528ad1a38a984dd4\" id=\"9935408458e3fc9d528ad1a38a984dd4\"><br></p><h2 data-lake-id=\"j4sVE\" id=\"j4sVE\"><span data-lake-id=\"u20ab6a6b\" id=\"u20ab6a6b\">ES2015 Proxy对比Object.defineProperty</span></h2><p data-lake-id=\"d35def387befa2da830e430e209ec0f8\" id=\"d35def387befa2da830e430e209ec0f8\"><span data-lake-id=\"u59c94405\" id=\"u59c94405\">Proxy功能更强大一些。</span></p><p data-lake-id=\"790ef2815013f32c9fb7eabc6d396986\" id=\"790ef2815013f32c9fb7eabc6d396986\"><span data-lake-id=\"u3ac44ea8\" id=\"u3ac44ea8\">proxy能够检测defineProperty检测不到的行为，比如属性删除，方法调用</span></p><p data-lake-id=\"16674882cd320bd1432f514cdd7346f8\" id=\"16674882cd320bd1432f514cdd7346f8\"><span data-lake-id=\"u4bb87de6\" id=\"u4bb87de6\">可以对数组检测</span></p><p data-lake-id=\"9b9bf0c27590b1530284a78d696b5fa2\" id=\"9b9bf0c27590b1530284a78d696b5fa2\"><span data-lake-id=\"uad20dbc9\" id=\"uad20dbc9\">Proxy是一种非侵入式的方式进行代理，不用对原来的对象做任何改动，而Object.definePropery则需要我们对原对象做一些特有的改动。</span></p><p data-lake-id=\"4394df20f1e858c6e5a82814be7796bc\" id=\"4394df20f1e858c6e5a82814be7796bc\"><br></p><h2 data-lake-id=\"B8pRM\" id=\"B8pRM\"><span data-lake-id=\"u05289cfd\" id=\"u05289cfd\">ES2015 Reflect</span></h2><p data-lake-id=\"51d9a7aa69ca41ffecae23265ab50a25\" id=\"51d9a7aa69ca41ffecae23265ab50a25\"><span data-lake-id=\"u331b593e\" id=\"u331b593e\">Reflect.get</span></p><p data-lake-id=\"0e687dd808dfc161578d80f86ee8c7e2\" id=\"0e687dd808dfc161578d80f86ee8c7e2\"><span data-lake-id=\"ub9b9a330\" id=\"ub9b9a330\">Reflect.set</span></p><p data-lake-id=\"935ae49c4a2f967e98fc094387346ae9\" id=\"935ae49c4a2f967e98fc094387346ae9\"><span data-lake-id=\"u9aa2c3f4\" id=\"u9aa2c3f4\">提供了一套对对象操作的api</span></p><p data-lake-id=\"3ae5829656745e6485ab83c3d36e73df\" id=\"3ae5829656745e6485ab83c3d36e73df\"><span data-lake-id=\"u2258931c\" id=\"u2258931c\">以前的操作方式可能会被废弃掉</span></p><p data-lake-id=\"6a3aeda5ea58acc443b9d8492f0f2513\" id=\"6a3aeda5ea58acc443b9d8492f0f2513\"><br></p><h2 data-lake-id=\"ScdtP\" id=\"ScdtP\"><span data-lake-id=\"u0a24ce5e\" id=\"u0a24ce5e\">ES2015 Promise</span></h2><p data-lake-id=\"5aa1f4e3545b531faec5c6d08910cc79\" id=\"5aa1f4e3545b531faec5c6d08910cc79\"><span data-lake-id=\"u833e9b75\" id=\"u833e9b75\">异步编程解决方案</span></p><p data-lake-id=\"1c886fffe778a3b817a1f1c1f59fe3c6\" id=\"1c886fffe778a3b817a1f1c1f59fe3c6\"><br></p><h2 data-lake-id=\"MH3LB\" id=\"MH3LB\"><span data-lake-id=\"udc55a4c6\" id=\"udc55a4c6\">ES2015 class</span></h2><p data-lake-id=\"7881d52bc2d1dc4119c91361c0fa0f4b\" id=\"7881d52bc2d1dc4119c91361c0fa0f4b\"><br></p><h2 data-lake-id=\"KsCTY\" id=\"KsCTY\"><span data-lake-id=\"u0e56aa23\" id=\"u0e56aa23\">es2015 静态方法</span></h2><p data-lake-id=\"79799ec53f319300f74fcc41f0058cec\" id=\"79799ec53f319300f74fcc41f0058cec\"><br></p><h2 data-lake-id=\"vfjM6\" id=\"vfjM6\"><span data-lake-id=\"ub61520f1\" id=\"ub61520f1\">es2015 类的继承</span></h2><p data-lake-id=\"7efec470976b0b17c48e127588a868ce\" id=\"7efec470976b0b17c48e127588a868ce\"><span data-lake-id=\"u677bc8d8\" id=\"u677bc8d8\">super</span></p><p data-lake-id=\"33ebfbffd369193e56112839083cf5c1\" id=\"33ebfbffd369193e56112839083cf5c1\"><br></p><h2 data-lake-id=\"S5ulm\" id=\"S5ulm\"><span data-lake-id=\"u08af8913\" id=\"u08af8913\">ES2015 Set</span></h2><p data-lake-id=\"f94c9962904b257af11f289e3bbff6e7\" id=\"f94c9962904b257af11f289e3bbff6e7\"><span data-lake-id=\"ud0aedb12\" id=\"ud0aedb12\">不重复的数组  常用来去重</span></p><p data-lake-id=\"1e183c566a0ed891fdcbeec767984bba\" id=\"1e183c566a0ed891fdcbeec767984bba\"><br></p><h2 data-lake-id=\"Lc8dG\" id=\"Lc8dG\"><span data-lake-id=\"u2686a169\" id=\"u2686a169\">ES2015 Map</span></h2><p data-lake-id=\"65484a8b9521727866edf723b803328b\" id=\"65484a8b9521727866edf723b803328b\"><span data-lake-id=\"u9ac1bffd\" id=\"u9ac1bffd\">let obj ={a:100}</span></p><p data-lake-id=\"bab10b3ca9b07d421afa1f19f5c6e6df\" id=\"bab10b3ca9b07d421afa1f19f5c6e6df\"><span data-lake-id=\"u143dc5eb\" id=\"u143dc5eb\">let o = new Map()</span></p><p data-lake-id=\"2473241e478587a4c3c02d4b26ad1eb9\" id=\"2473241e478587a4c3c02d4b26ad1eb9\"><span data-lake-id=\"u49d5bd5b\" id=\"u49d5bd5b\">o.set(obj, 666) //它的键就是obj对象本身</span></p><p data-lake-id=\"d9bc79d87b767025b040f75077c473f6\" id=\"d9bc79d87b767025b040f75077c473f6\"><span data-lake-id=\"ub03dec3d\" id=\"ub03dec3d\">严格的键值对集合，它的键可以是任意类型。</span></p><p data-lake-id=\"db88f2cfd11df7498b2c8b1b2c79c88d\" id=\"db88f2cfd11df7498b2c8b1b2c79c88d\"><br></p><h2 data-lake-id=\"NNQQy\" id=\"NNQQy\"><span data-lake-id=\"u363e5ea8\" id=\"u363e5ea8\">ES2015 Symbol</span></h2><p data-lake-id=\"4968a13ad478a6a5e83d44d0ef0fcee2\" id=\"4968a13ad478a6a5e83d44d0ef0fcee2\"><span data-lake-id=\"u97b1e6ce\" id=\"u97b1e6ce\">Symbol表示独一无二的值，他可以作为对象的键( key)。</span></p><h4 data-lake-id=\"d4fdM\" id=\"d4fdM\"><span data-lake-id=\"u6b5d80b2\" id=\"u6b5d80b2\">Symbol.for</span></h4><p data-lake-id=\"u67569089\" id=\"u67569089\"><span data-lake-id=\"u2d70b6dd\" id=\"u2d70b6dd\">内部维护了一个全局的注册表，提供了字符串和Symbol的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%9B%A0%E6%AD%A4Symbol.for(%5C%22aa%5C%22)%20%3D%20Symbol.%20for(%5C%22aa%5C%22)%20%2F%2F%20true%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E7%9A%84%E4%B8%8D%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82%5CnSymbol.for(true)%20%3D%3D%3D%20Symbol.%20for(%5C%22%20true%5C%22)%20%2F%2F%20true%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pvypQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"kC8Ep\" id=\"kC8Ep\"><span data-lake-id=\"u7eecfa25\" id=\"u7eecfa25\">Symbol用途</span></h4><ol list=\"u00b13e16\"><li fid=\"u0d9dfb3c\" data-lake-id=\"9815d6bc47bf82e15c1a8498b246b333\" id=\"9815d6bc47bf82e15c1a8498b246b333\"><span data-lake-id=\"u124034a3\" id=\"u124034a3\">我们在使用第三方模块时，想要对其扩展，由于我们不知道内部具体定义的哪些属性，在这种情况下，去为其扩展属性，就会很大可能发生冲突的问题。那么使用</span><code data-lake-id=\"u2f45c616\" id=\"u2f45c616\"><span data-lake-id=\"ue34ce9cb\" id=\"ue34ce9cb\">Symbol</span></code><span data-lake-id=\"ud9760c1e\" id=\"ud9760c1e\">作为属性就不会出现这种问题。</span></li><li fid=\"u0d9dfb3c\" data-lake-id=\"b47f21250795d2f5df56c0af532e30eb\" id=\"b47f21250795d2f5df56c0af532e30eb\"><span data-lake-id=\"u8f1179ae\" id=\"u8f1179ae\">可以为对象添加私有属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20name%20%3D%20Symbol()%5Cnclass%20Person%20%7B%5Cn%20%20%5Bname%5D%3A%20%5C%22xsl%5C%22%2C%5Cn%20%20%20%20say()%7B%5Cn%20%20%20%20%2F%2F%20%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE%5Cn%20%20%20%20console.log(this.%5Bname%5D)%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E8%80%8C%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A4%96%E9%83%A8%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%8D%E7%9F%A5%E9%81%93%E5%86%85%E9%83%A8%E7%9A%84%E5%94%AF%E4%B8%80%E9%94%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%80%8C%E6%97%A0%E6%B3%95%E5%9C%A8%E5%A4%96%E9%83%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E3%80%82%5Cnconst%20obj%20%3D%20new%20Person()%5Cnconsole.%20log(obj.say)%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QUZk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"baf611945256cb585362597404dce10b\" id=\"baf611945256cb585362597404dce10b\"><span data-lake-id=\"u229aa641\" id=\"u229aa641\">   3. </span><code data-lake-id=\"ua7e76c29\" id=\"ua7e76c29\"><span data-lake-id=\"u2bdc8071\" id=\"u2bdc8071\">Symbol</span></code><span data-lake-id=\"ua649e51c\" id=\"ua649e51c\">提供了很多内置常量，用于作为内部方法的标识。这些标识符可以让自定义对象实现JS当中内置的接口。比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Symbol.iterator%5Cn%2F%2F%20Symbol.hasInstance%5Cn%2F%2F%20Symbol.toStringTag%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%5BSymbol.toStringTag%5D%3A%20%5C%22XObject%5C%22%5Cn%7D%5Cnconsole.log(obj.toString())%20%2F%2F%20%5B%20object%20XObject%5D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Dpc6B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"acf7adc4fe407cf00094c862cae7ae50\" id=\"acf7adc4fe407cf00094c862cae7ae50\"><span data-lake-id=\"u46ff891a\" id=\"u46ff891a\">对象的</span><code data-lake-id=\"ub032960a\" id=\"ub032960a\"><span data-lake-id=\"u3311bcd9\" id=\"u3311bcd9\">Symbol</span></code><span data-lake-id=\"u6b626f29\" id=\"u6b626f29\">属性无法通过</span><code data-lake-id=\"ue1d7523c\" id=\"ue1d7523c\"><span data-lake-id=\"u7eae829b\" id=\"u7eae829b\">for in</span></code><span data-lake-id=\"u9984d376\" id=\"u9984d376\">和</span><code data-lake-id=\"u7f8ab7e5\" id=\"u7f8ab7e5\"><span data-lake-id=\"ud80e8a1b\" id=\"ud80e8a1b\">Object.keys</span></code><span data-lake-id=\"uf0d1061e\" id=\"uf0d1061e\">获取，</span><code data-lake-id=\"u637b05fb\" id=\"u637b05fb\"><span data-lake-id=\"uf861266f\" id=\"uf861266f\">JSON.stringify</span></code><span data-lake-id=\"u4bcc4323\" id=\"u4bcc4323\">时</span><code data-lake-id=\"u827be8fa\" id=\"u827be8fa\"><span data-lake-id=\"ubc6103b9\" id=\"ubc6103b9\">Symbol</span></code><span data-lake-id=\"u92364b56\" id=\"u92364b56\">的属性也会被忽略掉。</span></p><p data-lake-id=\"u73717d60\" id=\"u73717d60\"><strong><u><span data-lake-id=\"ufe1e3dae\" id=\"ufe1e3dae\">可以使用</span></u></strong><code data-lake-id=\"u4f9d4aa2\" id=\"u4f9d4aa2\"><strong><u><span data-lake-id=\"u9b35d663\" id=\"u9b35d663\">Object.getOwnPropertySymbols</span></u></strong></code><strong><u><span data-lake-id=\"u6aaf7435\" id=\"u6aaf7435\">获取对象的所有</span></u></strong><code data-lake-id=\"u1fdee7a3\" id=\"u1fdee7a3\"><strong><u><span data-lake-id=\"ud0e8cc1a\" id=\"ud0e8cc1a\">Symbol</span></u></strong></code><strong><u><span data-lake-id=\"uf2a058d8\" id=\"uf2a058d8\">类型的属性。</span></u></strong></p><p data-lake-id=\"uccdb7f66\" id=\"uccdb7f66\"><br></p><h2 data-lake-id=\"Th2zC\" id=\"Th2zC\"><span data-lake-id=\"u8d7ed984\" id=\"u8d7ed984\">ES2015 for of</span></h2><p data-lake-id=\"6d770189f5efceef3d9d598e8bc90c1c\" id=\"6d770189f5efceef3d9d598e8bc90c1c\"><span data-lake-id=\"ud48e988a\" id=\"ud48e988a\">使用for of可以遍历所有数据类型</span></p><p data-lake-id=\"a6bc9413c55120431bf78843f2d3966b\" id=\"a6bc9413c55120431bf78843f2d3966b\"><span data-lake-id=\"ue22e9d53\" id=\"ue22e9d53\">默认可以对数组遍历</span></p><p data-lake-id=\"449688b548c3dde68eb750b4c01a9e4c\" id=\"449688b548c3dde68eb750b4c01a9e4c\"><span data-lake-id=\"u5fc7c328\" id=\"u5fc7c328\">需要实现统一的Iterable接口，数组默认内部已经实现了。</span></p><p data-lake-id=\"u6c3ac6e6\" id=\"u6c3ac6e6\"><br></p><h2 data-lake-id=\"ynMdl\" id=\"ynMdl\"><span data-lake-id=\"ubf7d70fe\" id=\"ubf7d70fe\">ES2015 Iterable</span></h2><p data-lake-id=\"u399a8bcc\" id=\"u399a8bcc\"><br></p><p data-lake-id=\"9a75caaf895fc4f99c1a4adaf29812c6\" id=\"9a75caaf895fc4f99c1a4adaf29812c6\"><br></p><h2 data-lake-id=\"k6z3d\" id=\"k6z3d\"><span data-lake-id=\"ua6a73ef4\" id=\"ua6a73ef4\">ES2016 概述</span></h2><p data-lake-id=\"ue8809a66\" id=\"ue8809a66\"><br></p><h2 data-lake-id=\"gLEad\" id=\"gLEad\"><span data-lake-id=\"u3be239fd\" id=\"u3be239fd\">ES2017 概述</span></h2><p data-lake-id=\"u4626838c\" id=\"u4626838c\"><span data-lake-id=\"u5d50e8fc\" id=\"u5d50e8fc\">允许在参数和数组字面量后边加上小逗号</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T09:49:12.000Z",
    "deleted_at": null,
    "created_at": "2021-05-26T07:47:31.000Z",
    "updated_at": "2022-03-31T09:49:12.000Z",
    "published_at": "2022-03-31T09:49:12.000Z",
    "first_published_at": "2021-05-28T02:40:48.000Z",
    "word_count": 1340,
    "cover": null,
    "description": "tags: [ES6]categories: [JavaScript]我们常说ECMAScript是一种脚本语言，通常我们把ECMAScript看做是一种标准化规范，而实际上是JavaScript是ECMAScript的扩展语言。在浏览器环境中，JavaScript等于ECMAScript加上...",
    "custom_description": null,
    "hits": 6,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 45978651,
    "slug": "mf50d2",
    "title": "Javascript中的异步编程",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。\n",
    "body_draft": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"><span class=\"ne-text\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"uca606a48\" id=\"uca606a48\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\"><span data-lake-id=\"uca606a48\" id=\"uca606a48\">javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-06-06T14:28:21.000Z",
    "deleted_at": null,
    "created_at": "2021-05-25T09:49:59.000Z",
    "updated_at": "2021-06-06T14:28:21.000Z",
    "published_at": "2021-06-06T14:28:21.000Z",
    "first_published_at": "2021-05-25T10:14:36.000Z",
    "word_count": 44,
    "cover": null,
    "description": "javascript被设计为单线程的，因为如果是多线程的话，在多个并行任务中去操作DOM会发生意想不到的内容。",
    "custom_description": null,
    "hits": 2,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 45802825,
    "slug": "kegf2o",
    "title": "说透函数式编程",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。\n<a name=\"uZi3e\"></a>\n## 是什么\n函数式编程(Function Programming FP)，FP是编程范式之一。<br />函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 <br />函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。<br />有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。\n```javascript\n// 数学中的函数\ny = sin(x) // 描述x和y之间的映射关系\n```\n由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。\n\n上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。\n<a name=\"V96u2\"></a>\n## 使用函数式编程的好处\n\n- 函数式编程可以抛弃this，不再向面向对象那样经常用到this\n- 打包过程中可以更好的利用tree shaking过滤无用代码\n- 方便测试和并行处理\n\n了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。\n<a name=\"alQOW\"></a>\n## 函数是一等公民\n在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。<br />总结来说，函数是一等公民，它有以下特点：\n\n- 函数可以存储在变量中\n- 函数可以作为参数\n- 函数可以作为返回值\n\n<a name=\"q2F1g\"></a>\n## 高阶函数\n高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。<br />我们为什么要使用高阶函数呢？\n<a name=\"wMS1Q\"></a>\n### 使用高阶函数的意义/好处\n\n- 使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。\n- 对通用问题进行抽象，方便重复调用\n- 使代码更加简洁\n\n<a name=\"Bs8R5\"></a>\n## 闭包\n闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。<br />换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。\n\n深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。这就是闭包的本质。\n\n<a name=\"Z3v0P\"></a>\n### 使用闭包的好处\n延长了外部函数中的变量的作用范围。\n\n<a name=\"Ynvkv\"></a>\n## 纯函数\n纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。<br />也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。<br />纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。\n<a name=\"kqmwJ\"></a>\n### 使用纯函数的好处\n\n- 可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果**缓存**起来，避免重复调用，提高性能。\n- 方便测试\n- 方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。\n\n<a name=\"by5B8\"></a>\n## 副作用\n副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。<br />副作用可能的来源：配置文件、数据库、获取用户的输入等。<br />所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。\n\n<a name=\"r2yRV\"></a>\n## 柯里化(Curry)\n当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。<br />柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的**缓存**。\n<a name=\"KngGa\"></a>\n### 柯里化的好处\n\n- 让函数变得灵活，让函数的粒度变得更小\n- 可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。\n<a name=\"XbhSR\"></a>\n### 通用柯里化函数\n```javascript\nfunction curry(fn){\n  return function iner(...args){\n    if(fn.length !== args.length){\n      return iner(args.concat(Array.from(arguments)))\n    }else{\n      fn.apply(fn, args)\n    }\n  }\n}\n```\n<a name=\"kas1N\"></a>\n## 函数组合(compose)\n纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。\n<a name=\"SiigU\"></a>\n### 实现原理\n```javascript\nfunction compose(...args){\n  return function (value){\n    return args.reduceRight(function(ret, fn){\n      return fn(ret)\n    }, value)\n  }\n}\n```\n函数组合需要满足**结合律**，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。\n\n",
    "body_draft": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。\n<a name=\"uZi3e\"></a>\n## 是什么\n函数式编程(Function Programming FP)，FP是编程范式之一。<br />函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 <br />函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。<br />有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。\n```javascript\n// 数学中的函数\ny = sin(x) // 描述x和y之间的映射关系\n```\n由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。\n\n上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。\n<a name=\"V96u2\"></a>\n## 使用函数式编程的好处\n\n- 函数式编程可以抛弃this，不再向面向对象那样经常用到this\n- 打包过程中可以更好的利用tree shaking过滤无用代码\n- 方便测试和并行处理\n\n了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。\n<a name=\"alQOW\"></a>\n## 函数是一等公民\n在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。<br />总结来说，函数是一等公民，它有以下特点：\n\n- 函数可以存储在变量中\n- 函数可以作为参数\n- 函数可以作为返回值\n\n<a name=\"q2F1g\"></a>\n## 高阶函数\n高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。<br />我们为什么要使用高阶函数呢？\n<a name=\"wMS1Q\"></a>\n### 使用高阶函数的意义/好处\n\n- 使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。\n- 对通用问题进行抽象，方便重复调用\n- 使代码更加简洁\n\n<a name=\"Bs8R5\"></a>\n## 闭包\n闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。<br />换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。\n\n深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。这就是闭包的本质。\n\n<a name=\"Z3v0P\"></a>\n### 使用闭包的好处\n延长了外部函数中的变量的作用范围。\n\n<a name=\"Ynvkv\"></a>\n## 纯函数\n纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。<br />也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。<br />纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。\n<a name=\"kqmwJ\"></a>\n### 使用纯函数的好处\n\n- 可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果**缓存**起来，避免重复调用，提高性能。\n- 方便测试\n- 方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。\n\n<a name=\"by5B8\"></a>\n## 副作用\n副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。<br />副作用可能的来源：配置文件、数据库、获取用户的输入等。<br />所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。\n\n<a name=\"r2yRV\"></a>\n## 柯里化(Curry)\n当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。<br />柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的**缓存**。\n<a name=\"KngGa\"></a>\n### 柯里化的好处\n\n- 让函数变得灵活，让函数的粒度变得更小\n- 可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。\n<a name=\"XbhSR\"></a>\n### 通用柯里化函数\n```javascript\nfunction curry(fn){\n  return function iner(...args){\n    if(fn.length !== args.length){\n      return iner(args.concat(Array.from(arguments)))\n    }else{\n      fn.apply(fn, args)\n    }\n  }\n}\n```\n<a name=\"kas1N\"></a>\n## 函数组合(compose)\n纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。\n<a name=\"SiigU\"></a>\n### 实现原理\n```javascript\nfunction compose(...args){\n  return function (value){\n    return args.reduceRight(function(ret, fn){\n      return fn(ret)\n    }, value)\n  }\n}\n```\n函数组合需要满足**结合律**，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"uf491417e\" class=\"ne-p\"><span class=\"ne-text\">说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 id=\"uZi3e\"><span class=\"ne-text\">是什么</span></h2><p id=\"ucd63e275\" class=\"ne-p\"><span class=\"ne-text\">函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p id=\"ua12ce8ca\" class=\"ne-p\"><span class=\"ne-text\">函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p id=\"u90e1b30c\" class=\"ne-p\"><span class=\"ne-text\">函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p id=\"u36869fe3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #F5222D\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><pre data-language=\"javascript\" id=\"y90Cp\" class=\"ne-codeblock language-javascript\">// 数学中的函数\ny = sin(x) // 描述x和y之间的映射关系</pre><p id=\"u3dae5b98\" class=\"ne-p\"><span class=\"ne-text\">由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p id=\"69150051d5b551701f832488b8f89eff\" class=\"ne-p\"><br></p><p id=\"u414231bb\" class=\"ne-p\"><span class=\"ne-text\">上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 id=\"V96u2\"><span class=\"ne-text\">使用函数式编程的好处</span></h2><ul class=\"ne-ul\"><li id=\"ud82ea86a\"><span class=\"ne-text\">函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li id=\"ue9b9aa4f\"><span class=\"ne-text\">打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li id=\"u3bb9fd86\"><span class=\"ne-text\">方便测试和并行处理</span></li></ul><p id=\"ude0d0473\" class=\"ne-p\"><br></p><p id=\"u8fb8ae65\" class=\"ne-p\"><span class=\"ne-text\">了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 id=\"alQOW\"><span class=\"ne-text\">函数是一等公民</span></h2><p id=\"u484b8254\" class=\"ne-p\"><span class=\"ne-text\">在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p id=\"ubc0af8f4\" class=\"ne-p\"><span class=\"ne-text\">总结来说，函数是一等公民，它有以下特点：</span></p><ul class=\"ne-ul\"><li id=\"ucd6dce35\"><span class=\"ne-text\">函数可以存储在变量中</span></li><li id=\"uf59562e9\"><span class=\"ne-text\">函数可以作为参数</span></li><li id=\"u4a6dc287\"><span class=\"ne-text\">函数可以作为返回值</span></li></ul><p id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"q2F1g\"><span class=\"ne-text\">高阶函数</span></h2><p id=\"u79f86e80\" class=\"ne-p\"><span class=\"ne-text\">高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p id=\"u5304d78a\" class=\"ne-p\"><span class=\"ne-text\">我们为什么要使用高阶函数呢？</span></p><h3 id=\"wMS1Q\"><span class=\"ne-text\">使用高阶函数的意义/好处</span></h3><ul class=\"ne-ul\"><li id=\"ucedfa9fa\"><span class=\"ne-text\">使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li id=\"ubfb9e288\"><span class=\"ne-text\">对通用问题进行抽象，方便重复调用</span></li><li id=\"u177f13ef\"><span class=\"ne-text\">使代码更加简洁</span></li></ul><p id=\"2dd1cb00de06987993e33a60d285babd\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"Bs8R5\"><span class=\"ne-text\">闭包</span></h2><p id=\"u82e1aa26\" class=\"ne-p\"><span class=\"ne-text\">闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p id=\"ua1f7a582\" class=\"ne-p\"><span class=\"ne-text\">换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p id=\"bfe20cd0a82430dd1c468b94244cd445\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"f2cb9cad94a58685f7541109e3a20337\" class=\"ne-p\"><span class=\"ne-text\">深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span class=\"ne-text\">这就是闭包的本质。</span></p><p id=\"ab88c4941c992d3daf6fa9c4cab26035\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"Z3v0P\"><span class=\"ne-text\">使用闭包的好处</span></h3><p id=\"822c4af5e19f9235472119a06970c94c\" class=\"ne-p\"><span class=\"ne-text\">延长了外部函数中的变量的作用范围。</span></p><p id=\"e40410ce099f91a533ee2d89d4f95adc\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"Ynvkv\"><span class=\"ne-text\">纯函数</span></h2><p id=\"a716dd9ed5d6d133a6d876214ba49d92\" class=\"ne-p\"><span class=\"ne-text\">纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p id=\"85ec9179e9ab07fa67d137ac9d32d49f\" class=\"ne-p\"><span class=\"ne-text\">也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p id=\"781bad43e3890207a2024698c00d87d8\" class=\"ne-p\"><span class=\"ne-text\">纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 id=\"kqmwJ\"><span class=\"ne-text\">使用纯函数的好处</span></h3><ul class=\"ne-ul\"><li id=\"0c97694cacd3dc37f3d06879226836ea\"><span class=\"ne-text\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果</span><strong><span class=\"ne-text\">缓存</span></strong><span class=\"ne-text\">起来，避免重复调用，提高性能。</span></li><li id=\"07d006936eac94afab92d0765adac110\"><span class=\"ne-text\">方便测试</span></li><li id=\"a2c5011d12acf7bffd0acbf38bdf848b\"><span class=\"ne-text\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</span></li></ul><p id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\" class=\"ne-p\"><br></p><h2 id=\"by5B8\"><span class=\"ne-text\">副作用</span></h2><p id=\"201cd68e98e157ff6b5363d596cebdd3\" class=\"ne-p\"><span class=\"ne-text\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</span></p><p id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\" class=\"ne-p\"><span class=\"ne-text\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</span></p><p id=\"eed422eed2e9b11b69e0854a507a22b2\" class=\"ne-p\"><span class=\"ne-text\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</span></p><p id=\"600472ad8cd30731cb0bc5d164e708a2\" class=\"ne-p\"><br></p><h2 id=\"r2yRV\"><span class=\"ne-text\">柯里化(Curry)</span></h2><p id=\"6d95900674a536b54e39fa9295edb522\" class=\"ne-p\"><span class=\"ne-text\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</span></p><p id=\"2d37fe432b6859d3fd89921338afb112\" class=\"ne-p\"><span class=\"ne-text\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的</span><strong><span class=\"ne-text\">缓存</span></strong><span class=\"ne-text\">。</span></p><h3 id=\"KngGa\"><span class=\"ne-text\">柯里化的好处</span></h3><ul class=\"ne-ul\"><li id=\"fd299ed4d52ba628ecb73b574d37eb72\"><span class=\"ne-text\">让函数变得灵活，让函数的粒度变得更小</span></li><li id=\"d4caae9ebe9e689bf036d65129b5ed2f\"><span class=\"ne-text\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</span></li></ul><h3 id=\"XbhSR\"><span class=\"ne-text\">通用柯里化函数</span></h3><pre data-language=\"javascript\" id=\"AepII\" class=\"ne-codeblock language-javascript\">function curry(fn){\n  return function iner(...args){\n    if(fn.length !== args.length){\n      return iner(args.concat(Array.from(arguments)))\n    }else{\n      fn.apply(fn, args)\n    }\n  }\n}</pre><h2 id=\"kas1N\"><span class=\"ne-text\">函数组合(compose)</span></h2><p id=\"840c719f117b2c951c676a9597685464\" class=\"ne-p\"><span class=\"ne-text\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</span></p><h3 id=\"SiigU\"><span class=\"ne-text\">实现原理</span></h3><pre data-language=\"javascript\" id=\"Y7EJf\" class=\"ne-codeblock language-javascript\">function compose(...args){\n  return function (value){\n    return args.reduceRight(function(ret, fn){\n      return fn(ret)\n    }, value)\n  }\n}</pre><p id=\"881d400612f75a85427e87b2f4be88a1\" class=\"ne-p\"><span class=\"ne-text\">函数组合需要满足</span><strong><span class=\"ne-text\">结合律</span></strong><span class=\"ne-text\">，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</span></p><p id=\"699ed1d2498a6a0b1843c09a173087cc\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"uf491417e\" id=\"uf491417e\"><span data-lake-id=\"u34b77f6f\" id=\"u34b77f6f\">说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 data-lake-id=\"uZi3e\" id=\"uZi3e\"><span data-lake-id=\"ub33ce5dc\" id=\"ub33ce5dc\">是什么</span></h2><p data-lake-id=\"ucd63e275\" id=\"ucd63e275\"><span data-lake-id=\"ua49019ea\" id=\"ua49019ea\">函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p data-lake-id=\"ua12ce8ca\" id=\"ua12ce8ca\"><span data-lake-id=\"u6e559731\" id=\"u6e559731\">函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p data-lake-id=\"u90e1b30c\" id=\"u90e1b30c\"><span data-lake-id=\"u79dd11fe\" id=\"u79dd11fe\">函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p data-lake-id=\"u36869fe3\" id=\"u36869fe3\"><span data-lake-id=\"u7729e5b7\" id=\"u7729e5b7\" style=\"color: #F5222D\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%5Cny%20%3D%20sin(x)%20%2F%2F%20%E6%8F%8F%E8%BF%B0x%E5%92%8Cy%E4%B9%8B%E9%97%B4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22y90Cp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3dae5b98\" id=\"u3dae5b98\"><span data-lake-id=\"ud65c41fa\" id=\"ud65c41fa\">由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p data-lake-id=\"69150051d5b551701f832488b8f89eff\" id=\"69150051d5b551701f832488b8f89eff\"><br></p><p data-lake-id=\"u414231bb\" id=\"u414231bb\"><span data-lake-id=\"ub3583cae\" id=\"ub3583cae\">上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 data-lake-id=\"V96u2\" id=\"V96u2\"><span data-lake-id=\"uaa5d52e4\" id=\"uaa5d52e4\">使用函数式编程的好处</span></h2><ul list=\"uc9d6f488\"><li fid=\"uc54ff087\" data-lake-id=\"ud82ea86a\" id=\"ud82ea86a\"><span data-lake-id=\"u3191c032\" id=\"u3191c032\">函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li fid=\"uc54ff087\" data-lake-id=\"ue9b9aa4f\" id=\"ue9b9aa4f\"><span data-lake-id=\"u41cb5e2b\" id=\"u41cb5e2b\">打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li fid=\"uc54ff087\" data-lake-id=\"u3bb9fd86\" id=\"u3bb9fd86\"><span data-lake-id=\"u9f5b0ee6\" id=\"u9f5b0ee6\">方便测试和并行处理</span></li></ul><p data-lake-id=\"ude0d0473\" id=\"ude0d0473\"><br></p><p data-lake-id=\"u8fb8ae65\" id=\"u8fb8ae65\"><span data-lake-id=\"u319238d7\" id=\"u319238d7\">了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 data-lake-id=\"alQOW\" id=\"alQOW\"><span data-lake-id=\"ue2fea038\" id=\"ue2fea038\">函数是一等公民</span></h2><p data-lake-id=\"u484b8254\" id=\"u484b8254\"><span data-lake-id=\"u0fe28deb\" id=\"u0fe28deb\">在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p data-lake-id=\"ubc0af8f4\" id=\"ubc0af8f4\"><span data-lake-id=\"ubaa6d3ee\" id=\"ubaa6d3ee\">总结来说，函数是一等公民，它有以下特点：</span></p><ul list=\"u7eb81adb\"><li fid=\"u5f56a47f\" data-lake-id=\"ucd6dce35\" id=\"ucd6dce35\"><span data-lake-id=\"ucf13461b\" id=\"ucf13461b\">函数可以存储在变量中</span></li><li fid=\"u5f56a47f\" data-lake-id=\"uf59562e9\" id=\"uf59562e9\"><span data-lake-id=\"ub860e686\" id=\"ub860e686\">函数可以作为参数</span></li><li fid=\"u5f56a47f\" data-lake-id=\"u4a6dc287\" id=\"u4a6dc287\"><span data-lake-id=\"u84a2a261\" id=\"u84a2a261\">函数可以作为返回值</span></li></ul><p data-lake-id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\" id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\"><span data-lake-id=\"uf31f00d4\" id=\"uf31f00d4\">​</span><br></p><h2 data-lake-id=\"q2F1g\" id=\"q2F1g\"><span data-lake-id=\"u54c5f8a8\" id=\"u54c5f8a8\">高阶函数</span></h2><p data-lake-id=\"u79f86e80\" id=\"u79f86e80\"><span data-lake-id=\"ue3414022\" id=\"ue3414022\">高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p data-lake-id=\"u5304d78a\" id=\"u5304d78a\"><span data-lake-id=\"u98bc2653\" id=\"u98bc2653\">我们为什么要使用高阶函数呢？</span></p><h3 data-lake-id=\"wMS1Q\" id=\"wMS1Q\"><span data-lake-id=\"u0dff6622\" id=\"u0dff6622\">使用高阶函数的意义/好处</span></h3><ul list=\"u2adf4a7f\"><li fid=\"uda045a86\" data-lake-id=\"ucedfa9fa\" id=\"ucedfa9fa\"><span data-lake-id=\"u38ea94e1\" id=\"u38ea94e1\">使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li fid=\"uda045a86\" data-lake-id=\"ubfb9e288\" id=\"ubfb9e288\"><span data-lake-id=\"u858c190e\" id=\"u858c190e\">对通用问题进行抽象，方便重复调用</span></li><li fid=\"uda045a86\" data-lake-id=\"u177f13ef\" id=\"u177f13ef\"><span data-lake-id=\"u60345728\" id=\"u60345728\">使代码更加简洁</span></li></ul><p data-lake-id=\"2dd1cb00de06987993e33a60d285babd\" id=\"2dd1cb00de06987993e33a60d285babd\"><span data-lake-id=\"ud7bb982e\" id=\"ud7bb982e\">​</span><br></p><h2 data-lake-id=\"Bs8R5\" id=\"Bs8R5\"><span data-lake-id=\"ufbbf6b57\" id=\"ufbbf6b57\">闭包</span></h2><p data-lake-id=\"u82e1aa26\" id=\"u82e1aa26\"><span data-lake-id=\"u234acf06\" id=\"u234acf06\">闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p data-lake-id=\"ua1f7a582\" id=\"ua1f7a582\"><span data-lake-id=\"u6360485a\" id=\"u6360485a\">换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p data-lake-id=\"bfe20cd0a82430dd1c468b94244cd445\" id=\"bfe20cd0a82430dd1c468b94244cd445\"><span data-lake-id=\"ue68f689d\" id=\"ue68f689d\">​</span><br></p><p data-lake-id=\"f2cb9cad94a58685f7541109e3a20337\" id=\"f2cb9cad94a58685f7541109e3a20337\"><span data-lake-id=\"u97e3e8ca\" id=\"u97e3e8ca\">深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span data-lake-id=\"u9c3b7c01\" id=\"u9c3b7c01\">这就是闭包的本质。</span></p><p data-lake-id=\"ab88c4941c992d3daf6fa9c4cab26035\" id=\"ab88c4941c992d3daf6fa9c4cab26035\"><span data-lake-id=\"u5743915d\" id=\"u5743915d\">​</span><br></p><h3 data-lake-id=\"Z3v0P\" id=\"Z3v0P\"><span data-lake-id=\"u2861bc4f\" id=\"u2861bc4f\">使用闭包的好处</span></h3><p data-lake-id=\"822c4af5e19f9235472119a06970c94c\" id=\"822c4af5e19f9235472119a06970c94c\"><span data-lake-id=\"ufba9b80b\" id=\"ufba9b80b\">延长了外部函数中的变量的作用范围。</span></p><p data-lake-id=\"e40410ce099f91a533ee2d89d4f95adc\" id=\"e40410ce099f91a533ee2d89d4f95adc\"><span data-lake-id=\"u6a1d6b0a\" id=\"u6a1d6b0a\">​</span><br></p><h2 data-lake-id=\"Ynvkv\" id=\"Ynvkv\"><span data-lake-id=\"u353b3f49\" id=\"u353b3f49\">纯函数</span></h2><p data-lake-id=\"a716dd9ed5d6d133a6d876214ba49d92\" id=\"a716dd9ed5d6d133a6d876214ba49d92\"><span data-lake-id=\"u9b26523b\" id=\"u9b26523b\">纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p data-lake-id=\"85ec9179e9ab07fa67d137ac9d32d49f\" id=\"85ec9179e9ab07fa67d137ac9d32d49f\"><span data-lake-id=\"u3b50c48b\" id=\"u3b50c48b\">也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p data-lake-id=\"781bad43e3890207a2024698c00d87d8\" id=\"781bad43e3890207a2024698c00d87d8\"><span data-lake-id=\"u1e7745a7\" id=\"u1e7745a7\">纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 data-lake-id=\"kqmwJ\" id=\"kqmwJ\"><span data-lake-id=\"u1869c626\" id=\"u1869c626\">使用纯函数的好处</span></h3><ul list=\"u55afb884\"><li fid=\"ud050b2bc\" data-lake-id=\"0c97694cacd3dc37f3d06879226836ea\" id=\"0c97694cacd3dc37f3d06879226836ea\"><span data-lake-id=\"u539e97eb\" id=\"u539e97eb\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果</span><strong><span data-lake-id=\"u629c9510\" id=\"u629c9510\">缓存</span></strong><span data-lake-id=\"ubb0b7fe6\" id=\"ubb0b7fe6\">起来，避免重复调用，提高性能。</span></li><li fid=\"ud050b2bc\" data-lake-id=\"07d006936eac94afab92d0765adac110\" id=\"07d006936eac94afab92d0765adac110\"><span data-lake-id=\"u25c1c1c0\" id=\"u25c1c1c0\">方便测试</span></li><li fid=\"ud050b2bc\" data-lake-id=\"a2c5011d12acf7bffd0acbf38bdf848b\" id=\"a2c5011d12acf7bffd0acbf38bdf848b\"><span data-lake-id=\"u5a07362b\" id=\"u5a07362b\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</span></li></ul><p data-lake-id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\" id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\"><br></p><h2 data-lake-id=\"by5B8\" id=\"by5B8\"><span data-lake-id=\"ue418cb1b\" id=\"ue418cb1b\">副作用</span></h2><p data-lake-id=\"201cd68e98e157ff6b5363d596cebdd3\" id=\"201cd68e98e157ff6b5363d596cebdd3\"><span data-lake-id=\"ue06fce07\" id=\"ue06fce07\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</span></p><p data-lake-id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\" id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\"><span data-lake-id=\"u07e39ddb\" id=\"u07e39ddb\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</span></p><p data-lake-id=\"eed422eed2e9b11b69e0854a507a22b2\" id=\"eed422eed2e9b11b69e0854a507a22b2\"><span data-lake-id=\"u72816e6a\" id=\"u72816e6a\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</span></p><p data-lake-id=\"600472ad8cd30731cb0bc5d164e708a2\" id=\"600472ad8cd30731cb0bc5d164e708a2\"><br></p><h2 data-lake-id=\"r2yRV\" id=\"r2yRV\"><span data-lake-id=\"ub931e5a7\" id=\"ub931e5a7\">柯里化(Curry)</span></h2><p data-lake-id=\"6d95900674a536b54e39fa9295edb522\" id=\"6d95900674a536b54e39fa9295edb522\"><span data-lake-id=\"u8a2d8205\" id=\"u8a2d8205\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</span></p><p data-lake-id=\"2d37fe432b6859d3fd89921338afb112\" id=\"2d37fe432b6859d3fd89921338afb112\"><span data-lake-id=\"uc0795c7e\" id=\"uc0795c7e\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的</span><strong><span data-lake-id=\"u1816b63e\" id=\"u1816b63e\">缓存</span></strong><span data-lake-id=\"ud5b37122\" id=\"ud5b37122\">。</span></p><h3 data-lake-id=\"KngGa\" id=\"KngGa\"><span data-lake-id=\"u158c0048\" id=\"u158c0048\">柯里化的好处</span></h3><ul list=\"u2f489ca7\"><li fid=\"u713db139\" data-lake-id=\"fd299ed4d52ba628ecb73b574d37eb72\" id=\"fd299ed4d52ba628ecb73b574d37eb72\"><span data-lake-id=\"u8fe63160\" id=\"u8fe63160\">让函数变得灵活，让函数的粒度变得更小</span></li><li fid=\"u713db139\" data-lake-id=\"d4caae9ebe9e689bf036d65129b5ed2f\" id=\"d4caae9ebe9e689bf036d65129b5ed2f\"><span data-lake-id=\"u41f2a4ba\" id=\"u41f2a4ba\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</span></li></ul><h3 data-lake-id=\"XbhSR\" id=\"XbhSR\"><span data-lake-id=\"u2d1263e9\" id=\"u2d1263e9\">通用柯里化函数</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20curry(fn)%7B%5Cn%20%20return%20function%20iner(...args)%7B%5Cn%20%20%20%20if(fn.length%20!%3D%3D%20args.length)%7B%5Cn%20%20%20%20%20%20return%20iner(args.concat(Array.from(arguments)))%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20fn.apply(fn%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AepII%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"kas1N\" id=\"kas1N\"><span data-lake-id=\"u97eb96a7\" id=\"u97eb96a7\">函数组合(compose)</span></h2><p data-lake-id=\"840c719f117b2c951c676a9597685464\" id=\"840c719f117b2c951c676a9597685464\"><span data-lake-id=\"u86955ed2\" id=\"u86955ed2\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</span></p><h3 data-lake-id=\"SiigU\" id=\"SiigU\"><span data-lake-id=\"ud8057b22\" id=\"ud8057b22\">实现原理</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20compose(...args)%7B%5Cn%20%20return%20function%20(value)%7B%5Cn%20%20%20%20return%20args.reduceRight(function(ret%2C%20fn)%7B%5Cn%20%20%20%20%20%20return%20fn(ret)%5Cn%20%20%20%20%7D%2C%20value)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Y7EJf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"881d400612f75a85427e87b2f4be88a1\" id=\"881d400612f75a85427e87b2f4be88a1\"><span data-lake-id=\"u52777aba\" id=\"u52777aba\">函数组合需要满足</span><strong><span data-lake-id=\"u607aa0e6\" id=\"u607aa0e6\">结合律</span></strong><span data-lake-id=\"ud0ea0edb\" id=\"ud0ea0edb\">，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</span></p><p data-lake-id=\"699ed1d2498a6a0b1843c09a173087cc\" id=\"699ed1d2498a6a0b1843c09a173087cc\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"uf491417e\" id=\"uf491417e\"><span data-lake-id=\"u34b77f6f\" id=\"u34b77f6f\">说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。</span></p><h2 data-lake-id=\"uZi3e\" id=\"uZi3e\"><span data-lake-id=\"ub33ce5dc\" id=\"ub33ce5dc\">是什么</span></h2><p data-lake-id=\"ucd63e275\" id=\"ucd63e275\"><span data-lake-id=\"ua49019ea\" id=\"ua49019ea\">函数式编程(Function Programming FP)，FP是编程范式之一。</span></p><p data-lake-id=\"ua12ce8ca\" id=\"ua12ce8ca\"><span data-lake-id=\"u6e559731\" id=\"u6e559731\">函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何编写代码的“方法论”。 </span></p><p data-lake-id=\"u90e1b30c\" id=\"u90e1b30c\"><span data-lake-id=\"u79dd11fe\" id=\"u79dd11fe\">函数式编程的思维方式是把现实世界的事物和事物之间的联系抽象到程序世界，在程序中对运算过程进行抽象，具体的做法是，根据输入某种运算获得相应的输出，因为程序开发过程中会涉及很多有输入和输出的函数。</span></p><p data-lake-id=\"u36869fe3\" id=\"u36869fe3\"><span data-lake-id=\"u7729e5b7\" id=\"u7729e5b7\" style=\"color: #F5222D\">有一点需要注意的是，函数式编程中的函数指的不是程序中的函数，而是数学中的函数，即不同数据之间的映射关系。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%5Cny%20%3D%20sin(x)%20%2F%2F%20%E6%8F%8F%E8%BF%B0x%E5%92%8Cy%E4%B9%8B%E9%97%B4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22y90Cp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3dae5b98\" id=\"u3dae5b98\"><span data-lake-id=\"ud65c41fa\" id=\"ud65c41fa\">由此可见在函数式编程的中，对于相同的输入，函数的输出是恒定的，也就是没有副作用的纯函数；没有副作用的意思是它的输出不会因为外部变量的变化而发生变化。</span></p><p data-lake-id=\"69150051d5b551701f832488b8f89eff\" id=\"69150051d5b551701f832488b8f89eff\"><br></p><p data-lake-id=\"u414231bb\" id=\"u414231bb\"><span data-lake-id=\"ub3583cae\" id=\"ub3583cae\">上面说它是一种“方法论”，那么我们为什么要使用这种“方法论”呢？要想弄清楚这个问题，我们可以从使用函数式编程有什么好处来作为切入口。</span></p><h2 data-lake-id=\"V96u2\" id=\"V96u2\"><span data-lake-id=\"uaa5d52e4\" id=\"uaa5d52e4\">使用函数式编程的好处</span></h2><ul list=\"uc9d6f488\"><li fid=\"uc54ff087\" data-lake-id=\"ud82ea86a\" id=\"ud82ea86a\"><span data-lake-id=\"u3191c032\" id=\"u3191c032\">函数式编程可以抛弃this，不再向面向对象那样经常用到this</span></li><li fid=\"uc54ff087\" data-lake-id=\"ue9b9aa4f\" id=\"ue9b9aa4f\"><span data-lake-id=\"u41cb5e2b\" id=\"u41cb5e2b\">打包过程中可以更好的利用tree shaking过滤无用代码</span></li><li fid=\"uc54ff087\" data-lake-id=\"u3bb9fd86\" id=\"u3bb9fd86\"><span data-lake-id=\"u9f5b0ee6\" id=\"u9f5b0ee6\">方便测试和并行处理</span></li></ul><p data-lake-id=\"ude0d0473\" id=\"ude0d0473\"><br></p><p data-lake-id=\"u8fb8ae65\" id=\"u8fb8ae65\"><span data-lake-id=\"u319238d7\" id=\"u319238d7\">了解了它的好处，下面来介绍常见的函数式编程都有哪些？不过在此之前，我们先来了解一下函数是一等公民的概念，因为它是后续高阶函数、柯里化等的基础。</span></p><h2 data-lake-id=\"alQOW\" id=\"alQOW\"><span data-lake-id=\"ue2fea038\" id=\"ue2fea038\">函数是一等公民</span></h2><p data-lake-id=\"u484b8254\" id=\"u484b8254\"><span data-lake-id=\"u0fe28deb\" id=\"u0fe28deb\">在JavaScript中函数就是一个普通的对象(可以通过new Function()创建)，我们可以把函数存储到变量、数组、对象中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function('alert(1)')来构造一个新的函数。</span></p><p data-lake-id=\"ubc0af8f4\" id=\"ubc0af8f4\"><span data-lake-id=\"ubaa6d3ee\" id=\"ubaa6d3ee\">总结来说，函数是一等公民，它有以下特点：</span></p><ul list=\"u7eb81adb\"><li fid=\"u5f56a47f\" data-lake-id=\"ucd6dce35\" id=\"ucd6dce35\"><span data-lake-id=\"ucf13461b\" id=\"ucf13461b\">函数可以存储在变量中</span></li><li fid=\"u5f56a47f\" data-lake-id=\"uf59562e9\" id=\"uf59562e9\"><span data-lake-id=\"ub860e686\" id=\"ub860e686\">函数可以作为参数</span></li><li fid=\"u5f56a47f\" data-lake-id=\"u4a6dc287\" id=\"u4a6dc287\"><span data-lake-id=\"u84a2a261\" id=\"u84a2a261\">函数可以作为返回值</span></li></ul><p data-lake-id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\" id=\"3e30adbb0bd3cfdd6d31f8e0901c9175\"><span data-lake-id=\"uf31f00d4\" id=\"uf31f00d4\">​</span><br></p><h2 data-lake-id=\"q2F1g\" id=\"q2F1g\"><span data-lake-id=\"u54c5f8a8\" id=\"u54c5f8a8\">高阶函数</span></h2><p data-lake-id=\"u79f86e80\" id=\"u79f86e80\"><span data-lake-id=\"ue3414022\" id=\"ue3414022\">高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</span></p><p data-lake-id=\"u5304d78a\" id=\"u5304d78a\"><span data-lake-id=\"u98bc2653\" id=\"u98bc2653\">我们为什么要使用高阶函数呢？</span></p><h3 data-lake-id=\"wMS1Q\" id=\"wMS1Q\"><span data-lake-id=\"u0dff6622\" id=\"u0dff6622\">使用高阶函数的意义/好处</span></h3><ul list=\"u2adf4a7f\"><li fid=\"uda045a86\" data-lake-id=\"ucedfa9fa\" id=\"ucedfa9fa\"><span data-lake-id=\"u38ea94e1\" id=\"u38ea94e1\">使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</span></li><li fid=\"uda045a86\" data-lake-id=\"ubfb9e288\" id=\"ubfb9e288\"><span data-lake-id=\"u858c190e\" id=\"u858c190e\">对通用问题进行抽象，方便重复调用</span></li><li fid=\"uda045a86\" data-lake-id=\"u177f13ef\" id=\"u177f13ef\"><span data-lake-id=\"u60345728\" id=\"u60345728\">使代码更加简洁</span></li></ul><p data-lake-id=\"2dd1cb00de06987993e33a60d285babd\" id=\"2dd1cb00de06987993e33a60d285babd\"><span data-lake-id=\"ud7bb982e\" id=\"ud7bb982e\">​</span><br></p><h2 data-lake-id=\"Bs8R5\" id=\"Bs8R5\"><span data-lake-id=\"ufbbf6b57\" id=\"ufbbf6b57\">闭包</span></h2><p data-lake-id=\"u82e1aa26\" id=\"u82e1aa26\"><span data-lake-id=\"u234acf06\" id=\"u234acf06\">闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。</span></p><p data-lake-id=\"ua1f7a582\" id=\"ua1f7a582\"><span data-lake-id=\"u6360485a\" id=\"u6360485a\">换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</span></p><p data-lake-id=\"bfe20cd0a82430dd1c468b94244cd445\" id=\"bfe20cd0a82430dd1c468b94244cd445\"><span data-lake-id=\"ue68f689d\" id=\"ue68f689d\">​</span><br></p><p data-lake-id=\"f2cb9cad94a58685f7541109e3a20337\" id=\"f2cb9cad94a58685f7541109e3a20337\"><span data-lake-id=\"u97e3e8ca\" id=\"u97e3e8ca\">深入函数执行机制，函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</span><span data-lake-id=\"u9c3b7c01\" id=\"u9c3b7c01\">这就是闭包的本质。</span></p><p data-lake-id=\"ab88c4941c992d3daf6fa9c4cab26035\" id=\"ab88c4941c992d3daf6fa9c4cab26035\"><span data-lake-id=\"u5743915d\" id=\"u5743915d\">​</span><br></p><h3 data-lake-id=\"Z3v0P\" id=\"Z3v0P\"><span data-lake-id=\"u2861bc4f\" id=\"u2861bc4f\">使用闭包的好处</span></h3><p data-lake-id=\"822c4af5e19f9235472119a06970c94c\" id=\"822c4af5e19f9235472119a06970c94c\"><span data-lake-id=\"ufba9b80b\" id=\"ufba9b80b\">延长了外部函数中的变量的作用范围。</span></p><p data-lake-id=\"e40410ce099f91a533ee2d89d4f95adc\" id=\"e40410ce099f91a533ee2d89d4f95adc\"><span data-lake-id=\"u6a1d6b0a\" id=\"u6a1d6b0a\">​</span><br></p><h2 data-lake-id=\"Ynvkv\" id=\"Ynvkv\"><span data-lake-id=\"u353b3f49\" id=\"u353b3f49\">纯函数</span></h2><p data-lake-id=\"a716dd9ed5d6d133a6d876214ba49d92\" id=\"a716dd9ed5d6d133a6d876214ba49d92\"><span data-lake-id=\"u9b26523b\" id=\"u9b26523b\">纯函数的概念其实很简单：“相同的输入永远会得到相同的输出”。</span></p><p data-lake-id=\"85ec9179e9ab07fa67d137ac9d32d49f\" id=\"85ec9179e9ab07fa67d137ac9d32d49f\"><span data-lake-id=\"u3b50c48b\" id=\"u3b50c48b\">也就是我们重复调用同一个函数，函数的返回值是和函数的参数一一对应的。我们可以把纯函数理解为数学中的函数，比如数学中常见的数学公式：y=f(x)，它描述了数据与数据之间(x和y)的映射关系。</span></p><p data-lake-id=\"781bad43e3890207a2024698c00d87d8\" id=\"781bad43e3890207a2024698c00d87d8\"><span data-lake-id=\"u1e7745a7\" id=\"u1e7745a7\">纯函数的特点就是不会保留中间的计算结果，比如无法访问函数内部的运算中间结果，因为它不会对计算结果做数据持久化，并且变量是不可变的，所以纯函数是无状态的。</span></p><h3 data-lake-id=\"kqmwJ\" id=\"kqmwJ\"><span data-lake-id=\"u1869c626\" id=\"u1869c626\">使用纯函数的好处</span></h3><ul list=\"u55afb884\"><li fid=\"ud050b2bc\" data-lake-id=\"0c97694cacd3dc37f3d06879226836ea\" id=\"0c97694cacd3dc37f3d06879226836ea\"><span data-lake-id=\"u539e97eb\" id=\"u539e97eb\">可缓存：由于纯函数相同的输入始终有相同的输出，我们就可以把函数的结果</span><strong><span data-lake-id=\"u629c9510\" id=\"u629c9510\">缓存</span></strong><span data-lake-id=\"ubb0b7fe6\" id=\"ubb0b7fe6\">起来，避免重复调用，提高性能。</span></li><li fid=\"ud050b2bc\" data-lake-id=\"07d006936eac94afab92d0765adac110\" id=\"07d006936eac94afab92d0765adac110\"><span data-lake-id=\"u25c1c1c0\" id=\"u25c1c1c0\">方便测试</span></li><li fid=\"ud050b2bc\" data-lake-id=\"a2c5011d12acf7bffd0acbf38bdf848b\" id=\"a2c5011d12acf7bffd0acbf38bdf848b\"><span data-lake-id=\"u5a07362b\" id=\"u5a07362b\">方便并行处理：在多线程环境下，避免并行操作共享的内存数据引发的意外情况。</span></li></ul><p data-lake-id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\" id=\"3c9a6f3ed1b15109e77c3c9b06e19d0b\"><br></p><h2 data-lake-id=\"by5B8\" id=\"by5B8\"><span data-lake-id=\"ue418cb1b\" id=\"ue418cb1b\">副作用</span></h2><p data-lake-id=\"201cd68e98e157ff6b5363d596cebdd3\" id=\"201cd68e98e157ff6b5363d596cebdd3\"><span data-lake-id=\"ue06fce07\" id=\"ue06fce07\">副作用会让一个函数变得不纯，纯函数根据相同的输入返回相同的输出，如果一个函数依赖于外部的状态就无法保证函数输出相同，就会带来副作用。</span></p><p data-lake-id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\" id=\"e9b2dc59b9b0776e4afe64ed7d2a1907\"><span data-lake-id=\"u07e39ddb\" id=\"u07e39ddb\">副作用可能的来源：配置文件、数据库、获取用户的输入等。</span></p><p data-lake-id=\"eed422eed2e9b11b69e0854a507a22b2\" id=\"eed422eed2e9b11b69e0854a507a22b2\"><span data-lake-id=\"u72816e6a\" id=\"u72816e6a\">所有的外部交互都有可能导致副作用，副作用也使得方法通用性下降不适合可扩展性和通用性，同时副作用会给程序中带来安全隐患和不确定性，但是副作用不可能完全禁止，我们应该尽可能控制他们在可控的范围内发生。</span></p><p data-lake-id=\"600472ad8cd30731cb0bc5d164e708a2\" id=\"600472ad8cd30731cb0bc5d164e708a2\"><br></p><h2 data-lake-id=\"r2yRV\" id=\"r2yRV\"><span data-lake-id=\"ub931e5a7\" id=\"ub931e5a7\">柯里化(Curry)</span></h2><p data-lake-id=\"6d95900674a536b54e39fa9295edb522\" id=\"6d95900674a536b54e39fa9295edb522\"><span data-lake-id=\"u8a2d8205\" id=\"u8a2d8205\">当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。</span></p><p data-lake-id=\"2d37fe432b6859d3fd89921338afb112\" id=\"2d37fe432b6859d3fd89921338afb112\"><span data-lake-id=\"uc0795c7e\" id=\"uc0795c7e\">柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的</span><strong><span data-lake-id=\"u1816b63e\" id=\"u1816b63e\">缓存</span></strong><span data-lake-id=\"ud5b37122\" id=\"ud5b37122\">。</span></p><h3 data-lake-id=\"KngGa\" id=\"KngGa\"><span data-lake-id=\"u158c0048\" id=\"u158c0048\">柯里化的好处</span></h3><ul list=\"u2f489ca7\"><li fid=\"u713db139\" data-lake-id=\"fd299ed4d52ba628ecb73b574d37eb72\" id=\"fd299ed4d52ba628ecb73b574d37eb72\"><span data-lake-id=\"u8fe63160\" id=\"u8fe63160\">让函数变得灵活，让函数的粒度变得更小</span></li><li fid=\"u713db139\" data-lake-id=\"d4caae9ebe9e689bf036d65129b5ed2f\" id=\"d4caae9ebe9e689bf036d65129b5ed2f\"><span data-lake-id=\"u41f2a4ba\" id=\"u41f2a4ba\">可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</span></li></ul><h3 data-lake-id=\"XbhSR\" id=\"XbhSR\"><span data-lake-id=\"u2d1263e9\" id=\"u2d1263e9\">通用柯里化函数</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20curry(fn)%7B%5Cn%20%20return%20function%20iner(...args)%7B%5Cn%20%20%20%20if(fn.length%20!%3D%3D%20args.length)%7B%5Cn%20%20%20%20%20%20return%20iner(args.concat(Array.from(arguments)))%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20fn.apply(fn%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AepII%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"kas1N\" id=\"kas1N\"><span data-lake-id=\"u97eb96a7\" id=\"u97eb96a7\">函数组合(compose)</span></h2><p data-lake-id=\"840c719f117b2c951c676a9597685464\" id=\"840c719f117b2c951c676a9597685464\"><span data-lake-id=\"u86955ed2\" id=\"u86955ed2\">纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</span></p><h3 data-lake-id=\"SiigU\" id=\"SiigU\"><span data-lake-id=\"ud8057b22\" id=\"ud8057b22\">实现原理</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20compose(...args)%7B%5Cn%20%20return%20function%20(value)%7B%5Cn%20%20%20%20return%20args.reduceRight(function(ret%2C%20fn)%7B%5Cn%20%20%20%20%20%20return%20fn(ret)%5Cn%20%20%20%20%7D%2C%20value)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Y7EJf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"881d400612f75a85427e87b2f4be88a1\" id=\"881d400612f75a85427e87b2f4be88a1\"><span data-lake-id=\"u52777aba\" id=\"u52777aba\">函数组合需要满足</span><strong><span data-lake-id=\"u607aa0e6\" id=\"u607aa0e6\">结合律</span></strong><span data-lake-id=\"ud0ea0edb\" id=\"ud0ea0edb\">，假如有三个函数a、b、c，我们可以先把a、b函数组合，然后再组合c；也可以先把b、c组合，然后再组合a，结果是一样的。</span></p><p data-lake-id=\"699ed1d2498a6a0b1843c09a173087cc\" id=\"699ed1d2498a6a0b1843c09a173087cc\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T07:08:18.000Z",
    "deleted_at": null,
    "created_at": "2021-05-22T13:18:37.000Z",
    "updated_at": "2022-03-31T07:08:19.000Z",
    "published_at": "2022-03-31T07:08:18.000Z",
    "first_published_at": "2021-05-23T09:17:28.000Z",
    "word_count": 1914,
    "cover": null,
    "description": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。是什么函数式编程(Function Programming FP)，FP是编程范式之一。函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何...",
    "custom_description": "说到函数式编程，不得不提到数学里的函数，例如数学公式x=f(y)就很好的描述了x和y的映射关系，其实，函数式编程正来源于此。是什么函数式编程(Function Programming FP)，FP是编程范式之一。函数式编程是一个很古老的概念，它和面向对象等概念是并列的，我们可以认为它是一种如何...",
    "hits": 7,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 32438170,
    "slug": "ny150b",
    "title": "如何提升开发与设计表单类页面时的效率",
    "book_id": 11137486,
    "book": {
      "id": 11137486,
      "type": "Book",
      "slug": "rwaxct",
      "name": "博客专栏",
      "user_id": 1429353,
      "description": "分享与交流你的知识",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-07-11T14:21:25.756Z",
      "updated_at": "2021-07-11T14:21:25.000Z",
      "created_at": "2021-03-06T11:22:39.000Z",
      "namespace": "resonance/rwaxct",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "feline",
        "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
        "books_count": 4,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2021-06-29T16:21:19.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "feline",
      "description": "本尊喜欢一个人不容易，阁下不要不识好歹。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/jpeg/anonymous/1589423837659-4734a3f4-30d1-4d38-835e-c1495a162db9.jpeg",
      "books_count": 4,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2021-06-29T16:21:19.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "可视化表单 编辑器 代码生成 表单设计\n\n| 版本 | 作者 | 更新日期 | 备注 |\n| :---: | :---: | :---: | :--- |\n| 1.0 | feline | 2021/3/8 | 拖拽方式组合控件 |\n| 2.0 | feline | 2021/3/16 | 1.重新布局，设计区域扩大很多(核心不变)<br />2.控件拖拽时，页面展示辅助线 |\n\n<a name=\"2idj7\"></a>\n## 概述\n开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。<br />\n<br />[点此进入预览版](https://resonances.gitee.io/react-visual-editor/) | [效果图](https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs)<br />\n\n<a name=\"zVRar\"></a>\n## 利益相关方**\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg)<a name=\"lTKD3\"></a>\n## 基础流程\n\n1. 用例开始\n1. 用户打开页面\n1. 页面提示可以点击左侧按钮展开控件面板\n1. 用户点击左侧菜单按钮\n1. 左侧区域出现控件面板\n1. 用户点选某个控件\n1. 控件被自动添加到页面中间的设计区域\n1. 系统提示可以对控件进行设置属性\n1. 用户右击控件\n1. 弹出菜单选项\n1. 用户选择“设置属性”\n1. 右侧区域出现属性面板\n1. 用户直接选择系统预设的不同属性\n1. 系统提示可以点击运行按钮查看生成的页面与代码\n1. 用户点击运行按钮\n1. 系统自动生成代码成功\n1. 系统展示生成完成的代码与效果页面\n1. 用户将代码复制\n1. 用例结束\n\n\n\n<a name=\"99teX\"></a>\n## 扩展流程\n11a. 用户选择“复制这个”<br />11a1. 系统自动添加一个相同的控件<br />11b. 用户选择“删除这个”<br />11b1. 系统自动将此控件删除<br />16a. 系统自动生成代码失败<br />16a1. 系统提示：运行错误<br />16a2. 执行用例1\n\n<a name=\"tahw7\"></a>\n## 里程碑\n\n- [x] 布局设置流程打通\n\n目前可以对全部或部分组件进行布局设置了。\n\n- [ ] 支持用户自定义请求options\n- [ ] 支持用户自定义表单提交方法\n\n比如请求某个接口\n\n- [ ] 生成的代码提取公共部分并抽离\n- [ ] 快捷键支持\n\n使用快捷键来快速实现某个功能<br />比如：复制、剪切、删除、打开面板\n\n- [ ] 生成后的页面可以转为HTML并下载、预览\n- [ ] 支持绘制元素\n\n不仅限于表单，也可以绘制图标、方块、等多种元素<br />\n\n",
    "body_draft": "可视化表单 编辑器 代码生成 表单设计\n\n| 版本 | 作者 | 更新日期 | 备注 |\n| :---: | :---: | :---: | :--- |\n| 1.0 | feline | 2021/3/8 | 拖拽方式组合控件 |\n| 2.0 | feline | 2021/3/16 | 1.重新布局，设计区域扩大很多(核心不变)<br />2.控件拖拽时，页面展示辅助线 |\n\n<a name=\"2idj7\"></a>\n## 概述\n开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。<br />\n<br />[点此进入预览版](https://resonances.gitee.io/react-visual-editor/) | [效果图](https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs)<br />\n\n<a name=\"zVRar\"></a>\n## 利益相关方**\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg)<a name=\"lTKD3\"></a>\n## 基础流程\n\n1. 用例开始\n1. 用户打开页面\n1. 页面提示可以点击左侧按钮展开控件面板\n1. 用户点击左侧菜单按钮\n1. 左侧区域出现控件面板\n1. 用户点选某个控件\n1. 控件被自动添加到页面中间的设计区域\n1. 系统提示可以对控件进行设置属性\n1. 用户右击控件\n1. 弹出菜单选项\n1. 用户选择“设置属性”\n1. 右侧区域出现属性面板\n1. 用户直接选择系统预设的不同属性\n1. 系统提示可以点击运行按钮查看生成的页面与代码\n1. 用户点击运行按钮\n1. 系统自动生成代码成功\n1. 系统展示生成完成的代码与效果页面\n1. 用户将代码复制\n1. 用例结束\n\n\n\n<a name=\"99teX\"></a>\n## 扩展流程\n11a. 用户选择“复制这个”<br />11a1. 系统自动添加一个相同的控件<br />11b. 用户选择“删除这个”<br />11b1. 系统自动将此控件删除<br />16a. 系统自动生成代码失败<br />16a1. 系统提示：运行错误<br />16a2. 执行用例1\n\n<a name=\"tahw7\"></a>\n## 里程碑\n\n- [x] 布局设置流程打通\n\n目前可以对全部或部分组件进行布局设置了。\n\n- [ ] 支持用户自定义请求options\n- [ ] 支持用户自定义表单提交方法\n\n比如请求某个接口\n\n- [ ] 生成的代码提取公共部分并抽离\n- [ ] 快捷键支持\n\n使用快捷键来快速实现某个功能<br />比如：复制、剪切、删除、打开面板\n\n- [ ] 生成后的页面可以转为HTML并下载、预览\n- [ ] 支持绘制元素\n\n不仅限于表单，也可以绘制图标、方块、等多种元素<br />\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%2C1%5D%2C%5B0%2C1%5D%5D%2C%22active%22%3Atrue%7D\"><p data-lake-id=\"721672d7302099737426a7c4b717199a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(255, 232, 230); color: rgb(130, 0, 20); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">可视化表单</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(255, 248, 189); color: rgb(97, 71, 0); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">编辑器</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(228, 247, 210); color: rgb(19, 82, 0); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">代码生成</span></span><span>&nbsp;</span><span data-card-type=\"inline\" data-lake-card=\"label\"><span class=\"lake-card-label-container\" style=\"background: rgb(212, 238, 252); color: rgb(0, 58, 140); opacity: 1; cursor: pointer; user-select: none; font-weight: 400; font-size: 12px; overflow: hidden; max-width: 200px; display: inline-block; white-space: nowrap; margin-bottom: -4px; border-radius: 4px; border: none; padding: 2px 5px; text-overflow: ellipsis; line-height: 14px; margin-left: 1px; margin-right: 1px;\" draggable=\"true\">表单设计</span></span></p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"5WThH\" class=\"lake-card-margin\"><table class=\"lake-table\" style=\"width: 750px; outline: none; border-collapse: collapse; border: 1px solid rgb(217, 217, 217);\"><colgroup><col width=\"91\" span=\"1\"><col width=\"110\" span=\"1\"><col width=\"186\" span=\"1\"><col width=\"363\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"564356b9dbae44c8c31270a6e5a044be\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">版本</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"d4cbc211030084140b42023d3330c212\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">作者</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更新日期</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">备注</p></td></tr><tr style=\"height: 33px;\"><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"5bf1144eb02d09bca53cce2940ee1566\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.0</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">feline</p></td><td style=\"text-align: center; min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"2437cac6ad8f03448ae403be9a3af9ed_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2021/3/8</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"13a7b0a95cdb8d6b31d6e8aa206dd334\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">拖拽方式组合控件</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.0</p></td><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"88937cf8ca378a356305b3667d82e7cb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>feline</span></p></td><td colspan=\"1\" style=\"text-align: center; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2021/3/16</p></td><td rowspan=\"1\" style=\"text-align: left; vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"3db75b7ded03f4aca42956133a9b4813\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.重新布局，设计区域扩大很多(核心不变)</p><p data-lake-id=\"45ce03b37c22160f66a9baf56fe33490\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.控件拖拽时，页面展示辅助线</p></td></tr></tbody></table></div><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">利益相关方<strong><br></strong></h2><div data-card-type=\"block\" data-lake-card=\"mindmap\" id=\"1BBMR\" class=\"lake-card-margin\" data-cell_count=\"12\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg\"></div><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\" data-lake-checked=\"true\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">✅<span></span></span></span><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\" data-lake-checked=\"false\" style=\"list-style: none;\"><span data-card-type=\"inline\" data-lake-card=\"checkbox\" contenteditable=\"false\"><span style=\"margin: 3px 0.5ex; vertical-align: middle; width: 16px; height: 16px;\">🔲<span></span></span></span>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"721672d7302099737426a7c4b717199a\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A1%A8%E5%8D%95%22%2C%22colorIndex%22%3A0%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E7%BC%96%E8%BE%91%E5%99%A8%22%2C%22colorIndex%22%3A1%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%22%2C%22colorIndex%22%3A2%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%22%2C%22colorIndex%22%3A4%7D\"></card></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A3%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%2291%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22110%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22186%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22363%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22564356b9dbae44c8c31270a6e5a044be%5C%22%3E%E7%89%88%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22d4cbc211030084140b42023d3330c212%5C%22%3E%E4%BD%9C%E8%80%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%225bf1144eb02d09bca53cce2940ee1566%5C%22%3E1.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3Efeline%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%222437cac6ad8f03448ae403be9a3af9ed_p_0%5C%22%3E2021%2F3%2F8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2213a7b0a95cdb8d6b31d6e8aa206dd334%5C%22%3E%E6%8B%96%E6%8B%BD%E6%96%B9%E5%BC%8F%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2288937cf8ca378a356305b3667d82e7cb%5C%22%3E%3Cspan%3Efeline%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2021%2F3%2F16%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%223db75b7ded03f4aca42956133a9b4813%5C%22%3E1.%E9%87%8D%E6%96%B0%E5%B8%83%E5%B1%80%EF%BC%8C%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%9F%9F%E6%89%A9%E5%A4%A7%E5%BE%88%E5%A4%9A(%E6%A0%B8%E5%BF%83%E4%B8%8D%E5%8F%98)%3C%2Fp%3E%3Cp%20data-lake-id%3D%5C%2245ce03b37c22160f66a9baf56fe33490%5C%22%3E2.%E6%8E%A7%E4%BB%B6%E6%8B%96%E6%8B%BD%E6%97%B6%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BE%85%E5%8A%A9%E7%BA%BF%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%2C%22hideBorder%22%3Afalse%2C%22id%22%3A%225WThH%22%7D\"></card><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\"><br /></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\"><br /></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\">利益相关方<strong><br /></strong></h2><card type=\"block\" name=\"mindmap\" value=\"data:%7B%22diagramData%22%3A%22x%C2%9Cu%C2%94%C3%9FR%5Cu001b7%5Cu0014%C3%86%C3%9Fe%7Bk%C2%A5%C2%92V%C2%AB%C2%95%C2%B8Kf%C2%B8%C3%A83tr!%C3%ADJ%C2%85i%C2%80%5Cfa%3A%C2%A5%5Cf3v%C2%89)Nj0C(S%C2%9C%C2%86%C3%90%C2%86%C2%86%C2%A6%C2%A9%5Cu0003%C2%83%5Cu0003%C3%86%C3%86%C3%B8eV%C3%BB%C3%A7%C2%AA%C2%AFP-%5B%C2%9Cm%5Cu0013%C3%8F%C3%8Ex-%C2%8F%C3%B5%C2%9D%C2%9F%C2%BE%C3%AF%5Cu001c%C2%AD83J%C2%84%C3%8E%C3%94%C2%8A%C3%B3%C2%8DZ%7C4%C2%BB0%C3%AFL9%C3%B8%5Cu000e%C2%BC%5Cu0003%C2%9D%C2%8A%C2%B3%C2%B4%C3%BCP%C3%99%C3%A5%C3%9C%C3%AC%7C8'%5Cu001e%3A%C2%AB%5Cu0015G.%C2%84%C3%8B%C3%8E%C3%94%C2%97%2B%C3%8E%C2%AC%C3%9D%C3%A2%5Cu0010%C3%A1%5Cu0013%5Cu001ePi%C3%BF%3A%C2%B34%C3%B7%C3%80%C3%BEb6%C3%BEH%C3%9AO%C2%92v%C3%8F%C3%94%C3%8F%C3%A2%C2%9F.%3F%C3%96%C2%A88%C3%81%C3%8C%C3%AC%C2%83pQ%C3%8D%7F%C2%90a.d%5Cu0012I%5E%C2%92%C2%B9%C2%AA%C2%9A%C2%AD%C3%AD%C2%B4Z%C3%8F%5Cu0005%5Cu0016%C2%95%C2%9A%5Cu000e%C2%BFR9%C3%A2%C2%A3%C2%A5%C3%85%C2%85%C2%AFs%C2%B9%C3%8F%C3%AEb%C3%A6O%C2%A3%5Cu001c%C3%A9c%3D%C2%A18%C3%B2%5Cu0010W%C3%80E%C2%88%5Cu0002%C2%A2%C2%A9%5Cu0000Lx%5Cu001aP(5%C3%A2%C3%84%5Cu000f%C3%83%40%C3%BC%5Cu0017%C3%A4~%C3%85%C3%B9%C3%AE%C2%8B%C3%B9P%7D%C3%ABL%C2%911Dzxl%C2%9A%C2%BB%C3%89%60'~%C3%B1%C3%98%C2%B4%C3%BB%C2%A6%C2%B3%C3%BF%C3%B7%C3%95%C2%8F%C3%91p%3D%7B%5EM%7F%C2%AF%C2%99%C2%AD%C2%A6y%C3%95%C3%8C%C3%AA%C3%8Dd%C3%98%C2%B1%5Cu0018%2Bc%C3%B4%C3%BA%C2%95%C3%A9%5C%5Cf%C2%87%C3%AF%C2%B3_~5%C2%BD5sZ5%C3%AD%C2%93l%C3%BF%C3%9A%5Cu0016%C2%BC%C2%81%C3%83%C3%8A%C3%A3%5Cu0014%5Cn%5Cu000e%20%C3%B4B%40%24%5Cu000f%5Cu0000%23%5Cu001e%C2%B4%5Cu001f%24%20%C3%9A%5Cu0017Xp2%5Cu0011%C3%8E%2B%5Cu0015%C2%8A%5Cu0006%C2%BF%25%2Fk%C3%99%5Cu000f%5B%C3%A6U%5Cu000e%C2%96U_%C3%86%5Cu001b%C2%ADx%C3%AF%3C%C3%9B%C3%AB%26%C3%BB%C2%8F%C3%A3%C3%B7o%C3%92%C3%AE%C3%A5mQ%25y%5Cb%25%5Cu000eA%5Cu0000%5Cu0011%5Cu0006yf%40%C3%B8%C3%82%5Cu0007%C2%9E%C2%8B5%C3%B40%C3%B4%5Cu0018T%5Cu0013%C2%8B%C2%BA%C2%AB%C2%A5%5Cu0005%C3%8D%5Ctn4!%25%5Cu001ck7%C3%B8%C2%90Z%C3%94%7Fmvj%C3%89%60%2Bi%C2%ADO%5Cfn%C2%9A0%C3%BB%7C%3A%C2%B8P%C3%8BP(%C2%A2%5Cu0001%C2%82%5Cb%5Cu0002%C2%A2B%5Cu00018%5Cu000f%7C%C2%80%C2%85%C2%80%C2%8C%5C%22%C3%A8%23%5Cr'b%C2%B21Gr%C3%957'%C3%9B%C3%B1%C3%A6Q%3A%C3%9A.%3A%C3%89%C2%9C~o%C3%A3%C2%B0%C2%B6%5Cu0014%C2%99%C2%9A%C3%8D%5Cu0003%C3%B3%C3%A2%C2%A9%C2%B982%C3%B5%C2%8BrvE%C2%B2qc%C3%87%C3%AEJ%C2%87%C3%AF%C2%A2%C3%81y%C3%9Ch%C2%A6k%C3%83%5C%5C%C3%A4%C3%B5%C3%93%C2%B4s%C2%9Dv%5Cu000e%C2%8B%C2%BD%C2%B7%C3%86R%C2%82%C2%A1r9%5Cu0002%C2%9A0m%C3%93d%5Cnp%C3%A5k%C3%80%3D%C2%A44%C3%B6)%C2%83XN%24%C3%A6%C2%A5%C3%92%C3%BF%C2%8A%C2%B76-dQ%5C%22%C3%AA%C3%A5%C2%A5%C2%93v%C3%97%5Cu001e%24%5Cu0019%C3%BC%3C%5Cu001e%C2%89h8J%C2%9E%5Cu001d%C2%8F%5Cu0001%C2%84%5Cu0017H%C3%86%5Cu0019%40%C2%9Er%5Cu0001%5Ct%C2%90%5Cu0006%C2%82q%5Ct%C2%A4B%5C%22t%25%C2%86%5Cu0016p%5C%22%C2%80_N%5Cu0016%C3%812%C3%8E%C2%A8%C2%95%C2%B6%C2%8E%3E%C2%8F%C2%BB%5Cu0003%C3%B3%C3%A487%C2%B0%C2%B7%5Cu0016%C3%B5%C3%BB%5Cu0013C%C2%A5%C3%BC%5Cu001e%C2%9A%C2%BE%5Ct%C2%B5%C3%A8q%5Cu0011%C3%B8!%C2%85%5Cu001e%40%C2%94ZWBN%C2%81%C3%B4%C2%B5%5Cu0006P%23%C2%85%7D%2C%24%C3%BC%C3%BF%5Cu0000%C3%9E6%5Cu0000%C2%B3%C3%8C%5Cu0001E%40b%C3%8Cm%5Cu0003%5Cu0010%3B%C2%B9.%C2%A3vV%7C%C3%AA%C3%9B%C3%9E%C2%90%C3%96%C3%96%C2%89%C2%A7A%C3%A3%5Cu0006%C2%88%C3%97%C3%8E%C3%B2%5Cu001c%C2%9F%C2%9Dg%C3%AD%C3%B5ht%5Cu0018%C3%97%C3%9E%25%7F5%C3%ACh%C3%9811%C3%8Dna%C2%AC%5Cu0019%C3%BD%C2%99U%5Cu000f%C3%8C%C3%B5%C2%9E%C3%998%C2%89z%C3%95%C2%A8%C3%B7%C2%A6%C3%A8%C2%8Dbr%C3%8B%5DQ%5Cu0018%C2%9E%C2%BC%7D%5Cu001b%C3%B5%5Cu001a%C3%B6N%C3%8B%C3%B6%3A%C2%A6y%C2%91%C2%9C%5Cu000e%C2%92%C2%B3A28%C2%B0%C2%9A%C3%B1%C3%AEI%C3%9C%C3%AC%5Cu0014%C2%B2%C3%B1%C3%B3F%C2%BC%C2%BB%C2%91%C2%8Ej%C2%A6~t%C2%9BQ%201c%5Cu0001%C3%B2%C2%81%5Cu000emPD%2B%5Cu0002%C2%B8u%C3%82%5EJ%5Cu0014S%C3%97%5Cu0017%C2%9E%C3%B4%C3%91%C3%84S%C3%81rF8_%C3%987%C3%80%5Cu001e%C2%AF8%C3%8B%C3%B9%5Cu0017Z2%5Cu0000%C2%AD%C3%9E_%C3%BD%5Cu0007%C3%B4%5Cu0014%5C%5C%C2%82%22%2C%22margin%22%3Atrue%2C%22id%22%3A%221BBMR%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-282.5%2C-248%2C1%5D%2C%22width%22%3A768%2C%22height%22%3A478%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg%22%2C%22searchcard><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\"><br /></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\"><span><br /></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\"><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"721672d7302099737426a7c4b717199a\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A1%A8%E5%8D%95%22%2C%22colorIndex%22%3A0%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E7%BC%96%E8%BE%91%E5%99%A8%22%2C%22colorIndex%22%3A1%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%22%2C%22colorIndex%22%3A2%7D\"></card><span> </span><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%22%2C%22colorIndex%22%3A4%7D\"></card></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A3%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%2291%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22110%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22186%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22363%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22564356b9dbae44c8c31270a6e5a044be%5C%22%3E%E7%89%88%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22d4cbc211030084140b42023d3330c212%5C%22%3E%E4%BD%9C%E8%80%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%225bf1144eb02d09bca53cce2940ee1566%5C%22%3E1.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3Efeline%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20style%3D%5C%22text-align%3A%20center%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%222437cac6ad8f03448ae403be9a3af9ed_p_0%5C%22%3E2021%2F3%2F8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2213a7b0a95cdb8d6b31d6e8aa206dd334%5C%22%3E%E6%8B%96%E6%8B%BD%E6%96%B9%E5%BC%8F%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2.0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2288937cf8ca378a356305b3667d82e7cb%5C%22%3E%3Cspan%3Efeline%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20center%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E2021%2F3%2F16%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20style%3D%5C%22text-align%3A%20left%3B%20vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%223db75b7ded03f4aca42956133a9b4813%5C%22%3E1.%E9%87%8D%E6%96%B0%E5%B8%83%E5%B1%80%EF%BC%8C%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%9F%9F%E6%89%A9%E5%A4%A7%E5%BE%88%E5%A4%9A(%E6%A0%B8%E5%BF%83%E4%B8%8D%E5%8F%98)%3C%2Fp%3E%3Cp%20data-lake-id%3D%5C%2245ce03b37c22160f66a9baf56fe33490%5C%22%3E2.%E6%8E%A7%E4%BB%B6%E6%8B%96%E6%8B%BD%E6%97%B6%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BE%85%E5%8A%A9%E7%BA%BF%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%2C%22hideBorder%22%3Afalse%2C%22id%22%3A%225WThH%22%7D\"></card><h2 data-lake-id=\"0271d4574fc16a5a65bc4ec0eacd0b64\" id=\"2idj7\">概述</h2><p data-lake-id=\"a525331b3d9f259d4f853be74102e3e8\">开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合，未免费时费力。而表单通常都是一些固定的组合，那么能不能在编码之间通过某种方式生成出来呢？此时，我想到如果有一款可视化的编辑器产品能够通过拖拽方式组装页面，同时通过设置面板给所有/单个控件设置统一属性，最后不仅能直观的看到页面效果，还能一键复制代码，一定会带来很大的效率提升！同时也可以用于产品原型的制作。</p><p data-lake-id=\"6c8efad18b920516d2e22aa83b95344a\"><br /></p><p data-lake-id=\"b690d7b3754ab234ed11836d763cd895\"><a href=\"https://resonances.gitee.io/react-visual-editor/\" target=\"_blank\">点此进入预览版</a> | <a href=\"https://gitee.com/resonances/react-visual-editor/tree/master/docs/imgs\" target=\"_blank\">效果图</a></p><p data-lake-id=\"b9119976255de29ed32e0e83958bfd74\"><br /></p><h2 data-lake-id=\"1bdbae615e77fdfa6067793b6573962f\" id=\"zVRar\">利益相关方<strong><br /></strong></h2><card type=\"block\" name=\"mindmap\" value=\"data:%7B%22diagramData%22%3A%22x%C2%9Cu%C2%94%C3%9FR%5Cu001b7%5Cu0014%C3%86%C3%9Fe%7Bk%C2%A5%C2%92V%C2%AB%C2%95%C2%B8Kf%C2%B8%C3%A83tr!%C3%ADJ%C2%85i%C2%80%5Cfa%3A%C2%A5%5Cf3v%C2%89)Nj0C(S%C2%9C%C2%86%C3%90%C2%86%C2%86%C2%A6%C2%A9%5Cu0003%C2%83%5Cu0003%C3%86%C3%86%C3%B8eV%C3%BB%C3%A7%C2%AA%C2%AFP-%5B%C2%9Cm%5Cu0013%C3%8F%C3%8Ex-%C2%8F%C3%B5%C2%9D%C2%9F%C2%BE%C3%AF%5Cu001c%C2%AD83J%C2%84%C3%8E%C3%94%C2%8A%C3%B3%C2%8DZ%7C4%C2%BB0%C3%AFL9%C3%B8%5Cu000e%C2%BC%5Cu0003%C2%9D%C2%8A%C2%B3%C2%B4%C3%BCP%C3%99%C3%A5%C3%9C%C3%AC%7C8'%5Cu001e%3A%C2%AB%5Cu0015G.%C2%84%C3%8B%C3%8E%C3%94%C2%97%2B%C3%8E%C2%AC%C3%9D%C3%A2%5Cu0010%C3%A1%5Cu0013%5Cu001ePi%C3%BF%3A%C2%B34%C3%B7%C3%80%C3%BEb6%C3%BEH%C3%9AO%C2%92v%C3%8F%C3%94%C3%8F%C3%A2%C2%9F.%3F%C3%96%C2%A88%C3%81%C3%8C%C3%AC%C2%83pQ%C3%8D%7F%C2%90a.d%5Cu0012I%5E%C2%92%C2%B9%C2%AA%C2%9A%C2%AD%C3%AD%C2%B4Z%C3%8F%5Cu0005%5Cu0016%C2%95%C2%9A%5Cu000e%C2%BFR9%C3%A2%C2%A3%C2%A5%C3%85%C2%85%C2%AFs%C2%B9%C3%8F%C3%AEb%C3%A6O%C2%A3%5Cu001c%C3%A9c%3D%C2%A18%C3%B2%5Cu0010W%C3%80E%C2%88%5Cu0002%C2%A2%C2%A9%5Cu0000Lx%5Cu001aP(5%C3%A2%C3%84%5Cu000f%C3%83%40%C3%BC%5Cu0017%C3%A4~%C3%85%C3%B9%C3%AE%C2%8B%C3%B9P%7D%C3%ABL%C2%911Dzxl%C2%9A%C2%BB%C3%89%60'~%C3%B1%C3%98%C2%B4%C3%BB%C2%A6%C2%B3%C3%BF%C3%B7%C3%95%C2%8F%C3%91p%3D%7B%5EM%7F%C2%AF%C2%99%C2%AD%C2%A6y%C3%95%C3%8C%C3%AA%C3%8Dd%C3%98%C2%B1%5Cu0018%2Bc%C3%B4%C3%BA%C2%95%C3%A9%5C%5Cf%C2%87%C3%AF%C2%B3_~5%C2%BD5sZ5%C3%AD%C2%93l%C3%BF%C3%9A%5Cu0016%C2%BC%C2%81%C3%83%C3%8A%C3%A3%5Cu0014%5Cn%5Cu000e%20%C3%B4B%40%24%5Cu000f%5Cu0000%23%5Cu001e%C2%B4%5Cu001f%24%20%C3%9A%5Cu0017Xp2%5Cu0011%C3%8E%2B%5Cu0015%C2%8A%5Cu0006%C2%BF%25%2Fk%C3%99%5Cu000f%5B%C3%A6U%5Cu000e%C2%96U_%C3%86%5Cu001b%C2%ADx%C3%AF%3C%C3%9B%C3%AB%26%C3%BB%C2%8F%C3%A3%C3%B7o%C3%92%C3%AE%C3%A5mQ%25y%5Cb%25%5Cu000eA%5Cu0000%5Cu0011%5Cu0006yf%40%C3%B8%C3%82%5Cu0007%C2%9E%C2%8B5%C3%B40%C3%B4%5Cu0018T%5Cu0013%C2%8B%C2%BA%C2%AB%C2%A5%5Cu0005%C3%8D%5Ctn4!%25%5Cu001ck7%C3%B8%C2%90Z%C3%94%7Fmvj%C3%89%60%2Bi%C2%ADO%5Cfn%C2%9A0%C3%BB%7C%3A%C2%B8P%C3%8BP(%C2%A2%5Cu0001%C2%82%5Cb%5Cu0002%C2%A2B%5Cu00018%5Cu000f%7C%C2%80%C2%85%C2%80%C2%8C%5C%22%C3%A8%23%5Cr'b%C2%B21Gr%C3%957'%C3%9B%C3%B1%C3%A6Q%3A%C3%9A.%3A%C3%89%C2%9C~o%C3%A3%C2%B0%C2%B6%5Cu0014%C2%99%C2%9A%C3%8D%5Cu0003%C3%B3%C3%A2%C2%A9%C2%B982%C3%B5%C2%8BrvE%C2%B2qc%C3%87%C3%AEJ%C2%87%C3%AF%C2%A2%C3%81y%C3%9Ch%C2%A6k%C3%83%5C%5C%C3%A4%C3%B5%C3%93%C2%B4s%C2%9Dv%5Cu000e%C2%8B%C2%BD%C2%B7%C3%86R%C2%82%C2%A1r9%5Cu0002%C2%9A0m%C3%93d%5Cnp%C3%A5k%C3%80%3D%C2%A44%C3%B6)%C2%83XN%24%C3%A6%C2%A5%C3%92%C3%BF%C2%8A%C2%B76-dQ%5C%22%C3%AA%C3%A5%C2%A5%C2%93v%C3%97%5Cu001e%24%5Cu0019%C3%BC%3C%5Cu001e%C2%89h8J%C2%9E%5Cu001d%C2%8F%5Cu0001%C2%84%5Cu0017H%C3%86%5Cu0019%40%C2%9Er%5Cu0001%5Ct%C2%90%5Cu0006%C2%82q%5Ct%C2%A4B%5C%22t%25%C2%86%5Cu0016p%5C%22%C2%80_N%5Cu0016%C3%812%C3%8E%C2%A8%C2%95%C2%B6%C2%8E%3E%C2%8F%C2%BB%5Cu0003%C3%B3%C3%A487%C2%B0%C2%B7%5Cu0016%C3%B5%C3%BB%5Cu0013C%C2%A5%C3%BC%5Cu001e%C2%9A%C2%BE%5Ct%C2%B5%C3%A8q%5Cu0011%C3%B8!%C2%85%5Cu001e%40%C2%94ZWBN%C2%81%C3%B4%C2%B5%5Cu0006P%23%C2%85%7D%2C%24%C3%BC%C3%BF%5Cu0000%C3%9E6%5Cu0000%C2%B3%C3%8C%5Cu0001E%40b%C3%8Cm%5Cu0003%5Cu0010%3B%C2%B9.%C2%A3vV%7C%C3%AA%C3%9B%C3%9E%C2%90%C3%96%C3%96%C2%89%C2%A7A%C3%A3%5Cu0006%C2%88%C3%97%C3%8E%C3%B2%5Cu001c%C2%9F%C2%9Dg%C3%AD%C3%B5ht%5Cu0018%C3%97%C3%9E%25%7F5%C3%ACh%C3%9811%C3%8Dna%C2%AC%5Cu0019%C3%BD%C2%99U%5Cu000f%C3%8C%C3%B5%C2%9E%C3%998%C2%89z%C3%95%C2%A8%C3%B7%C2%A6%C3%A8%C2%8Dbr%C3%8B%5DQ%5Cu0018%C2%9E%C2%BC%7D%5Cu001b%C3%B5%5Cu001a%C3%B6N%C3%8B%C3%B6%3A%C2%A6y%C2%91%C2%9C%5Cu000e%C2%92%C2%B3A28%C2%B0%C2%9A%C3%B1%C3%AEI%C3%9C%C3%AC%5Cu0014%C2%B2%C3%B1%C3%B3F%C2%BC%C2%BB%C2%91%C2%8Ej%C2%A6~t%C2%9BQ%201c%5Cu0001%C3%B2%C2%81%5Cu000emPD%2B%5Cu0002%C2%B8u%C3%82%5EJ%5Cu0014S%C3%97%5Cu0017%C2%9E%C3%B4%C3%91%C3%84S%C3%81rF8_%C3%987%C3%80%5Cu001e%C2%AF8%C3%8B%C3%B9%5Cu0017Z2%5Cu0000%C2%AD%C3%9E_%C3%BD%5Cu0007%C3%B4%5Cu0014%5C%5C%C2%82%22%2C%22margin%22%3Atrue%2C%22id%22%3A%221BBMR%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-282.5%2C-248%2C1%5D%2C%22width%22%3A768%2C%22height%22%3A478%7D%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1429353%2F1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg%22%2C%22searchcard><h2 data-lake-id=\"654cde5320081bbc17238d3ca45608ec\" id=\"lTKD3\">基础流程</h2><ol data-lake-id=\"54a20882a263a9c720e96e5615ba32e8\" start=\"1\"><li data-lake-id=\"6c28a948786a2a6efa8c12f5cee09383\">用例开始</li><li data-lake-id=\"7ab78f5868f865479269b61c154cc57b\">用户打开页面</li><li data-lake-id=\"72ac6acb41d220d3b87a337c86d06056\">页面提示可以点击左侧按钮展开控件面板</li><li data-lake-id=\"415ab5f4a5582a8efdd7d53601861d47\">用户点击左侧菜单按钮</li><li data-lake-id=\"46e1df5f0cba49a12ac89847b83d7614\">左侧区域出现控件面板</li><li data-lake-id=\"0306bdcf73f8f78e4f24de8c7eee2fbc\">用户点选某个控件</li><li data-lake-id=\"4958da96abe4d9e4b3bf8970207ab0fd\">控件被自动添加到页面中间的设计区域</li><li data-lake-id=\"b3cd6dea1f3ff5412907b0732b04159c\">系统提示可以对控件进行设置属性</li><li data-lake-id=\"9510ae844f2592b212d2d09a0dc6bab1\">用户右击控件</li><li data-lake-id=\"056fa5d0b0a7faa23ffc41cf7d095086\">弹出菜单选项</li><li data-lake-id=\"85e0bd12e44b3332c784b693ab0eeca9\">用户选择“设置属性”</li><li data-lake-id=\"792a0e6fd6669eb609d62919dd4a3072\">右侧区域出现属性面板</li><li data-lake-id=\"395d976c8fe337bb87ebb121a02cedc7\">用户直接选择系统预设的不同属性</li><li data-lake-id=\"894963565cf6b94fab27ca9f2e98ebe2\">系统提示可以点击运行按钮查看生成的页面与代码</li><li data-lake-id=\"853b00b2460ef55420699d1bf7b2f09e\">用户点击运行按钮</li><li data-lake-id=\"c28be4d636fe0429c925e6564e32c45a\">系统自动生成代码成功</li><li data-lake-id=\"badde6b91a4e3966d69b9d21af340893\">系统展示生成完成的代码与效果页面</li><li data-lake-id=\"a2750184c16562d72a02f4fe0d0f624d\">用户将代码复制</li><li data-lake-id=\"249ac3b0c9df5fd052ef32b239ea82ec\">用例结束</li></ol><p data-lake-id=\"6456f3cd0983fc86398cd24697a93f65\"><br /></p><h2 data-lake-id=\"38f712f59cf4a62350bb37817be428bd\" id=\"99teX\">扩展流程</h2><p data-lake-id=\"47b4d86be684cf46a4f11ad326470c07\">11a. 用户选择“复制这个”</p><p data-lake-id=\"4aba653d5e27b2c51bfe0bc027224f13\" style=\"text-indent: 2em;\"><span>11a1. 系统自动添加一个相同的控件</span></p><p data-lake-id=\"c57bbf264c0a76c97e3b1df30768a526\"><span>11b. 用户选择“删除这个”</span></p><p data-lake-id=\"fb9650ee44b1da1936300ff64db37982\" style=\"text-indent: 2em;\"><span>11b1. 系统自动将此控件删除</span></p><p data-lake-id=\"5d0609575b65c996e733ad3237843827\"><span>16a. </span><span>系统自动生成代码失败</span></p><p data-lake-id=\"505ef314403ff3b8cfaa15ea3cb43f7f\" style=\"text-indent: 2em;\"><span>16a1. 系统提示：运行错误</span></p><p data-lake-id=\"34e7f1acdb90280b837b3727a84abd64\" style=\"text-indent: 2em;\"><span>16a2. 执行用例1</span></p><p data-lake-id=\"deaf6286d47f1adf4195e15e49bc68fe\"><span><br /></span></p><h2 data-lake-id=\"dae58329f6baf2b988770ab6eadd6128\" id=\"tahw7\">里程碑</h2><ul class=\"lake-list\" data-lake-id=\"7801db26c33d3a363effd588a5334a8e\"><li data-lake-id=\"82e0e6da20e45f2fd1e101c38c3ead34\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span>布局设置流程打通</span></li></ul><p data-lake-id=\"a0c5a7afd57b9b71a4369c39f30b93e9\" style=\"text-indent: 2em;\"><span>目前可以对全部或部分组件进行布局设置了。</span></p><ul class=\"lake-list\" data-lake-id=\"2d51875ddf29a4077cb128cda57b4046\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"cc0a5dc3449861e14ae23160b266d31e\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义请求options</li><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549d16ea86999c1f9f134334239147d4\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持用户自定义表单提交方法</li></ul><p data-lake-id=\"2b4bb7ff9ac6ee3d0944e955f87133be\" style=\"text-indent: 2em;\">比如请求某个接口</p><ul class=\"lake-list\" data-lake-id=\"e06bac303fde05054fa80b44772c02bf\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"549a882a26a4405fb0825ee09282d242\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成的代码提取公共部分并抽离</li></ul><ul class=\"lake-list\" data-lake-id=\"642338b437e8eacd0cef72a379647431\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"6697f77b3ada3929b1a77120967a403c\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>快捷键支持</li></ul><p data-lake-id=\"873ae9a25b56e75e712410b6032d1f88\" style=\"text-indent: 2em;\">使用快捷键来快速实现某个功能</p><p data-lake-id=\"3cee4bf2e7db0fe5e58463eba5b7275d\" style=\"text-indent: 2em;\">比如：复制、剪切、删除、打开面板</p><ul class=\"lake-list\" data-lake-id=\"24ed78ae07953fab02611383a1012870\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"596a35a5c7f14c299ffb5cc2a33a8666\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>生成后的页面可以转为HTML并下载、预览</li></ul><ul class=\"lake-list\" data-lake-id=\"8f26134098018c09dcb865296009fe7b\"><li class=\"lake-list-node lake-list-task\" data-lake-id=\"f324c7640377d9ec6924a96af5c0f6ea\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card>支持绘制元素</li></ul><p data-lake-id=\"fe8af8a765026717ef889dcf91b1c609\" style=\"text-indent: 2em;\">不仅限于表单，也可以绘制图标、方块、等多种元素</p><p data-lake-id=\"c6ffe302a29272241c3fd288cfebb1b1\"><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-04-08T03:48:30.000Z",
    "deleted_at": null,
    "created_at": "2021-03-06T11:22:40.000Z",
    "updated_at": "2021-04-08T03:48:30.000Z",
    "published_at": "2021-04-08T03:48:30.000Z",
    "first_published_at": "2021-03-06T11:22:40.000Z",
    "word_count": 733,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1429353/1617853708633-c4bf2a5c-fe21-4c9f-9931-5d9383eedded.jpeg",
    "description": "可视化表单 编辑器 代码生成 表单设计版本作者更新日期备注1.0feline2021/3/8拖拽方式组合控件2.0feline2021/3/161.重新布局，设计区域扩大很多(核心不变)2.控件拖拽时，页面展示辅助线概述开发者要开发表单类业务时，由于表单类型多而且复杂，要将这些表单控件一一组合...",
    "custom_description": null,
    "hits": 147,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 69288428,
    "slug": "nbv1mn",
    "title": "React",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "change log <br />React做了两件事：渲染UI和响应事件\n\n性能提升<br />React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。<br />因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一直占用，复杂的业务场景会出现卡顿。\n\nFiber<br />利用浏览器空闲时间执行，不会长时间占用主线程\n\n- requestIdleCallback 浏览器API，可暂停当前任务利用浏览器空闲时间执行优先级更高的任务。\n\n将对比更新dom的操作碎片化<br />碎片化的任务，可以根据需要被暂停\n\n生命周期<br />React生命周期在React16.0版本加入了Fiber时发生了变化，您想听哪个？\n\n- 初始化：constructor 设置props和state\n- 挂载：componentWillMount –>  render –> componentDidMount\n- 更新：\n   - props更新：componentWillReceiveProps –> shouldComponentUpdate –> componentWillUpdate –> render –> componentDidUpdate\n   - state更新：suouldComponentUpdate –> componentWillUpdate –> render –> componentDidUpdate\n- 卸载：componentWillUnmount\n\n面试复盘，录音，值得录音的面试\n\nReact diff算法策略\n\n- 针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。(数量少)\n\n        type变化，比如div变成了p<br />        key变化\n\n- 针对组件结构( component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组件会生成不同的属性结构。\n- 针对元素结构(element-diff)：对于同一层级的一组节点，使用具有唯一性的id区分(key属性)\n\nFiber算法\n\n- 通过state计算出新的Fiber节点\n- 对比节点的tag和key确定节点操作(修改，删除，新增，移动)\n- effectTag标记Fiber对象\n- 收集所有标记的Fiber对象，形成effectList\n- commit阶段一次性处理所有变化的节点\n\n答题留有一定的空间，不要一次全部答完。\n\n\n\n",
    "body_draft": "change log <br />React做了两件事：渲染UI和响应事件\n\n性能提升<br />React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。<br />因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一直占用，复杂的业务场景会出现卡顿。\n\nFiber<br />利用浏览器空闲时间执行，不会长时间占用主线程\n\n- requestIdleCallback 浏览器API，可暂停当前任务利用浏览器空闲时间执行优先级更高的任务。\n\n将对比更新dom的操作碎片化<br />碎片化的任务，可以根据需要被暂停\n\n生命周期<br />React生命周期在React16.0版本加入了Fiber时发生了变化，您想听哪个？\n\n- 初始化：constructor 设置props和state\n- 挂载：componentWillMount –>  render –> componentDidMount\n- 更新：\n   - props更新：componentWillReceiveProps –> shouldComponentUpdate –> componentWillUpdate –> render –> componentDidUpdate\n   - state更新：suouldComponentUpdate –> componentWillUpdate –> render –> componentDidUpdate\n- 卸载：componentWillUnmount\n\n面试复盘，录音，值得录音的面试\n\nReact diff算法策略\n\n- 针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。(数量少)\n\n        type变化，比如div变成了p<br />        key变化\n\n- 针对组件结构( component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组件会生成不同的属性结构。\n- 针对元素结构(element-diff)：对于同一层级的一组节点，使用具有唯一性的id区分(key属性)\n\nFiber算法\n\n- 通过state计算出新的Fiber节点\n- 对比节点的tag和key确定节点操作(修改，删除，新增，移动)\n- effectTag标记Fiber对象\n- 收集所有标记的Fiber对象，形成effectList\n- commit阶段一次性处理所有变化的节点\n\n答题留有一定的空间，不要一次全部答完。\n\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u9b4a08dd\" class=\"ne-p\"><span class=\"ne-text\">change log </span></p><p id=\"uc84d87b8\" class=\"ne-p\"><span class=\"ne-text\">React做了两件事：渲染UI和响应事件</span></p><p id=\"ucc16d360\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u53497129\" class=\"ne-p\"><span class=\"ne-text\">性能提升</span></p><p id=\"u82ac124f\" class=\"ne-p\"><span class=\"ne-text\">React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。</span></p><p id=\"uf840a54b\" class=\"ne-p\"><span class=\"ne-text\">因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一直占用，复杂的业务场景会出现卡顿。</span></p><p id=\"u08adb949\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ue3de0be5\" class=\"ne-p\"><span class=\"ne-text\">Fiber</span></p><p id=\"ud10c69a3\" class=\"ne-p\"><span class=\"ne-text\">利用浏览器空闲时间执行，不会长时间占用主线程</span></p><ul class=\"ne-ul\"><li id=\"ubd36f0a7\"><span class=\"ne-text\">requestIdleCallback 浏览器API，可暂停当前任务利用浏览器空闲时间执行优先级更高的任务。</span></li></ul><p id=\"u905eadc1\" class=\"ne-p\"><span class=\"ne-text\">将对比更新dom的操作碎片化</span></p><p id=\"u31adedd3\" class=\"ne-p\"><span class=\"ne-text\">碎片化的任务，可以根据需要被暂停</span></p><p id=\"u42476e92\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua344c9c3\" class=\"ne-p\"><span class=\"ne-text\">生命周期</span></p><p id=\"u37cad604\" class=\"ne-p\"><span class=\"ne-text\">React生命周期在React16.0版本加入了Fiber时发生了变化，您想听哪个？</span></p><ul class=\"ne-ul\"><li id=\"u5b5ee582\"><span class=\"ne-text\">初始化：constructor 设置props和state</span></li><li id=\"ufdad1d6a\"><span class=\"ne-text\">挂载：componentWillMount –&gt;  render –&gt; componentDidMount</span></li><li id=\"uc671570c\"><span class=\"ne-text\">更新：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u035b53d1\"><span class=\"ne-text\">props更新：componentWillReceiveProps –&gt; shouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li><li id=\"u794febb2\"><span class=\"ne-text\">state更新：suouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"uf01a6214\"><span class=\"ne-text\">卸载：componentWillUnmount</span></li></ul><p id=\"u2f4f38e0\" class=\"ne-p\"><br></p><p id=\"u2cd99b7b\" class=\"ne-p\"><span class=\"ne-text\">面试复盘，录音，值得录音的面试</span></p><p id=\"u1cce2c2c\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u4928e216\" class=\"ne-p\"><span class=\"ne-text\">React diff算法策略</span></p><ul class=\"ne-ul\"><li id=\"u5b8f5283\"><span class=\"ne-text\">针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。(数量少)</span></li></ul><p id=\"u952133fe\" class=\"ne-p\"><span class=\"ne-text\">        type变化，比如div变成了p</span></p><p id=\"ufe753432\" class=\"ne-p\"><span class=\"ne-text\">        key变化</span></p><ul class=\"ne-ul\"><li id=\"u52e6907a\"><span class=\"ne-text\">针对组件结构( component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组件会生成不同的属性结构。</span></li><li id=\"u1c9b542b\"><span class=\"ne-text\">针对元素结构(element-diff)：对于同一层级的一组节点，使用具有唯一性的id区分(key属性)</span></li></ul><p id=\"uc884d839\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ucb357b78\" class=\"ne-p\"><span class=\"ne-text\">Fiber算法</span></p><ul class=\"ne-ul\"><li id=\"u14ca4dc5\"><span class=\"ne-text\">通过state计算出新的Fiber节点</span></li><li id=\"u907a68ba\"><span class=\"ne-text\">对比节点的tag和key确定节点操作(修改，删除，新增，移动)</span></li><li id=\"uc012e0c3\"><span class=\"ne-text\">effectTag标记Fiber对象</span></li><li id=\"ud37bf097\"><span class=\"ne-text\">收集所有标记的Fiber对象，形成effectList</span></li><li id=\"u88c10fdd\"><span class=\"ne-text\">commit阶段一次性处理所有变化的节点</span></li></ul><p id=\"u90d92c47\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uaacbcac6\" class=\"ne-p\"><span class=\"ne-text\">答题留有一定的空间，不要一次全部答完。</span></p><p id=\"u752b7a4f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u73254e11\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u672f8354\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9b4a08dd\" id=\"u9b4a08dd\"><span data-lake-id=\"u0f2ee5ac\" id=\"u0f2ee5ac\">change log </span></p><p data-lake-id=\"uc84d87b8\" id=\"uc84d87b8\"><span data-lake-id=\"u49f63655\" id=\"u49f63655\">React做了两件事：渲染UI和响应事件</span></p><p data-lake-id=\"ucc16d360\" id=\"ucc16d360\"><span data-lake-id=\"u857247d8\" id=\"u857247d8\">​</span><br></p><p data-lake-id=\"u53497129\" id=\"u53497129\"><span data-lake-id=\"u5049c7a6\" id=\"u5049c7a6\">性能提升</span></p><p data-lake-id=\"u82ac124f\" id=\"u82ac124f\"><span data-lake-id=\"ub2e4b4e5\" id=\"ub2e4b4e5\">React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。</span></p><p data-lake-id=\"uf840a54b\" id=\"uf840a54b\"><span data-lake-id=\"u3d408913\" id=\"u3d408913\">因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一直占用，复杂的业务场景会出现卡顿。</span></p><p data-lake-id=\"u08adb949\" id=\"u08adb949\"><span data-lake-id=\"u4aea303b\" id=\"u4aea303b\">​</span><br></p><p data-lake-id=\"ue3de0be5\" id=\"ue3de0be5\"><span data-lake-id=\"u437c3222\" id=\"u437c3222\">Fiber</span></p><p data-lake-id=\"ud10c69a3\" id=\"ud10c69a3\"><span data-lake-id=\"u97bc3fa4\" id=\"u97bc3fa4\">利用浏览器空闲时间执行，不会长时间占用主线程</span></p><ul list=\"ufc6694f8\"><li fid=\"u31e234af\" data-lake-id=\"ubd36f0a7\" id=\"ubd36f0a7\"><span data-lake-id=\"uf5eb00fd\" id=\"uf5eb00fd\">requestIdleCallback 浏览器API，可暂停当前任务利用浏览器空闲时间执行优先级更高的任务。</span></li></ul><p data-lake-id=\"u905eadc1\" id=\"u905eadc1\"><span data-lake-id=\"u43a626fb\" id=\"u43a626fb\">将对比更新dom的操作碎片化</span></p><p data-lake-id=\"u31adedd3\" id=\"u31adedd3\"><span data-lake-id=\"u1536878f\" id=\"u1536878f\">碎片化的任务，可以根据需要被暂停</span></p><p data-lake-id=\"u42476e92\" id=\"u42476e92\"><span data-lake-id=\"ue1e5b12c\" id=\"ue1e5b12c\">​</span><br></p><p data-lake-id=\"ua344c9c3\" id=\"ua344c9c3\"><span data-lake-id=\"ua86405ba\" id=\"ua86405ba\">生命周期</span></p><p data-lake-id=\"u37cad604\" id=\"u37cad604\"><span data-lake-id=\"u2cb62719\" id=\"u2cb62719\">React生命周期在React16.0版本加入了Fiber时发生了变化，您想听哪个？</span></p><ul list=\"u7d6456f0\"><li fid=\"u46bb74a6\" data-lake-id=\"u5b5ee582\" id=\"u5b5ee582\"><span data-lake-id=\"u93e30c5f\" id=\"u93e30c5f\">初始化：constructor 设置props和state</span></li><li fid=\"u46bb74a6\" data-lake-id=\"ufdad1d6a\" id=\"ufdad1d6a\"><span data-lake-id=\"ucf94a0fb\" id=\"ucf94a0fb\">挂载：componentWillMount –&gt;  render –&gt; componentDidMount</span></li><li fid=\"u46bb74a6\" data-lake-id=\"uc671570c\" id=\"uc671570c\"><span data-lake-id=\"ubef06595\" id=\"ubef06595\">更新：</span></li></ul><ul list=\"u7d6456f0\" data-lake-indent=\"1\"><li fid=\"u46bb74a6\" data-lake-id=\"u035b53d1\" id=\"u035b53d1\"><span data-lake-id=\"u71294199\" id=\"u71294199\">props更新：componentWillReceiveProps –&gt; shouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li><li fid=\"u46bb74a6\" data-lake-id=\"u794febb2\" id=\"u794febb2\"><span data-lake-id=\"uf8867185\" id=\"uf8867185\">state更新：suouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li></ul><ul list=\"u7d6456f0\" start=\"4\"><li fid=\"u46bb74a6\" data-lake-id=\"uf01a6214\" id=\"uf01a6214\"><span data-lake-id=\"u6db542f3\" id=\"u6db542f3\">卸载：componentWillUnmount</span></li></ul><p data-lake-id=\"u2f4f38e0\" id=\"u2f4f38e0\"><br></p><p data-lake-id=\"u2cd99b7b\" id=\"u2cd99b7b\"><span data-lake-id=\"ud7d617a4\" id=\"ud7d617a4\">面试复盘，录音，值得录音的面试</span></p><p data-lake-id=\"u1cce2c2c\" id=\"u1cce2c2c\"><span data-lake-id=\"u3025502a\" id=\"u3025502a\">​</span><br></p><p data-lake-id=\"u4928e216\" id=\"u4928e216\"><span data-lake-id=\"u93ff3b66\" id=\"u93ff3b66\">React diff算法策略</span></p><ul list=\"ub89d4bfb\"><li fid=\"ubc2340c1\" data-lake-id=\"u5b8f5283\" id=\"u5b8f5283\"><span data-lake-id=\"u27142fa2\" id=\"u27142fa2\">针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。(数量少)</span></li></ul><p data-lake-id=\"u952133fe\" id=\"u952133fe\"><span data-lake-id=\"ubf743289\" id=\"ubf743289\">        type变化，比如div变成了p</span></p><p data-lake-id=\"ufe753432\" id=\"ufe753432\"><span data-lake-id=\"uf19b790b\" id=\"uf19b790b\">        key变化</span></p><ul list=\"ub89d4bfb\" start=\"2\"><li fid=\"ubc2340c1\" data-lake-id=\"u52e6907a\" id=\"u52e6907a\"><span data-lake-id=\"ud1295776\" id=\"ud1295776\">针对组件结构( component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组件会生成不同的属性结构。</span></li><li fid=\"ubc2340c1\" data-lake-id=\"u1c9b542b\" id=\"u1c9b542b\"><span data-lake-id=\"ub644e6fe\" id=\"ub644e6fe\">针对元素结构(element-diff)：对于同一层级的一组节点，使用具有唯一性的id区分(key属性)</span></li></ul><p data-lake-id=\"uc884d839\" id=\"uc884d839\"><span data-lake-id=\"uf8607779\" id=\"uf8607779\">​</span><br></p><p data-lake-id=\"ucb357b78\" id=\"ucb357b78\"><span data-lake-id=\"u2b7d8677\" id=\"u2b7d8677\">Fiber算法</span></p><ul list=\"ua9e13eb3\"><li fid=\"u7346c2d5\" data-lake-id=\"u14ca4dc5\" id=\"u14ca4dc5\"><span data-lake-id=\"uaa32d0bb\" id=\"uaa32d0bb\">通过state计算出新的Fiber节点</span></li><li fid=\"u7346c2d5\" data-lake-id=\"u907a68ba\" id=\"u907a68ba\"><span data-lake-id=\"ud4ca292e\" id=\"ud4ca292e\">对比节点的tag和key确定节点操作(修改，删除，新增，移动)</span></li><li fid=\"u7346c2d5\" data-lake-id=\"uc012e0c3\" id=\"uc012e0c3\"><span data-lake-id=\"ua39c37ca\" id=\"ua39c37ca\">effectTag标记Fiber对象</span></li><li fid=\"u7346c2d5\" data-lake-id=\"ud37bf097\" id=\"ud37bf097\"><span data-lake-id=\"ua5f088ad\" id=\"ua5f088ad\">收集所有标记的Fiber对象，形成effectList</span></li><li fid=\"u7346c2d5\" data-lake-id=\"u88c10fdd\" id=\"u88c10fdd\"><span data-lake-id=\"u7d6c52b3\" id=\"u7d6c52b3\">commit阶段一次性处理所有变化的节点</span></li></ul><p data-lake-id=\"u90d92c47\" id=\"u90d92c47\"><span data-lake-id=\"u51ba400e\" id=\"u51ba400e\">​</span><br></p><p data-lake-id=\"uaacbcac6\" id=\"uaacbcac6\"><span data-lake-id=\"u9700d7d1\" id=\"u9700d7d1\">答题留有一定的空间，不要一次全部答完。</span></p><p data-lake-id=\"u752b7a4f\" id=\"u752b7a4f\"><span data-lake-id=\"ubb9ad01f\" id=\"ubb9ad01f\">​</span><br></p><p data-lake-id=\"u73254e11\" id=\"u73254e11\"><span data-lake-id=\"u35720d90\" id=\"u35720d90\">​</span><br></p><p data-lake-id=\"u672f8354\" id=\"u672f8354\"><span data-lake-id=\"ub087c170\" id=\"ub087c170\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u9b4a08dd\" id=\"u9b4a08dd\"><span data-lake-id=\"u0f2ee5ac\" id=\"u0f2ee5ac\">change log </span></p><p data-lake-id=\"uc84d87b8\" id=\"uc84d87b8\"><span data-lake-id=\"u49f63655\" id=\"u49f63655\">React做了两件事：渲染UI和响应事件</span></p><p data-lake-id=\"ucc16d360\" id=\"ucc16d360\"><span data-lake-id=\"u857247d8\" id=\"u857247d8\">​</span><br></p><p data-lake-id=\"u53497129\" id=\"u53497129\"><span data-lake-id=\"u5049c7a6\" id=\"u5049c7a6\">性能提升</span></p><p data-lake-id=\"u82ac124f\" id=\"u82ac124f\"><span data-lake-id=\"ub2e4b4e5\" id=\"ub2e4b4e5\">React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。</span></p><p data-lake-id=\"uf840a54b\" id=\"uf840a54b\"><span data-lake-id=\"u3d408913\" id=\"u3d408913\">因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一直占用，复杂的业务场景会出现卡顿。</span></p><p data-lake-id=\"u08adb949\" id=\"u08adb949\"><span data-lake-id=\"u4aea303b\" id=\"u4aea303b\">​</span><br></p><p data-lake-id=\"ue3de0be5\" id=\"ue3de0be5\"><span data-lake-id=\"u437c3222\" id=\"u437c3222\">Fiber</span></p><p data-lake-id=\"ud10c69a3\" id=\"ud10c69a3\"><span data-lake-id=\"u97bc3fa4\" id=\"u97bc3fa4\">利用浏览器空闲时间执行，不会长时间占用主线程</span></p><ul list=\"ufc6694f8\"><li fid=\"u31e234af\" data-lake-id=\"ubd36f0a7\" id=\"ubd36f0a7\"><span data-lake-id=\"uf5eb00fd\" id=\"uf5eb00fd\">requestIdleCallback 浏览器API，可暂停当前任务利用浏览器空闲时间执行优先级更高的任务。</span></li></ul><p data-lake-id=\"u905eadc1\" id=\"u905eadc1\"><span data-lake-id=\"u43a626fb\" id=\"u43a626fb\">将对比更新dom的操作碎片化</span></p><p data-lake-id=\"u31adedd3\" id=\"u31adedd3\"><span data-lake-id=\"u1536878f\" id=\"u1536878f\">碎片化的任务，可以根据需要被暂停</span></p><p data-lake-id=\"u42476e92\" id=\"u42476e92\"><span data-lake-id=\"ue1e5b12c\" id=\"ue1e5b12c\">​</span><br></p><p data-lake-id=\"ua344c9c3\" id=\"ua344c9c3\"><span data-lake-id=\"ua86405ba\" id=\"ua86405ba\">生命周期</span></p><p data-lake-id=\"u37cad604\" id=\"u37cad604\"><span data-lake-id=\"u2cb62719\" id=\"u2cb62719\">React生命周期在React16.0版本加入了Fiber时发生了变化，您想听哪个？</span></p><ul list=\"u7d6456f0\"><li fid=\"u46bb74a6\" data-lake-id=\"u5b5ee582\" id=\"u5b5ee582\"><span data-lake-id=\"u93e30c5f\" id=\"u93e30c5f\">初始化：constructor 设置props和state</span></li><li fid=\"u46bb74a6\" data-lake-id=\"ufdad1d6a\" id=\"ufdad1d6a\"><span data-lake-id=\"ucf94a0fb\" id=\"ucf94a0fb\">挂载：componentWillMount –&gt;  render –&gt; componentDidMount</span></li><li fid=\"u46bb74a6\" data-lake-id=\"uc671570c\" id=\"uc671570c\"><span data-lake-id=\"ubef06595\" id=\"ubef06595\">更新：</span></li></ul><ul list=\"u7d6456f0\" data-lake-indent=\"1\"><li fid=\"u46bb74a6\" data-lake-id=\"u035b53d1\" id=\"u035b53d1\"><span data-lake-id=\"u71294199\" id=\"u71294199\">props更新：componentWillReceiveProps –&gt; shouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li><li fid=\"u46bb74a6\" data-lake-id=\"u794febb2\" id=\"u794febb2\"><span data-lake-id=\"uf8867185\" id=\"uf8867185\">state更新：suouldComponentUpdate –&gt; componentWillUpdate –&gt; render –&gt; componentDidUpdate</span></li></ul><ul list=\"u7d6456f0\" start=\"4\"><li fid=\"u46bb74a6\" data-lake-id=\"uf01a6214\" id=\"uf01a6214\"><span data-lake-id=\"u6db542f3\" id=\"u6db542f3\">卸载：componentWillUnmount</span></li></ul><p data-lake-id=\"u2f4f38e0\" id=\"u2f4f38e0\"><br></p><p data-lake-id=\"u2cd99b7b\" id=\"u2cd99b7b\"><span data-lake-id=\"ud7d617a4\" id=\"ud7d617a4\">面试复盘，录音，值得录音的面试</span></p><p data-lake-id=\"u1cce2c2c\" id=\"u1cce2c2c\"><span data-lake-id=\"u3025502a\" id=\"u3025502a\">​</span><br></p><p data-lake-id=\"u4928e216\" id=\"u4928e216\"><span data-lake-id=\"u93ff3b66\" id=\"u93ff3b66\">React diff算法策略</span></p><ul list=\"ub89d4bfb\"><li fid=\"ubc2340c1\" data-lake-id=\"u5b8f5283\" id=\"u5b8f5283\"><span data-lake-id=\"u27142fa2\" id=\"u27142fa2\">针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。(数量少)</span></li></ul><p data-lake-id=\"u952133fe\" id=\"u952133fe\"><span data-lake-id=\"ubf743289\" id=\"ubf743289\">        type变化，比如div变成了p</span></p><p data-lake-id=\"ufe753432\" id=\"ufe753432\"><span data-lake-id=\"uf19b790b\" id=\"uf19b790b\">        key变化</span></p><ul list=\"ub89d4bfb\" start=\"2\"><li fid=\"ubc2340c1\" data-lake-id=\"u52e6907a\" id=\"u52e6907a\"><span data-lake-id=\"ud1295776\" id=\"ud1295776\">针对组件结构( component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组件会生成不同的属性结构。</span></li><li fid=\"ubc2340c1\" data-lake-id=\"u1c9b542b\" id=\"u1c9b542b\"><span data-lake-id=\"ub644e6fe\" id=\"ub644e6fe\">针对元素结构(element-diff)：对于同一层级的一组节点，使用具有唯一性的id区分(key属性)</span></li></ul><p data-lake-id=\"uc884d839\" id=\"uc884d839\"><span data-lake-id=\"uf8607779\" id=\"uf8607779\">​</span><br></p><p data-lake-id=\"ucb357b78\" id=\"ucb357b78\"><span data-lake-id=\"u2b7d8677\" id=\"u2b7d8677\">Fiber算法</span></p><ul list=\"ua9e13eb3\"><li fid=\"u7346c2d5\" data-lake-id=\"u14ca4dc5\" id=\"u14ca4dc5\"><span data-lake-id=\"uaa32d0bb\" id=\"uaa32d0bb\">通过state计算出新的Fiber节点</span></li><li fid=\"u7346c2d5\" data-lake-id=\"u907a68ba\" id=\"u907a68ba\"><span data-lake-id=\"ud4ca292e\" id=\"ud4ca292e\">对比节点的tag和key确定节点操作(修改，删除，新增，移动)</span></li><li fid=\"u7346c2d5\" data-lake-id=\"uc012e0c3\" id=\"uc012e0c3\"><span data-lake-id=\"ua39c37ca\" id=\"ua39c37ca\">effectTag标记Fiber对象</span></li><li fid=\"u7346c2d5\" data-lake-id=\"ud37bf097\" id=\"ud37bf097\"><span data-lake-id=\"ua5f088ad\" id=\"ua5f088ad\">收集所有标记的Fiber对象，形成effectList</span></li><li fid=\"u7346c2d5\" data-lake-id=\"u88c10fdd\" id=\"u88c10fdd\"><span data-lake-id=\"u7d6c52b3\" id=\"u7d6c52b3\">commit阶段一次性处理所有变化的节点</span></li></ul><p data-lake-id=\"u90d92c47\" id=\"u90d92c47\"><span data-lake-id=\"u51ba400e\" id=\"u51ba400e\">​</span><br></p><p data-lake-id=\"uaacbcac6\" id=\"uaacbcac6\"><span data-lake-id=\"u9700d7d1\" id=\"u9700d7d1\">答题留有一定的空间，不要一次全部答完。</span></p><p data-lake-id=\"u752b7a4f\" id=\"u752b7a4f\"><span data-lake-id=\"ubb9ad01f\" id=\"ubb9ad01f\">​</span><br></p><p data-lake-id=\"u73254e11\" id=\"u73254e11\"><span data-lake-id=\"u35720d90\" id=\"u35720d90\">​</span><br></p><p data-lake-id=\"u672f8354\" id=\"u672f8354\"><span data-lake-id=\"ub087c170\" id=\"ub087c170\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-31T07:09:23.000Z",
    "deleted_at": null,
    "created_at": "2022-03-13T13:51:37.000Z",
    "updated_at": "2022-03-31T07:09:24.000Z",
    "published_at": "2022-03-31T07:09:23.000Z",
    "first_published_at": "2022-03-13T14:21:55.000Z",
    "word_count": 537,
    "cover": null,
    "description": "change log React做了两件事：渲染UI和响应事件性能提升React虚拟dom的数据结构时间复杂度是O(n^3)，链表的数据结构时间复杂度是O(n)，所以React16.0之后使用链表的数据结构。因为React16.0之前的虚拟dom更新采用的是循环和递归，由于是线性的主线程会被一...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 68913348,
    "slug": "xihxbg",
    "title": "常用方法之数据类型",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "```javascript\nfunction toType(obj) {\n  const reg = /^\\[Object (.+)\\]$/\n  if (obj == null) return obj + ''\n  return typeof obj === 'object' || typeof obj === 'function'\n    ? reg.test(Object.prototype.toString(obj))[1].toLowerCase()\n    : typeof obj\n}\n\n```\n```javascript\nfunction isPlainObject(obj) {\n  let proto, Ctor\n  if (!obj || Object.prototype.toString.call(obj) !== '[object Object]')\n    return false\n  proto = Object.getPrototypeOf(obj)\n  if (!proto) return true\n  Ctor =\n    Object.prototype.hasOwnProperty.call(proto, 'constructor') &&\n    proto.constructor\n  return typeof Ctor === 'function' && Ctor === Object\n}\n\n```\n```javascript\nfunction isEmptyObject(obj) {\n  if (obj == null || /^(object|function)$/.test(typeof obj)) return false\n  let keys = Object.getOwnPropertyNames(obj)\n  if (typeof Symbol !== 'undefined')\n    keys = keys.concat(Object.getOwnPropertySymbols(obj))\n  return keys.length === 0\n}\n\n```\n",
    "body_draft": "```javascript\nfunction toType(obj) {\n  const reg = /^\\[Object (.+)\\]$/\n  if (obj == null) return obj + ''\n  return typeof obj === 'object' || typeof obj === 'function'\n    ? reg.test(Object.prototype.toString(obj))[1].toLowerCase()\n    : typeof obj\n}\n\n```\n```javascript\nfunction isPlainObject(obj) {\n  let proto, Ctor\n  if (!obj || Object.prototype.toString.call(obj) !== '[object Object]')\n    return false\n  proto = Object.getPrototypeOf(obj)\n  if (!proto) return true\n  Ctor =\n    Object.prototype.hasOwnProperty.call(proto, 'constructor') &&\n    proto.constructor\n  return typeof Ctor === 'function' && Ctor === Object\n}\n\n```\n```javascript\nfunction isEmptyObject(obj) {\n  if (obj == null || /^(object|function)$/.test(typeof obj)) return false\n  let keys = Object.getOwnPropertyNames(obj)\n  if (typeof Symbol !== 'undefined')\n    keys = keys.concat(Object.getOwnPropertySymbols(obj))\n  return keys.length === 0\n}\n\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><pre data-language=\"javascript\" id=\"cRmeZ\" class=\"ne-codeblock language-javascript\">function toType(obj) {\n  const reg = /^\\[Object (.+)\\]$/\n  if (obj == null) return obj + ''\n  return typeof obj === 'object' || typeof obj === 'function'\n    ? reg.test(Object.prototype.toString(obj))[1].toLowerCase()\n    : typeof obj\n}\n</pre><pre data-language=\"javascript\" id=\"ZUzAu\" class=\"ne-codeblock language-javascript\">function isPlainObject(obj) {\n  let proto, Ctor\n  if (!obj || Object.prototype.toString.call(obj) !== '[object Object]')\n    return false\n  proto = Object.getPrototypeOf(obj)\n  if (!proto) return true\n  Ctor =\n    Object.prototype.hasOwnProperty.call(proto, 'constructor') &amp;&amp;\n    proto.constructor\n  return typeof Ctor === 'function' &amp;&amp; Ctor === Object\n}\n</pre><pre data-language=\"javascript\" id=\"dGxDQ\" class=\"ne-codeblock language-javascript\">function isEmptyObject(obj) {\n  if (obj == null || /^(object|function)$/.test(typeof obj)) return false\n  let keys = Object.getOwnPropertyNames(obj)\n  if (typeof Symbol !== 'undefined')\n    keys = keys.concat(Object.getOwnPropertySymbols(obj))\n  return keys.length === 0\n}\n</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22theme%22%3A%22Github%20Light%22%2C%22mode%22%3A%22javascript%22%2C%22__spacing%22%3A%22both%22%2C%22code%22%3A%22function%20toType(obj)%20%7B%5Cn%20%20const%20reg%20%3D%20%2F%5E%5C%5C%5BObject%20(.%2B)%5C%5C%5D%24%2F%5Cn%20%20if%20(obj%20%3D%3D%20null)%20return%20obj%20%2B%20''%5Cn%20%20return%20typeof%20obj%20%3D%3D%3D%20'object'%20%7C%7C%20typeof%20obj%20%3D%3D%3D%20'function'%5Cn%20%20%20%20%3F%20reg.test(Object.prototype.toString(obj))%5B1%5D.toLowerCase()%5Cn%20%20%20%20%3A%20typeof%20obj%5Cn%7D%5Cn%22%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%22%2C%22collapsed%22%3Atrue%2C%22foldLines%22%3A%5B%5D%2C%22lightLines%22%3A%5B%5D%2C%22id%22%3A%22cRmeZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22theme%22%3A%22Github%20Light%22%2C%22mode%22%3A%22javascript%22%2C%22__spacing%22%3A%22both%22%2C%22code%22%3A%22function%20isPlainObject(obj)%20%7B%5Cn%20%20let%20proto%2C%20Ctor%5Cn%20%20if%20(!obj%20%7C%7C%20Object.prototype.toString.call(obj)%20!%3D%3D%20'%5Bobject%20Object%5D')%5Cn%20%20%20%20return%20false%5Cn%20%20proto%20%3D%20Object.getPrototypeOf(obj)%5Cn%20%20if%20(!proto)%20return%20true%5Cn%20%20Ctor%20%3D%5Cn%20%20%20%20Object.prototype.hasOwnProperty.call(proto%2C%20'constructor')%20%26%26%5Cn%20%20%20%20proto.constructor%5Cn%20%20return%20typeof%20Ctor%20%3D%3D%3D%20'function'%20%26%26%20Ctor%20%3D%3D%3D%20Object%5Cn%7D%5Cn%22%2C%22foldLines%22%3A%5B%5D%2C%22lightLines%22%3A%5B%5D%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E6%A0%87%E5%87%86%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%22%2C%22collapsed%22%3Atrue%2C%22id%22%3A%22ZUzAu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22theme%22%3A%22Github%20Light%22%2C%22mode%22%3A%22javascript%22%2C%22__spacing%22%3A%22both%22%2C%22code%22%3A%22function%20isEmptyObject(obj)%20%7B%5Cn%20%20if%20(obj%20%3D%3D%20null%20%7C%7C%20%2F%5E(object%7Cfunction)%24%2F.test(typeof%20obj))%20return%20false%5Cn%20%20let%20keys%20%3D%20Object.getOwnPropertyNames(obj)%5Cn%20%20if%20(typeof%20Symbol%20!%3D%3D%20'undefined')%5Cn%20%20%20%20keys%20%3D%20keys.concat(Object.getOwnPropertySymbols(obj))%5Cn%20%20return%20keys.length%20%3D%3D%3D%200%5Cn%7D%5Cn%22%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E5%AF%B9%E8%B1%A1%22%2C%22collapsed%22%3Atrue%2C%22foldLines%22%3A%5B%5D%2C%22lightLines%22%3A%5B%5D%2C%22id%22%3A%22dGxDQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20toType(obj)%20%7B%5Cn%20%20const%20reg%20%3D%20%2F%5E%5C%5C%5BObject%20(.%2B)%5C%5C%5D%24%2F%5Cn%20%20if%20(obj%20%3D%3D%20null)%20return%20obj%20%2B%20''%5Cn%20%20return%20typeof%20obj%20%3D%3D%3D%20'object'%20%7C%7C%20typeof%20obj%20%3D%3D%3D%20'function'%5Cn%20%20%20%20%3F%20reg.test(Object.prototype.toString(obj))%5B1%5D.toLowerCase()%5Cn%20%20%20%20%3A%20typeof%20obj%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cRmeZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20isPlainObject(obj)%20%7B%5Cn%20%20let%20proto%2C%20Ctor%5Cn%20%20if%20(!obj%20%7C%7C%20Object.prototype.toString.call(obj)%20!%3D%3D%20'%5Bobject%20Object%5D')%5Cn%20%20%20%20return%20false%5Cn%20%20proto%20%3D%20Object.getPrototypeOf(obj)%5Cn%20%20if%20(!proto)%20return%20true%5Cn%20%20Ctor%20%3D%5Cn%20%20%20%20Object.prototype.hasOwnProperty.call(proto%2C%20'constructor')%20%26%26%5Cn%20%20%20%20proto.constructor%5Cn%20%20return%20typeof%20Ctor%20%3D%3D%3D%20'function'%20%26%26%20Ctor%20%3D%3D%3D%20Object%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E6%A0%87%E5%87%86%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZUzAu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20isEmptyObject(obj)%20%7B%5Cn%20%20if%20(obj%20%3D%3D%20null%20%7C%7C%20%2F%5E(object%7Cfunction)%24%2F.test(typeof%20obj))%20return%20false%5Cn%20%20let%20keys%20%3D%20Object.getOwnPropertyNames(obj)%5Cn%20%20if%20(typeof%20Symbol%20!%3D%3D%20'undefined')%5Cn%20%20%20%20keys%20%3D%20keys.concat(Object.getOwnPropertySymbols(obj))%5Cn%20%20return%20keys.length%20%3D%3D%3D%200%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22name%22%3A%22%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E5%AF%B9%E8%B1%A1%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dGxDQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-25T07:37:31.000Z",
    "deleted_at": null,
    "created_at": "2022-03-10T02:55:27.000Z",
    "updated_at": "2022-03-25T07:38:22.000Z",
    "published_at": "2022-03-10T02:59:08.000Z",
    "first_published_at": "2022-03-10T02:59:08.000Z",
    "word_count": 99,
    "cover": null,
    "description": "function toType(obj) {   const reg = /^\\[Object (.+)\\]$/   if (obj == null) return obj + ''   return typeof obj === 'object' || typeof obj === 'fun...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 68904467,
    "slug": "dqwfm1",
    "title": "防抖和节流实现原理",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"e4EgX\"></a>\n# 防抖\n在用户频繁的进行某项操作时，只识别一次\n```javascript\nfunction clearTimer (timer) {\n  if(typeof timer !== null) clearTimeout(timer)\n  return null\n}\n\n// 简单版本\nfunction debounce(func, wait) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait !== 'number') wait = 300\n  let timer = null\n  return function handle(...args) {\n    timer = clearTimer(timer)\n    timer = setTimeout(() => {\n      clearTimer(timer)\n      func.call(this, ...args)\n    }, wait)\n  }\n}\n\n// 支持自定义边界\nfunction debounce(func, wait, flag) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait === 'boolean') flag = wait\n  if(typeof wait !== 'number') wait = 300\n  if(typeof flag !== 'boolean') flag = false\n  let timer = null\n  return function handle(...args) {\n    let beforeRun = !timer && flag\n    timer = clearTimer(timer)\n    timer = setTimeout(() => {\n      timer = clearTimer(timer)\n      !flag && func.apply(this, args)\n    }, wait)\n    beforeRun && unc.apply(this, args)\n  }\n}\n```\n<a name=\"amYLa\"></a>\n# 节流\n在用户频繁的进行某项操作时，降低默认触发的频率\n```javascript\nfunction clearTimer(timer) {\n  if (typeof timer !== 'null') clearTimeout(timer)\n  return null\n}\n\nfunction throttle(func, wait) {\n  if (typeof func !== 'function') throw new TypeErrot('func必须是一个函数')\n  if (typeof wait !== 'number') wait = 300\n  let timer = null,\n    previousTime = +new Date()\n  return function handle(...args) {\n    let now = +new Date()\n    let remaining = wait - (now - previousTime)\n    // 间隔超过或者等于300\n    if (remaining <= 0) {\n      previousTime = +new Date()\n      timer = clearTimer(timer)\n      func.apply(this, args)\n    }\n    // 没有到达间隔时间，并且之前没有设置过定时器，如果之前设置过定时器就不管了\n    if (!timer) {\n      timer = setTimeout(() => {\n        previousTime = +new Date()\n        timer = clearTimer(timer)\n        func.apply(this, args)\n      }, wait)\n    }\n  }\n}\n\n```\n",
    "body_draft": "<a name=\"e4EgX\"></a>\n# 防抖\n在用户频繁的进行某项操作时，只识别一次\n```javascript\nfunction clearTimer (timer) {\n  if(typeof timer !== null) clearTimeout(timer)\n  return null\n}\n\n// 简单版本\nfunction debounce(func, wait) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait !== 'number') wait = 300\n  let timer = null\n  return function handle(...args) {\n    timer = clearTimer(timer)\n    timer = setTimeout(() => {\n      clearTimer(timer)\n      func.call(this, ...args)\n    }, wait)\n  }\n}\n\n// 支持自定义边界\nfunction debounce(func, wait, flag) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait === 'boolean') flag = wait\n  if(typeof wait !== 'number') wait = 300\n  if(typeof flag !== 'boolean') flag = false\n  let timer = null\n  return function handle(...args) {\n    let beforeRun = !timer && flag\n    timer = clearTimer(timer)\n    timer = setTimeout(() => {\n      timer = clearTimer(timer)\n      !flag && func.apply(this, args)\n    }, wait)\n    beforeRun && unc.apply(this, args)\n  }\n}\n```\n<a name=\"amYLa\"></a>\n# 节流\n在用户频繁的进行某项操作时，降低默认触发的频率\n```javascript\nfunction clearTimer(timer) {\n  if (typeof timer !== 'null') clearTimeout(timer)\n  return null\n}\n\nfunction throttle(func, wait) {\n  if (typeof func !== 'function') throw new TypeErrot('func必须是一个函数')\n  if (typeof wait !== 'number') wait = 300\n  let timer = null,\n    previousTime = +new Date()\n  return function handle(...args) {\n    let now = +new Date()\n    let remaining = wait - (now - previousTime)\n    // 间隔超过或者等于300\n    if (remaining <= 0) {\n      previousTime = +new Date()\n      timer = clearTimer(timer)\n      func.apply(this, args)\n    }\n    // 没有到达间隔时间，并且之前没有设置过定时器，如果之前设置过定时器就不管了\n    if (!timer) {\n      timer = setTimeout(() => {\n        previousTime = +new Date()\n        timer = clearTimer(timer)\n        func.apply(this, args)\n      }, wait)\n    }\n  }\n}\n\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"e4EgX\"><span class=\"ne-text\">防抖</span></h1><p id=\"ue592869a\" class=\"ne-p\"><span class=\"ne-text\">在用户频繁的进行某项操作时，只识别一次</span></p><pre data-language=\"javascript\" id=\"XTJyw\" class=\"ne-codeblock language-javascript\">function clearTimer (timer) {\n  if(typeof timer !== null) clearTimeout(timer)\n  return null\n}\n\n// 简单版本\nfunction debounce(func, wait) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait !== 'number') wait = 300\n  let timer = null\n  return function handle(...args) {\n    timer = clearTimer(timer)\n    timer = setTimeout(() =&gt; {\n      clearTimer(timer)\n      func.call(this, ...args)\n    }, wait)\n  }\n}\n\n// 支持自定义边界\nfunction debounce(func, wait, flag) {\n  if(typeof func !== 'function') throw new TypeError('func必须是一个函数')\n  if(typeof wait === 'boolean') flag = wait\n  if(typeof wait !== 'number') wait = 300\n  if(typeof flag !== 'boolean') flag = false\n  let timer = null\n  return function handle(...args) {\n    let beforeRun = !timer &amp;&amp; flag\n    timer = clearTimer(timer)\n    timer = setTimeout(() =&gt; {\n      timer = clearTimer(timer)\n      !flag &amp;&amp; func.apply(this, args)\n    }, wait)\n    beforeRun &amp;&amp; unc.apply(this, args)\n  }\n}</pre><h1 id=\"amYLa\"><span class=\"ne-text\">节流</span></h1><p id=\"uf687df2a\" class=\"ne-p\"><span class=\"ne-text\">在用户频繁的进行某项操作时，降低默认触发的频率</span></p><pre data-language=\"javascript\" id=\"EDL5S\" class=\"ne-codeblock language-javascript\">function clearTimer(timer) {\n  if (typeof timer !== 'null') clearTimeout(timer)\n  return null\n}\n\nfunction throttle(func, wait) {\n  if (typeof func !== 'function') throw new TypeErrot('func必须是一个函数')\n  if (typeof wait !== 'number') wait = 300\n  let timer = null,\n    previousTime = +new Date()\n  return function handle(...args) {\n    let now = +new Date()\n    let remaining = wait - (now - previousTime)\n    // 间隔超过或者等于300\n    if (remaining &lt;= 0) {\n      previousTime = +new Date()\n      timer = clearTimer(timer)\n      func.apply(this, args)\n    }\n    // 没有到达间隔时间，并且之前没有设置过定时器，如果之前设置过定时器就不管了\n    if (!timer) {\n      timer = setTimeout(() =&gt; {\n        previousTime = +new Date()\n        timer = clearTimer(timer)\n        func.apply(this, args)\n      }, wait)\n    }\n  }\n}\n</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h1 data-lake-id=\"e4EgX\" id=\"e4EgX\"><span data-lake-id=\"u7e121995\" id=\"u7e121995\">防抖</span></h1><p data-lake-id=\"ue592869a\" id=\"ue592869a\"><span data-lake-id=\"u966c7631\" id=\"u966c7631\">在用户频繁的进行某项操作时，只识别一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22theme%22%3A%22Github%20Light%22%2C%22mode%22%3A%22javascript%22%2C%22__spacing%22%3A%22both%22%2C%22code%22%3A%22function%20clearTimer%20(timer)%20%7B%5Cn%20%20if(typeof%20timer%20!%3D%3D%20null)%20clearTimeout(timer)%5Cn%20%20return%20null%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AC%5Cnfunction%20debounce(func%2C%20wait)%20%7B%5Cn%20%20if(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeError('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20let%20timer%20%3D%20null%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20clearTimer(timer)%5Cn%20%20%20%20%20%20func.call(this%2C%20...args)%5Cn%20%20%20%20%7D%2C%20wait)%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%B9%E7%95%8C%5Cnfunction%20debounce(func%2C%20wait%2C%20flag)%20%7B%5Cn%20%20if(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeError('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if(typeof%20wait%20%3D%3D%3D%20'boolean')%20flag%20%3D%20wait%5Cn%20%20if(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20if(typeof%20flag%20!%3D%3D%20'boolean')%20flag%20%3D%20false%5Cn%20%20let%20timer%20%3D%20null%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20let%20beforeRun%20%3D%20!timer%20%26%26%20flag%5Cn%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20!flag%20%26%26%20func.apply(this%2C%20args)%5Cn%20%20%20%20%7D%2C%20wait)%5Cn%20%20%20%20beforeRun%20%26%26%20unc.apply(this%2C%20args)%5Cn%20%20%7D%5Cn%7D%22%2C%22name%22%3A%22%E9%98%B2%E6%8A%96%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%2C%22foldLines%22%3A%5B%5D%2C%22lightLines%22%3A%5B%5D%2C%22id%22%3A%22XTJyw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"amYLa\" id=\"amYLa\"><span data-lake-id=\"u9adfdf4c\" id=\"u9adfdf4c\">节流</span></h1><p data-lake-id=\"uf687df2a\" id=\"uf687df2a\"><span data-lake-id=\"ud9a76385\" id=\"ud9a76385\">在用户频繁的进行某项操作时，降低默认触发的频率</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22theme%22%3A%22Github%20Light%22%2C%22mode%22%3A%22javascript%22%2C%22__spacing%22%3A%22both%22%2C%22code%22%3A%22function%20clearTimer(timer)%20%7B%5Cn%20%20if%20(typeof%20timer%20!%3D%3D%20'null')%20clearTimeout(timer)%5Cn%20%20return%20null%5Cn%7D%5Cn%5Cnfunction%20throttle(func%2C%20wait)%20%7B%5Cn%20%20if%20(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeErrot('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if%20(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20let%20timer%20%3D%20null%2C%5Cn%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20let%20now%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20let%20remaining%20%3D%20wait%20-%20(now%20-%20previousTime)%5Cn%20%20%20%20%2F%2F%20%E9%97%B4%E9%9A%94%E8%B6%85%E8%BF%87%E6%88%96%E8%80%85%E7%AD%89%E4%BA%8E300%5Cn%20%20%20%20if%20(remaining%20%3C%3D%200)%20%7B%5Cn%20%20%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20func.apply(this%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E6%B2%A1%E6%9C%89%E5%88%B0%E8%BE%BE%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B9%8B%E5%89%8D%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B9%8B%E5%89%8D%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%AE%9A%E6%97%B6%E5%99%A8%E5%B0%B1%E4%B8%8D%E7%AE%A1%E4%BA%86%5Cn%20%20%20%20if%20(!timer)%20%7B%5Cn%20%20%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20%20%20func.apply(this%2C%20args)%5Cn%20%20%20%20%20%20%7D%2C%20wait)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22name%22%3A%22%E8%8A%82%E6%B5%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%2C%22foldLines%22%3A%5B%5D%2C%22lightLines%22%3A%5B%5D%2C%22id%22%3A%22EDL5S%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h1 data-lake-id=\"e4EgX\" id=\"e4EgX\"><span data-lake-id=\"u7e121995\" id=\"u7e121995\">防抖</span></h1><p data-lake-id=\"ue592869a\" id=\"ue592869a\"><span data-lake-id=\"u966c7631\" id=\"u966c7631\">在用户频繁的进行某项操作时，只识别一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20clearTimer%20(timer)%20%7B%5Cn%20%20if(typeof%20timer%20!%3D%3D%20null)%20clearTimeout(timer)%5Cn%20%20return%20null%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AC%5Cnfunction%20debounce(func%2C%20wait)%20%7B%5Cn%20%20if(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeError('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20let%20timer%20%3D%20null%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20clearTimer(timer)%5Cn%20%20%20%20%20%20func.call(this%2C%20...args)%5Cn%20%20%20%20%7D%2C%20wait)%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%B9%E7%95%8C%5Cnfunction%20debounce(func%2C%20wait%2C%20flag)%20%7B%5Cn%20%20if(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeError('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if(typeof%20wait%20%3D%3D%3D%20'boolean')%20flag%20%3D%20wait%5Cn%20%20if(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20if(typeof%20flag%20!%3D%3D%20'boolean')%20flag%20%3D%20false%5Cn%20%20let%20timer%20%3D%20null%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20let%20beforeRun%20%3D%20!timer%20%26%26%20flag%5Cn%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20!flag%20%26%26%20func.apply(this%2C%20args)%5Cn%20%20%20%20%7D%2C%20wait)%5Cn%20%20%20%20beforeRun%20%26%26%20unc.apply(this%2C%20args)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E9%98%B2%E6%8A%96%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XTJyw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"amYLa\" id=\"amYLa\"><span data-lake-id=\"u9adfdf4c\" id=\"u9adfdf4c\">节流</span></h1><p data-lake-id=\"uf687df2a\" id=\"uf687df2a\"><span data-lake-id=\"ud9a76385\" id=\"ud9a76385\">在用户频繁的进行某项操作时，降低默认触发的频率</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20clearTimer(timer)%20%7B%5Cn%20%20if%20(typeof%20timer%20!%3D%3D%20'null')%20clearTimeout(timer)%5Cn%20%20return%20null%5Cn%7D%5Cn%5Cnfunction%20throttle(func%2C%20wait)%20%7B%5Cn%20%20if%20(typeof%20func%20!%3D%3D%20'function')%20throw%20new%20TypeErrot('func%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0')%5Cn%20%20if%20(typeof%20wait%20!%3D%3D%20'number')%20wait%20%3D%20300%5Cn%20%20let%20timer%20%3D%20null%2C%5Cn%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20return%20function%20handle(...args)%20%7B%5Cn%20%20%20%20let%20now%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20let%20remaining%20%3D%20wait%20-%20(now%20-%20previousTime)%5Cn%20%20%20%20%2F%2F%20%E9%97%B4%E9%9A%94%E8%B6%85%E8%BF%87%E6%88%96%E8%80%85%E7%AD%89%E4%BA%8E300%5Cn%20%20%20%20if%20(remaining%20%3C%3D%200)%20%7B%5Cn%20%20%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20func.apply(this%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E6%B2%A1%E6%9C%89%E5%88%B0%E8%BE%BE%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B9%8B%E5%89%8D%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B9%8B%E5%89%8D%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%AE%9A%E6%97%B6%E5%99%A8%E5%B0%B1%E4%B8%8D%E7%AE%A1%E4%BA%86%5Cn%20%20%20%20if%20(!timer)%20%7B%5Cn%20%20%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20previousTime%20%3D%20%2Bnew%20Date()%5Cn%20%20%20%20%20%20%20%20timer%20%3D%20clearTimer(timer)%5Cn%20%20%20%20%20%20%20%20func.apply(this%2C%20args)%5Cn%20%20%20%20%20%20%7D%2C%20wait)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E8%8A%82%E6%B5%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22EDL5S%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-25T07:51:48.000Z",
    "deleted_at": null,
    "created_at": "2022-03-10T02:32:19.000Z",
    "updated_at": "2022-03-25T07:51:48.000Z",
    "published_at": "2022-03-10T02:37:01.000Z",
    "first_published_at": "2022-03-10T02:37:01.000Z",
    "word_count": 347,
    "cover": null,
    "description": "防抖在用户频繁的进行某项操作时，只识别一次function clearTimer (timer) {   if(typeof timer !== null) clearTimeout(timer)   return null }  // 简单版本 function debounce(func,...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 68892282,
    "slug": "sk8ag5",
    "title": "JavaScript之数据类型",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"fotpF\"></a>\n## JS中的数据类型被分为两大类：\n<a name=\"m2xDG\"></a>\n#### 原始值类型（值类型/基本数据类型）\n\n1. number 数字\n1. string 字符串\n1. boolean 布尔\n1. null 空对象指针\n1. undefined 未定义\n1. symbol 唯一值\n1. bigint 大数\n<a name=\"JVHRn\"></a>\n#### 对象类型（引用数据类型）\n\n1. 标准普通对象 `Object`\n1. 标准特殊对象 `Array`、`RegExp`、`Date`、`Math`、`Error`......\n1. 非标准特殊对象 `Number`、`String`、`Boolean`\n1. 可调用/执行对象（函数） `Function`\n<a name=\"qmgeO\"></a>\n## 数据类型检测的方式（4种）\n\n1. `typeof [value]` 返回值是字符串，字符串中包含所属的类型\n   1. typeof检测对象类型，除函数被识别'function'，其余都是'object'（不能细分对象）\n   1. 基于typeof检测一个未被声明的变量，不会报错，结果是'undefined'\n   1. `typeof null -> 'object'` typeof检测null结果是'object'的原因是：如果是以'000'开始的二进制，则被识别为对象(null存储的二进制都是0，符合以'000'开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回'function')，没实现就是对象(返回'object')\n2. `Object.prototype.toString.call([value])`\n2. `[value] instanceof [constructor]`\n2. `[value].constructor`\n\n其他检测固定类型的方法：`Array.isArray([value])`、`isNaN([value])` ......<br />检测是否为对象：`val !== null && /^(object|function)$/i.test(typeof val)`<br />0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。<br />运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。\n```javascript\nconst coefficent = function coefficent (num) {\n  num = String(num)\n  const [, char = ''] = num.split('.'),len = char.length\n  return Math.pow(10, len)\n}\n```\n```javascript\nconst plus = function plus (n, m) {\n  n = Number(n)\n  m = Number(m)\n  let coeffic = Math.max(coefficient(n), coefficent(m))\n  return (n * coeffic + m * coeffic) / coeffic\n}\n```\n<a name=\"Zafa8\"></a>\n## 数据类型转换\n一般将其他数据类型转换为`Number`、`String`、`Boolean`\n<a name=\"fgZCl\"></a>\n#### 把其他类型值转换为`Number`\n\n1. `Number([value])`\n1. `parseInt([val],[radix])`、`parseFloat([val])`\n<a name=\"KRyF1\"></a>\n#### 把其他类型值转换为`String`\n\n1. `[value].toString()`\n1. `String([value])`\n<a name=\"zUCit\"></a>\n#### 把其他类型值转换为`Boolean`\n转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true<br />出现情况：\n\n1. `Boolean([val])`或者`!/!!`\n1. `条件判断`\n",
    "body_draft": "<a name=\"fotpF\"></a>\n## JS中的数据类型被分为两大类：\n<a name=\"m2xDG\"></a>\n#### 原始值类型（值类型/基本数据类型）\n\n1. number 数字\n1. string 字符串\n1. boolean 布尔\n1. null 空对象指针\n1. undefined 未定义\n1. symbol 唯一值\n1. bigint 大数\n<a name=\"JVHRn\"></a>\n#### 对象类型（引用数据类型）\n\n1. 标准普通对象 `Object`\n1. 标准特殊对象 `Array`、`RegExp`、`Date`、`Math`、`Error`......\n1. 非标准特殊对象 `Number`、`String`、`Boolean`\n1. 可调用/执行对象（函数） `Function`\n<a name=\"qmgeO\"></a>\n## 数据类型检测的方式（4种）\n\n1. `typeof [value]` 返回值是字符串，字符串中包含所属的类型\n   1. typeof检测对象类型，除函数被识别`'function'`，其余都是`'object'`（不能细分对象）\n   1. 基于typeof检测一个未被声明的变量，不会报错，结果是`'undefined'`\n   1. `typeof null -> 'object'` typeof检测null结果是`'object'`的原因是：如果是以'000'开始的二进制，则被识别为对象(null存储的二进制都是0，符合以'000'开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回`'function'`)，没实现就是对象(返回`'object'`)\n2. `Object.prototype.toString.call([value])`\n2. `[value] instanceof [constructor]`\n2. `[value].constructor`\n\n其他检测固定类型的方法：`Array.isArray([value])`、`isNaN([value])` ......<br />检测是否为对象：`val !== null && /^(object|function)$/i.test(typeof val)`<br />0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。<br />运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。\n```javascript\nconst coefficent = function coefficent (num) {\n  num = String(num)\n  const [, char = ''] = num.split('.'),len = char.length\n  return Math.pow(10, len)\n}\n```\n```javascript\nconst plus = function plus (n, m) {\n  n = Number(n)\n  m = Number(m)\n  let coeffic = Math.max(coefficient(n), coefficent(m))\n  return (n * coeffic + m * coeffic) / coeffic\n}\n```\n<a name=\"Zafa8\"></a>\n## 数据类型转换\n一般将其他数据类型转换为`Number`、`String`、`Boolean`\n<a name=\"fgZCl\"></a>\n#### 把其他类型值转换为`Number`\n\n1. `Number([value])`\n1. `parseInt([val],[radix])`、`parseFloat([val])`\n<a name=\"KRyF1\"></a>\n#### 把其他类型值转换为`String`\n\n1. `[value].toString()`\n1. `String([value])`\n<a name=\"zUCit\"></a>\n#### 把其他类型值转换为`Boolean`\n转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true<br />出现情况：\n\n1. `Boolean([val])`或者`!/!!`\n1. `条件判断`\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"fotpF\"><span class=\"ne-text\">JS中的数据类型被分为两大类：</span></h2><h4 id=\"m2xDG\"><span class=\"ne-text\">原始值类型（值类型/基本数据类型）</span></h4><ol class=\"ne-ol\"><li id=\"ud64d1614\"><span class=\"ne-text\">number 数字</span></li></ol><ol class=\"ne-ol\"><li id=\"u436cc15f\"><span class=\"ne-text\">string 字符串</span></li><li id=\"u560a5635\"><span class=\"ne-text\">boolean 布尔</span></li><li id=\"u5be86b28\"><span class=\"ne-text\">null 空对象指针</span></li><li id=\"ua9882944\"><span class=\"ne-text\">undefined 未定义</span></li><li id=\"ufbaa78b1\"><span class=\"ne-text\">symbol 唯一值</span></li><li id=\"u7c96a776\"><span class=\"ne-text\">bigint 大数</span></li></ol><h4 id=\"JVHRn\"><span class=\"ne-text\">对象类型（引用数据类型）</span></h4><ol class=\"ne-ol\"><li id=\"ua49e741f\"><span class=\"ne-text\">标准普通对象 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code></li><li id=\"u66272a45\"><span class=\"ne-text\">标准特殊对象 </span><code class=\"ne-code\"><span class=\"ne-text\">Array</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">RegExp</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Date</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Error</span></code><span class=\"ne-text\">......</span></li><li id=\"ue81205dc\"><span class=\"ne-text\">非标准特殊对象 </span><code class=\"ne-code\"><span class=\"ne-text\">Number</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Boolean</span></code></li><li id=\"u23b10648\"><span class=\"ne-text\">可调用/执行对象（函数） </span><code class=\"ne-code\"><span class=\"ne-text\">Function</span></code></li></ol><h2 id=\"qmgeO\"><span class=\"ne-text\">数据类型检测的方式（4种）</span></h2><ol class=\"ne-ol\"><li id=\"udb104f16\"><code class=\"ne-code\"><span class=\"ne-text\">typeof [value]</span></code><span class=\"ne-text\"> 返回值是字符串，字符串中包含所属的类型</span></li></ol><ol class=\"ne-list-wrap\"><ol ne-level=\"1\" class=\"ne-ol\"><li id=\"u19bbf010\"><span class=\"ne-text\">typeof检测对象类型，除函数被识别'function'，其余都是'object'（不能细分对象）</span></li><li id=\"ubf72a262\"><span class=\"ne-text\">基于typeof检测一个未被声明的变量，不会报错，结果是'undefined'</span></li><li id=\"uff0f5570\"><code class=\"ne-code\"><span class=\"ne-text\">typeof null -&gt; 'object'</span></code><span class=\"ne-text\"> typeof检测null结果是'object'的原因是：如果是以'000'开始的二进制，则被识别为对象(null存储的二进制都是0，符合以'000'开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回'function')，没实现就是对象(返回'object')</span></li></ol></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"u8ec45daf\"><code class=\"ne-code\"><span class=\"ne-text\">Object.prototype.toString.call([value])</span></code></li><li id=\"uf63a7de8\"><code class=\"ne-code\"><span class=\"ne-text\">[value] instanceof [constructor]</span></code></li><li id=\"ubf9090e5\"><code class=\"ne-code\"><span class=\"ne-text\">[value].constructor</span></code></li></ol><p id=\"u48026826\" class=\"ne-p\"><span class=\"ne-text\">其他检测固定类型的方法：</span><code class=\"ne-code\"><span class=\"ne-text\">Array.isArray([value])</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isNaN([value])</span></code><span class=\"ne-text\"> ......</span></p><p id=\"u2392be51\" class=\"ne-p\"><span class=\"ne-text\">检测是否为对象：</span><code class=\"ne-code\"><span class=\"ne-text\">val !== null &amp;&amp; /^(object|function)$/i.test(typeof val)</span></code></p><p id=\"u1ed88c76\" class=\"ne-p\"><span class=\"ne-text\">0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。</span></p><p id=\"ub517430a\" class=\"ne-p\"><span class=\"ne-text\">运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。</span></p><pre data-language=\"javascript\" id=\"kaEus\" class=\"ne-codeblock language-javascript\">const coefficent = function coefficent (num) {\n  num = String(num)\n  const [, char = ''] = num.split('.'),len = char.length\n  return Math.pow(10, len)\n}</pre><pre data-language=\"javascript\" id=\"W8mHh\" class=\"ne-codeblock language-javascript\">const plus = function plus (n, m) {\n  n = Number(n)\n  m = Number(m)\n  let coeffic = Math.max(coefficient(n), coefficent(m))\n  return (n * coeffic + m * coeffic) / coeffic\n}</pre><h2 id=\"Zafa8\"><span class=\"ne-text\">数据类型转换</span></h2><p id=\"udaba7da6\" class=\"ne-p\"><span class=\"ne-text\">一般将其他数据类型转换为</span><code class=\"ne-code\"><span class=\"ne-text\">Number</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Boolean</span></code></p><h4 id=\"fgZCl\"><span class=\"ne-text\">把其他类型值转换为</span><code class=\"ne-code\"><span class=\"ne-text\">Number</span></code></h4><ol class=\"ne-ol\"><li id=\"ubb1762b8\"><code class=\"ne-code\"><span class=\"ne-text\">Number([value])</span></code></li><li id=\"uca53aa38\"><code class=\"ne-code\"><span class=\"ne-text\">parseInt([val],[radix])</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">parseFloat([val])</span></code></li></ol><h4 id=\"KRyF1\"><span class=\"ne-text\">把其他类型值转换为</span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code></h4><ol class=\"ne-ol\"><li id=\"u6ee84ea3\"><code class=\"ne-code\"><span class=\"ne-text\">[value].toString()</span></code></li><li id=\"uca6e9f83\"><code class=\"ne-code\"><span class=\"ne-text\">String([value])</span></code></li></ol><h4 id=\"zUCit\"><span class=\"ne-text\">把其他类型值转换为</span><code class=\"ne-code\"><span class=\"ne-text\">Boolean</span></code></h4><p id=\"u0df02943\" class=\"ne-p\"><span class=\"ne-text\">转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true</span></p><p id=\"u1ee371ad\" class=\"ne-p\"><span class=\"ne-text\">出现情况：</span></p><ol class=\"ne-ol\"><li id=\"u453f047b\"><code class=\"ne-code\"><span class=\"ne-text\">Boolean([val])</span></code><span class=\"ne-text\">或者</span><code class=\"ne-code\"><span class=\"ne-text\">!/!!</span></code></li><li id=\"ubc5bb872\"><code class=\"ne-code\"><span class=\"ne-text\">条件判断</span></code></li></ol></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"fotpF\" id=\"fotpF\"><span data-lake-id=\"u4122c988\" id=\"u4122c988\">JS中的数据类型被分为两大类：</span></h2><h4 data-lake-id=\"m2xDG\" id=\"m2xDG\"><span data-lake-id=\"u52985f65\" id=\"u52985f65\">原始值类型（值类型/基本数据类型）</span></h4><ol list=\"u9c5d889f\"><li fid=\"u7bbf910d\" data-lake-id=\"ud64d1614\" id=\"ud64d1614\"><span data-lake-id=\"u05a4b836\" id=\"u05a4b836\">number 数字</span></li></ol><ol list=\"ua9cc920d\"><li fid=\"ub25703d1\" data-lake-id=\"u436cc15f\" id=\"u436cc15f\"><span data-lake-id=\"ub8bdbde7\" id=\"ub8bdbde7\">string 字符串</span></li><li fid=\"ub25703d1\" data-lake-id=\"u560a5635\" id=\"u560a5635\"><span data-lake-id=\"udf14900a\" id=\"udf14900a\">boolean 布尔</span></li><li fid=\"ub25703d1\" data-lake-id=\"u5be86b28\" id=\"u5be86b28\"><span data-lake-id=\"ue7e6e199\" id=\"ue7e6e199\">null 空对象指针</span></li><li fid=\"ub25703d1\" data-lake-id=\"ua9882944\" id=\"ua9882944\"><span data-lake-id=\"u2be7aa4a\" id=\"u2be7aa4a\">undefined 未定义</span></li><li fid=\"ub25703d1\" data-lake-id=\"ufbaa78b1\" id=\"ufbaa78b1\"><span data-lake-id=\"u1fec9191\" id=\"u1fec9191\">symbol 唯一值</span></li><li fid=\"ub25703d1\" data-lake-id=\"u7c96a776\" id=\"u7c96a776\"><span data-lake-id=\"u59e80c05\" id=\"u59e80c05\">bigint 大数</span></li></ol><h4 data-lake-id=\"JVHRn\" id=\"JVHRn\"><span data-lake-id=\"u2db057cd\" id=\"u2db057cd\">对象类型（引用数据类型）</span></h4><ol list=\"u2ae4bbdd\"><li fid=\"u8beecdc1\" data-lake-id=\"ua49e741f\" id=\"ua49e741f\"><span data-lake-id=\"u53db02dd\" id=\"u53db02dd\">标准普通对象 </span><code data-lake-id=\"uf76ab437\" id=\"uf76ab437\"><span data-lake-id=\"u37f87857\" id=\"u37f87857\">Object</span></code></li><li fid=\"u8beecdc1\" data-lake-id=\"u66272a45\" id=\"u66272a45\"><span data-lake-id=\"u247d3d74\" id=\"u247d3d74\">标准特殊对象 </span><code data-lake-id=\"ubbf0f4b6\" id=\"ubbf0f4b6\"><span data-lake-id=\"u084c2757\" id=\"u084c2757\">Array</span></code><span data-lake-id=\"u8cb31dc3\" id=\"u8cb31dc3\">、</span><code data-lake-id=\"uf5cd0076\" id=\"uf5cd0076\"><span data-lake-id=\"ub3c4fbf9\" id=\"ub3c4fbf9\">RegExp</span></code><span data-lake-id=\"u9003af24\" id=\"u9003af24\">、</span><code data-lake-id=\"ua2b102a7\" id=\"ua2b102a7\"><span data-lake-id=\"u928d98b0\" id=\"u928d98b0\">Date</span></code><span data-lake-id=\"u1e06016b\" id=\"u1e06016b\">、</span><code data-lake-id=\"u889a6a94\" id=\"u889a6a94\"><span data-lake-id=\"ude034835\" id=\"ude034835\">Math</span></code><span data-lake-id=\"uefc5f6bb\" id=\"uefc5f6bb\">、</span><code data-lake-id=\"u6bccc820\" id=\"u6bccc820\"><span data-lake-id=\"u0d0db0d4\" id=\"u0d0db0d4\">Error</span></code><span data-lake-id=\"u01670006\" id=\"u01670006\">......</span></li><li fid=\"u8beecdc1\" data-lake-id=\"ue81205dc\" id=\"ue81205dc\"><span data-lake-id=\"uda65388d\" id=\"uda65388d\">非标准特殊对象 </span><code data-lake-id=\"uf21babed\" id=\"uf21babed\"><span data-lake-id=\"u4eefdba3\" id=\"u4eefdba3\">Number</span></code><span data-lake-id=\"u364c43d7\" id=\"u364c43d7\">、</span><code data-lake-id=\"ufc644e79\" id=\"ufc644e79\"><span data-lake-id=\"u9df9e0ea\" id=\"u9df9e0ea\">String</span></code><span data-lake-id=\"u2fbbdae5\" id=\"u2fbbdae5\">、</span><code data-lake-id=\"u46cfa2b9\" id=\"u46cfa2b9\"><span data-lake-id=\"ue758942f\" id=\"ue758942f\">Boolean</span></code></li><li fid=\"u8beecdc1\" data-lake-id=\"u23b10648\" id=\"u23b10648\"><span data-lake-id=\"uef556b6d\" id=\"uef556b6d\">可调用/执行对象（函数） </span><code data-lake-id=\"u25ada1aa\" id=\"u25ada1aa\"><span data-lake-id=\"u9e7acd61\" id=\"u9e7acd61\">Function</span></code></li></ol><h2 data-lake-id=\"qmgeO\" id=\"qmgeO\"><span data-lake-id=\"u8656a789\" id=\"u8656a789\">数据类型检测的方式（4种）</span></h2><ol list=\"u02c2c368\"><li fid=\"ucb823597\" data-lake-id=\"udb104f16\" id=\"udb104f16\"><code data-lake-id=\"ub9073b95\" id=\"ub9073b95\"><span data-lake-id=\"u148e42da\" id=\"u148e42da\">typeof [value]</span></code><span data-lake-id=\"ub5ea39a2\" id=\"ub5ea39a2\"> 返回值是字符串，字符串中包含所属的类型</span></li></ol><ol list=\"u02c2c368\" data-lake-indent=\"1\"><li fid=\"ucb823597\" data-lake-id=\"u19bbf010\" id=\"u19bbf010\"><span data-lake-id=\"u3c032160\" id=\"u3c032160\">typeof检测对象类型，除函数被识别'function'，其余都是'object'（不能细分对象）</span></li><li fid=\"ucb823597\" data-lake-id=\"ubf72a262\" id=\"ubf72a262\"><span data-lake-id=\"u6590ee3d\" id=\"u6590ee3d\">基于typeof检测一个未被声明的变量，不会报错，结果是'undefined'</span></li><li fid=\"ucb823597\" data-lake-id=\"uff0f5570\" id=\"uff0f5570\"><code data-lake-id=\"ucc3e0567\" id=\"ucc3e0567\"><span data-lake-id=\"udf083fda\" id=\"udf083fda\">typeof null -&gt; 'object'</span></code><span data-lake-id=\"u02a0dc08\" id=\"u02a0dc08\"> typeof检测null结果是'object'的原因是：如果是以'000'开始的二进制，则被识别为对象(null存储的二进制都是0，符合以'000'开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回'function')，没实现就是对象(返回'object')</span></li></ol><ol list=\"u02c2c368\" start=\"2\"><li fid=\"ucb823597\" data-lake-id=\"u8ec45daf\" id=\"u8ec45daf\"><code data-lake-id=\"u420f83e7\" id=\"u420f83e7\"><span data-lake-id=\"uef53c931\" id=\"uef53c931\">Object.prototype.toString.call([value])</span></code></li><li fid=\"ucb823597\" data-lake-id=\"uf63a7de8\" id=\"uf63a7de8\"><code data-lake-id=\"u62c8beb1\" id=\"u62c8beb1\"><span data-lake-id=\"ua3ffde92\" id=\"ua3ffde92\">[value] instanceof [constructor]</span></code></li><li fid=\"ucb823597\" data-lake-id=\"ubf9090e5\" id=\"ubf9090e5\"><code data-lake-id=\"uce966c69\" id=\"uce966c69\"><span data-lake-id=\"uf17771bc\" id=\"uf17771bc\">[value].constructor</span></code></li></ol><p data-lake-id=\"u48026826\" id=\"u48026826\"><span data-lake-id=\"u3c44bab3\" id=\"u3c44bab3\">其他检测固定类型的方法：</span><code data-lake-id=\"uece0645b\" id=\"uece0645b\"><span data-lake-id=\"u12ae0fbe\" id=\"u12ae0fbe\">Array.isArray([value])</span></code><span data-lake-id=\"u3d16fbe1\" id=\"u3d16fbe1\">、</span><code data-lake-id=\"u90c64f55\" id=\"u90c64f55\"><span data-lake-id=\"u8a37c188\" id=\"u8a37c188\">isNaN([value])</span></code><span data-lake-id=\"u4090de96\" id=\"u4090de96\"> ......</span></p><p data-lake-id=\"u2392be51\" id=\"u2392be51\"><span data-lake-id=\"u0d845121\" id=\"u0d845121\">检测是否为对象：</span><code data-lake-id=\"u9bf7eb02\" id=\"u9bf7eb02\"><span data-lake-id=\"ue17461cd\" id=\"ue17461cd\">val !== null &amp;&amp; /^(object|function)$/i.test(typeof val)</span></code></p><p data-lake-id=\"u1ed88c76\" id=\"u1ed88c76\"><span data-lake-id=\"u0c05ef6f\" id=\"u0c05ef6f\">0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。</span></p><p data-lake-id=\"ub517430a\" id=\"ub517430a\"><span data-lake-id=\"u492065e5\" id=\"u492065e5\">运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20coefficent%20%3D%20function%20coefficent%20(num)%20%7B%5Cn%20%20num%20%3D%20String(num)%5Cn%20%20const%20%5B%2C%20char%20%3D%20''%5D%20%3D%20num.split('.')%2Clen%20%3D%20char.length%5Cn%20%20return%20Math.pow(10%2C%20len)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E8%8E%B7%E5%8F%96%E7%B3%BB%E6%95%B0%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kaEus%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20plus%20%3D%20function%20plus%20(n%2C%20m)%20%7B%5Cn%20%20n%20%3D%20Number(n)%5Cn%20%20m%20%3D%20Number(m)%5Cn%20%20let%20coeffic%20%3D%20Math.max(coefficient(n)%2C%20coefficent(m))%5Cn%20%20return%20(n%20*%20coeffic%20%2B%20m%20*%20coeffic)%20%2F%20coeffic%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E4%BF%9D%E8%AF%81%E7%B2%BE%E5%BA%A6%E7%9A%84%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22W8mHh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"Zafa8\" id=\"Zafa8\"><span data-lake-id=\"ufc30c016\" id=\"ufc30c016\">数据类型转换</span></h2><p data-lake-id=\"udaba7da6\" id=\"udaba7da6\"><span data-lake-id=\"u89e4fa23\" id=\"u89e4fa23\">一般将其他数据类型转换为</span><code data-lake-id=\"u7560f0f2\" id=\"u7560f0f2\"><span data-lake-id=\"u10168ccc\" id=\"u10168ccc\">Number</span></code><span data-lake-id=\"uc958e178\" id=\"uc958e178\">、</span><code data-lake-id=\"u4904990f\" id=\"u4904990f\"><span data-lake-id=\"uc3f291d6\" id=\"uc3f291d6\">String</span></code><span data-lake-id=\"u24924e68\" id=\"u24924e68\">、</span><code data-lake-id=\"uc0c37e8e\" id=\"uc0c37e8e\"><span data-lake-id=\"ueb14da08\" id=\"ueb14da08\">Boolean</span></code></p><h4 data-lake-id=\"fgZCl\" id=\"fgZCl\"><span data-lake-id=\"u56160e1a\" id=\"u56160e1a\">把其他类型值转换为</span><code data-lake-id=\"uf2047865\" id=\"uf2047865\"><span data-lake-id=\"u5ac56eed\" id=\"u5ac56eed\">Number</span></code></h4><ol list=\"u49b70648\"><li fid=\"ud95091a2\" data-lake-id=\"ubb1762b8\" id=\"ubb1762b8\"><code data-lake-id=\"ud02c67cf\" id=\"ud02c67cf\"><span data-lake-id=\"ue7264bee\" id=\"ue7264bee\">Number([value])</span></code></li><li fid=\"ud95091a2\" data-lake-id=\"uca53aa38\" id=\"uca53aa38\"><code data-lake-id=\"uc6034b53\" id=\"uc6034b53\"><span data-lake-id=\"u5b9a9b49\" id=\"u5b9a9b49\">parseInt([val],[radix])</span></code><span data-lake-id=\"ucaead543\" id=\"ucaead543\">、</span><code data-lake-id=\"u9b3241d6\" id=\"u9b3241d6\"><span data-lake-id=\"uac0b5886\" id=\"uac0b5886\">parseFloat([val])</span></code></li></ol><h4 data-lake-id=\"KRyF1\" id=\"KRyF1\"><span data-lake-id=\"u60e242ff\" id=\"u60e242ff\">把其他类型值转换为</span><code data-lake-id=\"u90f23f1a\" id=\"u90f23f1a\"><span data-lake-id=\"u4354628a\" id=\"u4354628a\">String</span></code></h4><ol list=\"ub3071d10\"><li fid=\"uc3f77074\" data-lake-id=\"u6ee84ea3\" id=\"u6ee84ea3\"><code data-lake-id=\"ua6593759\" id=\"ua6593759\"><span data-lake-id=\"u54bd2c23\" id=\"u54bd2c23\">[value].toString()</span></code></li><li fid=\"uc3f77074\" data-lake-id=\"uca6e9f83\" id=\"uca6e9f83\"><code data-lake-id=\"uce21e48b\" id=\"uce21e48b\"><span data-lake-id=\"ue04652c9\" id=\"ue04652c9\">String([value])</span></code></li></ol><h4 data-lake-id=\"zUCit\" id=\"zUCit\"><span data-lake-id=\"u92068742\" id=\"u92068742\">把其他类型值转换为</span><code data-lake-id=\"u3ee8fcad\" id=\"u3ee8fcad\"><span data-lake-id=\"ua6fa4048\" id=\"ua6fa4048\">Boolean</span></code></h4><p data-lake-id=\"u0df02943\" id=\"u0df02943\"><span data-lake-id=\"ud90f4a6d\" id=\"ud90f4a6d\">转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true</span></p><p data-lake-id=\"u1ee371ad\" id=\"u1ee371ad\"><span data-lake-id=\"ua3930032\" id=\"ua3930032\">出现情况：</span></p><ol list=\"u7be4bd72\"><li fid=\"u8c157da3\" data-lake-id=\"u453f047b\" id=\"u453f047b\"><code data-lake-id=\"u8af5ecb4\" id=\"u8af5ecb4\"><span data-lake-id=\"u6e3cade7\" id=\"u6e3cade7\">Boolean([val])</span></code><span data-lake-id=\"u5ed54f9b\" id=\"u5ed54f9b\">或者</span><code data-lake-id=\"uff9715c5\" id=\"uff9715c5\"><span data-lake-id=\"ub430322b\" id=\"ub430322b\">!/!!</span></code></li><li fid=\"u8c157da3\" data-lake-id=\"ubc5bb872\" id=\"ubc5bb872\"><code data-lake-id=\"u804403f3\" id=\"u804403f3\"><span data-lake-id=\"u87df5da7\" id=\"u87df5da7\">条件判断</span></code></li></ol>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"fotpF\" id=\"fotpF\"><span data-lake-id=\"u4122c988\" id=\"u4122c988\">JS中的数据类型被分为两大类：</span></h2><h4 data-lake-id=\"m2xDG\" id=\"m2xDG\"><span data-lake-id=\"u52985f65\" id=\"u52985f65\">原始值类型（值类型/基本数据类型）</span></h4><ol list=\"u9c5d889f\"><li fid=\"u7bbf910d\" data-lake-id=\"ud64d1614\" id=\"ud64d1614\"><span data-lake-id=\"u05a4b836\" id=\"u05a4b836\">number 数字</span></li></ol><ol list=\"ua9cc920d\"><li fid=\"ub25703d1\" data-lake-id=\"u436cc15f\" id=\"u436cc15f\"><span data-lake-id=\"ub8bdbde7\" id=\"ub8bdbde7\">string 字符串</span></li><li fid=\"ub25703d1\" data-lake-id=\"u560a5635\" id=\"u560a5635\"><span data-lake-id=\"udf14900a\" id=\"udf14900a\">boolean 布尔</span></li><li fid=\"ub25703d1\" data-lake-id=\"u5be86b28\" id=\"u5be86b28\"><span data-lake-id=\"ue7e6e199\" id=\"ue7e6e199\">null 空对象指针</span></li><li fid=\"ub25703d1\" data-lake-id=\"ua9882944\" id=\"ua9882944\"><span data-lake-id=\"u2be7aa4a\" id=\"u2be7aa4a\">undefined 未定义</span></li><li fid=\"ub25703d1\" data-lake-id=\"ufbaa78b1\" id=\"ufbaa78b1\"><span data-lake-id=\"u1fec9191\" id=\"u1fec9191\">symbol 唯一值</span></li><li fid=\"ub25703d1\" data-lake-id=\"u7c96a776\" id=\"u7c96a776\"><span data-lake-id=\"u59e80c05\" id=\"u59e80c05\">bigint 大数</span></li></ol><h4 data-lake-id=\"JVHRn\" id=\"JVHRn\"><span data-lake-id=\"u2db057cd\" id=\"u2db057cd\">对象类型（引用数据类型）</span></h4><ol list=\"u2ae4bbdd\"><li fid=\"u8beecdc1\" data-lake-id=\"ua49e741f\" id=\"ua49e741f\"><span data-lake-id=\"u53db02dd\" id=\"u53db02dd\">标准普通对象 </span><code data-lake-id=\"uf76ab437\" id=\"uf76ab437\"><span data-lake-id=\"u37f87857\" id=\"u37f87857\">Object</span></code></li><li fid=\"u8beecdc1\" data-lake-id=\"u66272a45\" id=\"u66272a45\"><span data-lake-id=\"u247d3d74\" id=\"u247d3d74\">标准特殊对象 </span><code data-lake-id=\"ubbf0f4b6\" id=\"ubbf0f4b6\"><span data-lake-id=\"u084c2757\" id=\"u084c2757\">Array</span></code><span data-lake-id=\"u8cb31dc3\" id=\"u8cb31dc3\">、</span><code data-lake-id=\"uf5cd0076\" id=\"uf5cd0076\"><span data-lake-id=\"ub3c4fbf9\" id=\"ub3c4fbf9\">RegExp</span></code><span data-lake-id=\"u9003af24\" id=\"u9003af24\">、</span><code data-lake-id=\"ua2b102a7\" id=\"ua2b102a7\"><span data-lake-id=\"u928d98b0\" id=\"u928d98b0\">Date</span></code><span data-lake-id=\"u1e06016b\" id=\"u1e06016b\">、</span><code data-lake-id=\"u889a6a94\" id=\"u889a6a94\"><span data-lake-id=\"ude034835\" id=\"ude034835\">Math</span></code><span data-lake-id=\"uefc5f6bb\" id=\"uefc5f6bb\">、</span><code data-lake-id=\"u6bccc820\" id=\"u6bccc820\"><span data-lake-id=\"u0d0db0d4\" id=\"u0d0db0d4\">Error</span></code><span data-lake-id=\"u01670006\" id=\"u01670006\">......</span></li><li fid=\"u8beecdc1\" data-lake-id=\"ue81205dc\" id=\"ue81205dc\"><span data-lake-id=\"uda65388d\" id=\"uda65388d\">非标准特殊对象 </span><code data-lake-id=\"uf21babed\" id=\"uf21babed\"><span data-lake-id=\"u4eefdba3\" id=\"u4eefdba3\">Number</span></code><span data-lake-id=\"u364c43d7\" id=\"u364c43d7\">、</span><code data-lake-id=\"ufc644e79\" id=\"ufc644e79\"><span data-lake-id=\"u9df9e0ea\" id=\"u9df9e0ea\">String</span></code><span data-lake-id=\"u2fbbdae5\" id=\"u2fbbdae5\">、</span><code data-lake-id=\"u46cfa2b9\" id=\"u46cfa2b9\"><span data-lake-id=\"ue758942f\" id=\"ue758942f\">Boolean</span></code></li><li fid=\"u8beecdc1\" data-lake-id=\"u23b10648\" id=\"u23b10648\"><span data-lake-id=\"uef556b6d\" id=\"uef556b6d\">可调用/执行对象（函数） </span><code data-lake-id=\"u25ada1aa\" id=\"u25ada1aa\"><span data-lake-id=\"u9e7acd61\" id=\"u9e7acd61\">Function</span></code></li></ol><h2 data-lake-id=\"qmgeO\" id=\"qmgeO\"><span data-lake-id=\"u8656a789\" id=\"u8656a789\">数据类型检测的方式（4种）</span></h2><ol list=\"u02c2c368\"><li fid=\"ucb823597\" data-lake-id=\"udb104f16\" id=\"udb104f16\"><code data-lake-id=\"ub9073b95\" id=\"ub9073b95\"><span data-lake-id=\"u148e42da\" id=\"u148e42da\">typeof [value]</span></code><span data-lake-id=\"ub5ea39a2\" id=\"ub5ea39a2\"> 返回值是字符串，字符串中包含所属的类型</span></li></ol><ol list=\"u02c2c368\" data-lake-indent=\"1\"><li fid=\"ucb823597\" data-lake-id=\"u19bbf010\" id=\"u19bbf010\"><span data-lake-id=\"u3c032160\" id=\"u3c032160\">typeof检测对象类型，除函数被识别</span><code data-lake-id=\"uf04a4800\" id=\"uf04a4800\"><span data-lake-id=\"u7bfeda04\" id=\"u7bfeda04\">'function'</span></code><span data-lake-id=\"u4386412a\" id=\"u4386412a\">，其余都是</span><code data-lake-id=\"u77c32322\" id=\"u77c32322\"><span data-lake-id=\"u7cd16b8f\" id=\"u7cd16b8f\">'object'</span></code><span data-lake-id=\"u11a6e81a\" id=\"u11a6e81a\">（不能细分对象）</span></li><li fid=\"ucb823597\" data-lake-id=\"ubf72a262\" id=\"ubf72a262\"><span data-lake-id=\"u6590ee3d\" id=\"u6590ee3d\">基于typeof检测一个未被声明的变量，不会报错，结果是</span><code data-lake-id=\"u4a3490c1\" id=\"u4a3490c1\"><span data-lake-id=\"u3b1bdd0a\" id=\"u3b1bdd0a\">'undefined'</span></code></li><li fid=\"ucb823597\" data-lake-id=\"uff0f5570\" id=\"uff0f5570\"><code data-lake-id=\"ucc3e0567\" id=\"ucc3e0567\"><span data-lake-id=\"udf083fda\" id=\"udf083fda\">typeof null -&gt; 'object'</span></code><span data-lake-id=\"u02a0dc08\" id=\"u02a0dc08\"> typeof检测null结果是</span><code data-lake-id=\"u562256c0\" id=\"u562256c0\"><span data-lake-id=\"ufaf9661d\" id=\"ufaf9661d\">'object'</span></code><span data-lake-id=\"u5ba9f671\" id=\"u5ba9f671\">的原因是：如果是以'000'开始的二进制，则被识别为对象(null存储的二进制都是0，符合以'000'开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回</span><code data-lake-id=\"u4e2342fc\" id=\"u4e2342fc\"><span data-lake-id=\"uc7498cc5\" id=\"uc7498cc5\">'function'</span></code><span data-lake-id=\"ue76a0793\" id=\"ue76a0793\">)，没实现就是对象(返回</span><code data-lake-id=\"uba89c11d\" id=\"uba89c11d\"><span data-lake-id=\"u6f5c394f\" id=\"u6f5c394f\">'object'</span></code><span data-lake-id=\"ua6545681\" id=\"ua6545681\">)</span></li></ol><ol list=\"u02c2c368\" start=\"2\"><li fid=\"ucb823597\" data-lake-id=\"u8ec45daf\" id=\"u8ec45daf\"><code data-lake-id=\"u420f83e7\" id=\"u420f83e7\"><span data-lake-id=\"uef53c931\" id=\"uef53c931\">Object.prototype.toString.call([value])</span></code></li><li fid=\"ucb823597\" data-lake-id=\"uf63a7de8\" id=\"uf63a7de8\"><code data-lake-id=\"u62c8beb1\" id=\"u62c8beb1\"><span data-lake-id=\"ua3ffde92\" id=\"ua3ffde92\">[value] instanceof [constructor]</span></code></li><li fid=\"ucb823597\" data-lake-id=\"ubf9090e5\" id=\"ubf9090e5\"><code data-lake-id=\"uce966c69\" id=\"uce966c69\"><span data-lake-id=\"uf17771bc\" id=\"uf17771bc\">[value].constructor</span></code></li></ol><p data-lake-id=\"u48026826\" id=\"u48026826\"><span data-lake-id=\"u3c44bab3\" id=\"u3c44bab3\">其他检测固定类型的方法：</span><code data-lake-id=\"uece0645b\" id=\"uece0645b\"><span data-lake-id=\"u12ae0fbe\" id=\"u12ae0fbe\">Array.isArray([value])</span></code><span data-lake-id=\"u3d16fbe1\" id=\"u3d16fbe1\">、</span><code data-lake-id=\"u90c64f55\" id=\"u90c64f55\"><span data-lake-id=\"u8a37c188\" id=\"u8a37c188\">isNaN([value])</span></code><span data-lake-id=\"u4090de96\" id=\"u4090de96\"> ......</span></p><p data-lake-id=\"u2392be51\" id=\"u2392be51\"><span data-lake-id=\"u0d845121\" id=\"u0d845121\">检测是否为对象：</span><code data-lake-id=\"u9bf7eb02\" id=\"u9bf7eb02\"><span data-lake-id=\"ue17461cd\" id=\"ue17461cd\">val !== null &amp;&amp; /^(object|function)$/i.test(typeof val)</span></code></p><p data-lake-id=\"u1ed88c76\" id=\"u1ed88c76\"><span data-lake-id=\"u0c05ef6f\" id=\"u0c05ef6f\">0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。</span></p><p data-lake-id=\"ub517430a\" id=\"ub517430a\"><span data-lake-id=\"u492065e5\" id=\"u492065e5\">运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20coefficent%20%3D%20function%20coefficent%20(num)%20%7B%5Cn%20%20num%20%3D%20String(num)%5Cn%20%20const%20%5B%2C%20char%20%3D%20''%5D%20%3D%20num.split('.')%2Clen%20%3D%20char.length%5Cn%20%20return%20Math.pow(10%2C%20len)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E8%8E%B7%E5%8F%96%E7%B3%BB%E6%95%B0%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kaEus%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20plus%20%3D%20function%20plus%20(n%2C%20m)%20%7B%5Cn%20%20n%20%3D%20Number(n)%5Cn%20%20m%20%3D%20Number(m)%5Cn%20%20let%20coeffic%20%3D%20Math.max(coefficient(n)%2C%20coefficent(m))%5Cn%20%20return%20(n%20*%20coeffic%20%2B%20m%20*%20coeffic)%20%2F%20coeffic%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E4%BF%9D%E8%AF%81%E7%B2%BE%E5%BA%A6%E7%9A%84%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22W8mHh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"Zafa8\" id=\"Zafa8\"><span data-lake-id=\"ufc30c016\" id=\"ufc30c016\">数据类型转换</span></h2><p data-lake-id=\"udaba7da6\" id=\"udaba7da6\"><span data-lake-id=\"u89e4fa23\" id=\"u89e4fa23\">一般将其他数据类型转换为</span><code data-lake-id=\"u7560f0f2\" id=\"u7560f0f2\"><span data-lake-id=\"u10168ccc\" id=\"u10168ccc\">Number</span></code><span data-lake-id=\"uc958e178\" id=\"uc958e178\">、</span><code data-lake-id=\"u4904990f\" id=\"u4904990f\"><span data-lake-id=\"uc3f291d6\" id=\"uc3f291d6\">String</span></code><span data-lake-id=\"u24924e68\" id=\"u24924e68\">、</span><code data-lake-id=\"uc0c37e8e\" id=\"uc0c37e8e\"><span data-lake-id=\"ueb14da08\" id=\"ueb14da08\">Boolean</span></code></p><h4 data-lake-id=\"fgZCl\" id=\"fgZCl\"><span data-lake-id=\"u56160e1a\" id=\"u56160e1a\">把其他类型值转换为</span><code data-lake-id=\"uf2047865\" id=\"uf2047865\"><span data-lake-id=\"u5ac56eed\" id=\"u5ac56eed\">Number</span></code></h4><ol list=\"u49b70648\"><li fid=\"ud95091a2\" data-lake-id=\"ubb1762b8\" id=\"ubb1762b8\"><code data-lake-id=\"ud02c67cf\" id=\"ud02c67cf\"><span data-lake-id=\"ue7264bee\" id=\"ue7264bee\">Number([value])</span></code></li><li fid=\"ud95091a2\" data-lake-id=\"uca53aa38\" id=\"uca53aa38\"><code data-lake-id=\"uc6034b53\" id=\"uc6034b53\"><span data-lake-id=\"u5b9a9b49\" id=\"u5b9a9b49\">parseInt([val],[radix])</span></code><span data-lake-id=\"ucaead543\" id=\"ucaead543\">、</span><code data-lake-id=\"u9b3241d6\" id=\"u9b3241d6\"><span data-lake-id=\"uac0b5886\" id=\"uac0b5886\">parseFloat([val])</span></code></li></ol><h4 data-lake-id=\"KRyF1\" id=\"KRyF1\"><span data-lake-id=\"u60e242ff\" id=\"u60e242ff\">把其他类型值转换为</span><code data-lake-id=\"u90f23f1a\" id=\"u90f23f1a\"><span data-lake-id=\"u4354628a\" id=\"u4354628a\">String</span></code></h4><ol list=\"ub3071d10\"><li fid=\"uc3f77074\" data-lake-id=\"u6ee84ea3\" id=\"u6ee84ea3\"><code data-lake-id=\"ua6593759\" id=\"ua6593759\"><span data-lake-id=\"u54bd2c23\" id=\"u54bd2c23\">[value].toString()</span></code></li><li fid=\"uc3f77074\" data-lake-id=\"uca6e9f83\" id=\"uca6e9f83\"><code data-lake-id=\"uce21e48b\" id=\"uce21e48b\"><span data-lake-id=\"ue04652c9\" id=\"ue04652c9\">String([value])</span></code></li></ol><h4 data-lake-id=\"zUCit\" id=\"zUCit\"><span data-lake-id=\"u92068742\" id=\"u92068742\">把其他类型值转换为</span><code data-lake-id=\"u3ee8fcad\" id=\"u3ee8fcad\"><span data-lake-id=\"ua6fa4048\" id=\"ua6fa4048\">Boolean</span></code></h4><p data-lake-id=\"u0df02943\" id=\"u0df02943\"><span data-lake-id=\"ud90f4a6d\" id=\"ud90f4a6d\">转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true</span></p><p data-lake-id=\"u1ee371ad\" id=\"u1ee371ad\"><span data-lake-id=\"ua3930032\" id=\"ua3930032\">出现情况：</span></p><ol list=\"u7be4bd72\"><li fid=\"u8c157da3\" data-lake-id=\"u453f047b\" id=\"u453f047b\"><code data-lake-id=\"u8af5ecb4\" id=\"u8af5ecb4\"><span data-lake-id=\"u6e3cade7\" id=\"u6e3cade7\">Boolean([val])</span></code><span data-lake-id=\"u5ed54f9b\" id=\"u5ed54f9b\">或者</span><code data-lake-id=\"uff9715c5\" id=\"uff9715c5\"><span data-lake-id=\"ub430322b\" id=\"ub430322b\">!/!!</span></code></li><li fid=\"u8c157da3\" data-lake-id=\"ubc5bb872\" id=\"ubc5bb872\"><code data-lake-id=\"u804403f3\" id=\"u804403f3\"><span data-lake-id=\"u87df5da7\" id=\"u87df5da7\">条件判断</span></code></li></ol>",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-03-25T07:41:28.000Z",
    "deleted_at": null,
    "created_at": "2022-03-10T01:44:19.000Z",
    "updated_at": "2022-03-25T07:41:28.000Z",
    "published_at": "2022-03-10T03:02:21.000Z",
    "first_published_at": "2022-03-10T02:24:17.000Z",
    "word_count": 581,
    "cover": null,
    "description": "JS中的数据类型被分为两大类：原始值类型（值类型/基本数据类型）number 数字string 字符串boolean 布尔null 空对象指针undefined 未定义symbol 唯一值bigint 大数对象类型（引用数据类型）标准普通对象 Object标准特殊对象 Array、RegExp...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 49735396,
    "slug": "etfpwu",
    "title": "网络通信原理",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。\n\n<a name=\"m1IhM\"></a>\n## 主机通信的必要条件\n\n1. 主机之间需要有传输介质<br />例如网线、光纤、蓝牙、Wifi等。\n1. 主机上必须要有网卡设备<br />主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别，因为在计算机的世界中，一切都是以二机制的形式存在。A主机将封装好的二进制数据，通过网卡转换为电信号（调制），再通过传输介质发送给B主机；B主机接收到信号后，通过网卡将电信号转换为二进制（解调），再由B主机自己的通信体系对数据进行拆包、解包，最终在我们的应用程序里获取到A主机发送过来的数据。\n1. 主机之间需要协商网络速率<br />A、B主机由于网卡的网络速率不同，所以在通信之间需要协商网络速率，让他们保持一致。\n\n<a name=\"bHtyf\"></a>\n## 网络通讯方式\n\n1. 交换机通信\n1. 路由器通信\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png#clientId=u06388d18-a111-4&from=paste&height=1366&id=u0e464cc1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2732&originWidth=2048&originalType=binary&ratio=1&size=369092&status=done&style=stroke&taskId=ufcd07110-e9be-4895-b5e3-fba7584ccf8&width=1024)\n\n<a name=\"bZKD7\"></a>\n## 网络层次模型\n\n为了兼容不同厂商生产的不同品牌的设备，需要一个组织对它们制定一个模型，这个模型就是七层网络模型OSI。<br />这个模型分别有物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。\n\n1. 物理层：各种物理设备和标准\n1. 数据链路层：确定目标主机\n1. 网络层：确定目标网络\n1. 传输层：控制数据传输可靠性\n1. 会话层：控制网络连接建立与终止\n1. 表示层：数据加密、转换、压缩\n1. 应用层：用户与网络的接口\n\n数据从A主机发送到B主机时，先根据层次从高到低的进行封装，到了B主机后，会根据层次从低到高一层一层的解包数据，最后在应用层中拿到A主机发送过来的原始数据。<br />tcp/ip模型：\n\n1. 物理层\n1. 数据链路层\n1. 网络层\n1. 传输层\n1. 应用层\n\n<a name=\"e87bcb2d\"></a>\n## 数据封装与解封装\n\n\n",
    "body_draft": "网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。\n\n<a name=\"m1IhM\"></a>\n## 主机通信的必要条件\n\n1. 主机之间需要有传输介质<br />例如网线、光纤、蓝牙、Wifi等。\n1. 主机上必须要有网卡设备<br />主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别，因为在计算机的世界中，一切都是以二机制的形式存在。A主机将封装好的二进制数据，通过网卡转换为电信号（调制），再通过传输介质发送给B主机；B主机接收到信号后，通过网卡将电信号转换为二进制（解调），再由B主机自己的通信体系对数据进行拆包、解包，最终在我们的应用程序里获取到A主机发送过来的数据。\n1. 主机之间需要协商网络速率<br />A、B主机由于网卡的网络速率不同，所以在通信之间需要协商网络速率，让他们保持一致。\n\n<a name=\"bHtyf\"></a>\n## 网络通讯方式\n\n1. 交换机通信\n1. 路由器通信\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/1429353/1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png#clientId=u06388d18-a111-4&from=paste&height=1366&id=u0e464cc1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2732&originWidth=2048&originalType=binary&ratio=1&size=369092&status=done&style=stroke&taskId=ufcd07110-e9be-4895-b5e3-fba7584ccf8&width=1024)\n\n<a name=\"bZKD7\"></a>\n## 网络层次模型\n\n为了兼容不同厂商生产的不同品牌的设备，需要一个组织对它们制定一个模型，这个模型就是七层网络模型OSI。<br />这个模型分别有物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。\n\n1. 物理层：各种物理设备和标准\n1. 数据链路层：确定目标主机\n1. 网络层：确定目标网络\n1. 传输层：控制数据传输可靠性\n1. 会话层：控制网络连接建立与终止\n1. 表示层：数据加密、转换、压缩\n1. 应用层：用户与网络的接口\n\n数据从A主机发送到B主机时，先根据层次从高到低的进行封装，到了B主机后，会根据层次从低到高一层一层的解包数据，最后在应用层中拿到A主机发送过来的原始数据。<br />tcp/ip模型：\n\n1. 物理层\n1. 数据链路层\n1. 网络层\n1. 传输层\n1. 应用层\n\n<a name=\"e87bcb2d\"></a>\n## 数据封装与解封装\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"udd13f653\" class=\"ne-p\"><span class=\"ne-text\">网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。</span></p><p id=\"uf52a0dd3\" class=\"ne-p\"><br></p><h2 id=\"m1IhM\"><span class=\"ne-text\">主机通信的必要条件</span></h2><p id=\"uee5b09b1\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"udaecf33b\"><span class=\"ne-text\">主机之间需要有传输介质<br /></span><span class=\"ne-text\">例如网线、光纤、蓝牙、Wifi等。</span></li><li id=\"uf3f94ea4\"><span class=\"ne-text\">主机上必须要有网卡设备<br /></span><span class=\"ne-text\">主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别，因为在计算机的世界中，一切都是以二机制的形式存在。A主机将封装好的二进制数据，通过网卡转换为电信号（调制），再通过传输介质发送给B主机；B主机接收到信号后，通过网卡将电信号转换为二进制（解调），再由B主机自己的通信体系对数据进行拆包、解包，最终在我们的应用程序里获取到A主机发送过来的数据。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"uf45d994d\"><span class=\"ne-text\">主机之间需要协商网络速率<br /></span><span class=\"ne-text\">A、B主机由于网卡的网络速率不同，所以在通信之间需要协商网络速率，让他们保持一致。</span></li></ol><p id=\"u3e4c8a38\" class=\"ne-p\"><br></p><h2 id=\"bHtyf\"><span class=\"ne-text\">网络通讯方式</span></h2><p id=\"uf341d924\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u90d29979\"><span class=\"ne-text\">交换机通信</span></li><li id=\"u1e8f62ce\"><span class=\"ne-text\">路由器通信</span></li></ol><p id=\"uf62456bb\" class=\"ne-p\"><br></p><p id=\"ueaced6a5\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1429353/1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png\" width=\"1024\" id=\"u0e464cc1\" class=\"ne-image\"></p><p id=\"uaaf4198b\" class=\"ne-p\"><br></p><h2 id=\"bZKD7\"><span class=\"ne-text\">网络层次模型</span></h2><p id=\"u739dee10\" class=\"ne-p\"><br></p><p id=\"u7185974a\" class=\"ne-p\"><span class=\"ne-text\">为了兼容不同厂商生产的不同品牌的设备，需要一个组织对它们制定一个模型，这个模型就是七层网络模型OSI。<br /></span><span class=\"ne-text\">这个模型分别有物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</span></p><p id=\"uac9b31f0\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u6d75afb3\"><span class=\"ne-text\">物理层：各种物理设备和标准</span></li><li id=\"u335bedbd\"><span class=\"ne-text\">数据链路层：确定目标主机</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u165dfbc7\"><span class=\"ne-text\">网络层：确定目标网络</span></li><li id=\"u69f79061\"><span class=\"ne-text\">传输层：控制数据传输可靠性</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u50dfa81c\"><span class=\"ne-text\">会话层：控制网络连接建立与终止</span></li><li id=\"uf5baf05e\"><span class=\"ne-text\">表示层：数据加密、转换、压缩</span></li></ol><ol start=\"7\" class=\"ne-ol\"><li id=\"u86e3afc7\"><span class=\"ne-text\">应用层：用户与网络的接口</span></li></ol><p id=\"u2de4f97d\" class=\"ne-p\"><br></p><p id=\"u21b7e796\" class=\"ne-p\"><span class=\"ne-text\">数据从A主机发送到B主机时，先根据层次从高到低的进行封装，到了B主机后，会根据层次从低到高一层一层的解包数据，最后在应用层中拿到A主机发送过来的原始数据。<br /></span><span class=\"ne-text\">tcp/ip模型：</span></p><p id=\"u80cf8336\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"uc8a3a68f\"><span class=\"ne-text\">物理层</span></li><li id=\"uac8611f2\"><span class=\"ne-text\">数据链路层</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u0eb19738\"><span class=\"ne-text\">网络层</span></li><li id=\"udb714b3b\"><span class=\"ne-text\">传输层</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"ued8ac0c2\"><span class=\"ne-text\">应用层</span></li></ol><p id=\"ub35ea7e5\" class=\"ne-p\"><br></p><h2 id=\"e87bcb2d\"><span class=\"ne-text\">数据封装与解封装</span></h2><p id=\"udeaa4bd8\" class=\"ne-p\"><br></p><p id=\"u0fe530ea\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"udd13f653\" id=\"udd13f653\"><span data-lake-id=\"u54a992f9\" id=\"u54a992f9\">网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。</span></p><p data-lake-id=\"uf52a0dd3\" id=\"uf52a0dd3\"><br></p><h2 data-lake-id=\"m1IhM\" id=\"m1IhM\"><span data-lake-id=\"u8acb3139\" id=\"u8acb3139\">主机通信的必要条件</span></h2><p data-lake-id=\"uee5b09b1\" id=\"uee5b09b1\"><br></p><ol list=\"ua4de6d50\"><li fid=\"u2c5acd78\" data-lake-id=\"udaecf33b\" id=\"udaecf33b\"><span data-lake-id=\"u0f8505b3\" id=\"u0f8505b3\">主机之间需要有传输介质<br /></span><span data-lake-id=\"uab737906\" id=\"uab737906\">例如网线、光纤、蓝牙、Wifi等。</span></li><li fid=\"u2c5acd78\" data-lake-id=\"uf3f94ea4\" id=\"uf3f94ea4\"><span data-lake-id=\"ue5de647a\" id=\"ue5de647a\">主机上必须要有网卡设备<br /></span><span data-lake-id=\"u839dd48a\" id=\"u839dd48a\">主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别，因为在计算机的世界中，一切都是以二机制的形式存在。A主机将封装好的二进制数据，通过网卡转换为电信号（调制），再通过传输介质发送给B主机；B主机接收到信号后，通过网卡将电信号转换为二进制（解调），再由B主机自己的通信体系对数据进行拆包、解包，最终在我们的应用程序里获取到A主机发送过来的数据。</span></li><li fid=\"u2c5acd78\" data-lake-id=\"uf45d994d\" id=\"uf45d994d\"><span data-lake-id=\"u9077435d\" id=\"u9077435d\">主机之间需要协商网络速率<br /></span><span data-lake-id=\"u5275c8ad\" id=\"u5275c8ad\">A、B主机由于网卡的网络速率不同，所以在通信之间需要协商网络速率，让他们保持一致。</span></li></ol><p data-lake-id=\"u3e4c8a38\" id=\"u3e4c8a38\"><br></p><h2 data-lake-id=\"bHtyf\" id=\"bHtyf\"><span data-lake-id=\"udc005ad1\" id=\"udc005ad1\">网络通讯方式</span></h2><p data-lake-id=\"uf341d924\" id=\"uf341d924\"><br></p><ol list=\"u1e9536af\"><li fid=\"u2d450ce8\" data-lake-id=\"u90d29979\" id=\"u90d29979\"><span data-lake-id=\"ua3844a1a\" id=\"ua3844a1a\">交换机通信</span></li><li fid=\"u2d450ce8\" data-lake-id=\"u1e8f62ce\" id=\"u1e8f62ce\"><span data-lake-id=\"ud40819f9\" id=\"ud40819f9\">路由器通信</span></li></ol><p data-lake-id=\"uf62456bb\" id=\"uf62456bb\"><br></p><p data-lake-id=\"ueaced6a5\" id=\"ueaced6a5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png%22%2C%22taskId%22%3A%22ufcd07110-e9be-4895-b5e3-fba7584ccf8%22%2C%22clientId%22%3A%22u06388d18-a111-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1024%2C%22height%22%3A1366%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A369092%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2048%2C%22originHeight%22%3A2732%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22id%22%3A%22u0e464cc1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uaaf4198b\" id=\"uaaf4198b\"><br></p><h2 data-lake-id=\"bZKD7\" id=\"bZKD7\"><span data-lake-id=\"ud4f702f3\" id=\"ud4f702f3\">网络层次模型</span></h2><p data-lake-id=\"u739dee10\" id=\"u739dee10\"><br></p><p data-lake-id=\"u7185974a\" id=\"u7185974a\"><span data-lake-id=\"u13ae0920\" id=\"u13ae0920\">为了兼容不同厂商生产的不同品牌的设备，需要一个组织对它们制定一个模型，这个模型就是七层网络模型OSI。<br /></span><span data-lake-id=\"ue42ee5a5\" id=\"ue42ee5a5\">这个模型分别有物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</span></p><p data-lake-id=\"uac9b31f0\" id=\"uac9b31f0\"><br></p><ol list=\"u74675aa5\"><li fid=\"u9878c9a7\" data-lake-id=\"u6d75afb3\" id=\"u6d75afb3\"><span data-lake-id=\"u22c2df61\" id=\"u22c2df61\">物理层：各种物理设备和标准</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u335bedbd\" id=\"u335bedbd\"><span data-lake-id=\"ub56a373a\" id=\"ub56a373a\">数据链路层：确定目标主机</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u165dfbc7\" id=\"u165dfbc7\"><span data-lake-id=\"u546876a8\" id=\"u546876a8\">网络层：确定目标网络</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u69f79061\" id=\"u69f79061\"><span data-lake-id=\"u13fc3ede\" id=\"u13fc3ede\">传输层：控制数据传输可靠性</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u50dfa81c\" id=\"u50dfa81c\"><span data-lake-id=\"u62b4b1d1\" id=\"u62b4b1d1\">会话层：控制网络连接建立与终止</span></li><li fid=\"u9878c9a7\" data-lake-id=\"uf5baf05e\" id=\"uf5baf05e\"><span data-lake-id=\"ud41d9c23\" id=\"ud41d9c23\">表示层：数据加密、转换、压缩</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u86e3afc7\" id=\"u86e3afc7\"><span data-lake-id=\"ud5aee9be\" id=\"ud5aee9be\">应用层：用户与网络的接口</span></li></ol><p data-lake-id=\"u2de4f97d\" id=\"u2de4f97d\"><br></p><p data-lake-id=\"u21b7e796\" id=\"u21b7e796\"><span data-lake-id=\"u74203d6d\" id=\"u74203d6d\">数据从A主机发送到B主机时，先根据层次从高到低的进行封装，到了B主机后，会根据层次从低到高一层一层的解包数据，最后在应用层中拿到A主机发送过来的原始数据。<br /></span><span data-lake-id=\"u0f8fa45f\" id=\"u0f8fa45f\">tcp/ip模型：</span></p><p data-lake-id=\"u80cf8336\" id=\"u80cf8336\"><br></p><ol list=\"u359faa36\"><li fid=\"u7a514d95\" data-lake-id=\"uc8a3a68f\" id=\"uc8a3a68f\"><span data-lake-id=\"u86abe739\" id=\"u86abe739\">物理层</span></li><li fid=\"u7a514d95\" data-lake-id=\"uac8611f2\" id=\"uac8611f2\"><span data-lake-id=\"ud232b8b5\" id=\"ud232b8b5\">数据链路层</span></li><li fid=\"u7a514d95\" data-lake-id=\"u0eb19738\" id=\"u0eb19738\"><span data-lake-id=\"u9fe540ff\" id=\"u9fe540ff\">网络层</span></li><li fid=\"u7a514d95\" data-lake-id=\"udb714b3b\" id=\"udb714b3b\"><span data-lake-id=\"u3ba0316c\" id=\"u3ba0316c\">传输层</span></li><li fid=\"u7a514d95\" data-lake-id=\"ued8ac0c2\" id=\"ued8ac0c2\"><span data-lake-id=\"uba7a2b49\" id=\"uba7a2b49\">应用层</span></li></ol><p data-lake-id=\"ub35ea7e5\" id=\"ub35ea7e5\"><br></p><h2 data-lake-id=\"e87bcb2d\" id=\"e87bcb2d\"><span data-lake-id=\"u7d9775da\" id=\"u7d9775da\">数据封装与解封装</span></h2><p data-lake-id=\"udeaa4bd8\" id=\"udeaa4bd8\"><br></p><p data-lake-id=\"u0fe530ea\" id=\"u0fe530ea\"><span data-lake-id=\"u6663a6f9\" id=\"u6663a6f9\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"udd13f653\" id=\"udd13f653\"><span data-lake-id=\"u54a992f9\" id=\"u54a992f9\">网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。</span></p><p data-lake-id=\"uf52a0dd3\" id=\"uf52a0dd3\"><br></p><h2 data-lake-id=\"m1IhM\" id=\"m1IhM\"><span data-lake-id=\"u8acb3139\" id=\"u8acb3139\">主机通信的必要条件</span></h2><p data-lake-id=\"uee5b09b1\" id=\"uee5b09b1\"><br></p><ol list=\"ua4de6d50\"><li fid=\"u2c5acd78\" data-lake-id=\"udaecf33b\" id=\"udaecf33b\"><span data-lake-id=\"u0f8505b3\" id=\"u0f8505b3\">主机之间需要有传输介质<br /></span><span data-lake-id=\"uab737906\" id=\"uab737906\">例如网线、光纤、蓝牙、Wifi等。</span></li><li fid=\"u2c5acd78\" data-lake-id=\"uf3f94ea4\" id=\"uf3f94ea4\"><span data-lake-id=\"ue5de647a\" id=\"ue5de647a\">主机上必须要有网卡设备<br /></span><span data-lake-id=\"u839dd48a\" id=\"u839dd48a\">主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别，因为在计算机的世界中，一切都是以二机制的形式存在。A主机将封装好的二进制数据，通过网卡转换为电信号（调制），再通过传输介质发送给B主机；B主机接收到信号后，通过网卡将电信号转换为二进制（解调），再由B主机自己的通信体系对数据进行拆包、解包，最终在我们的应用程序里获取到A主机发送过来的数据。</span></li><li fid=\"u2c5acd78\" data-lake-id=\"uf45d994d\" id=\"uf45d994d\"><span data-lake-id=\"u9077435d\" id=\"u9077435d\">主机之间需要协商网络速率<br /></span><span data-lake-id=\"u5275c8ad\" id=\"u5275c8ad\">A、B主机由于网卡的网络速率不同，所以在通信之间需要协商网络速率，让他们保持一致。</span></li></ol><p data-lake-id=\"u3e4c8a38\" id=\"u3e4c8a38\"><br></p><h2 data-lake-id=\"bHtyf\" id=\"bHtyf\"><span data-lake-id=\"udc005ad1\" id=\"udc005ad1\">网络通讯方式</span></h2><p data-lake-id=\"uf341d924\" id=\"uf341d924\"><br></p><ol list=\"u1e9536af\"><li fid=\"u2d450ce8\" data-lake-id=\"u90d29979\" id=\"u90d29979\"><span data-lake-id=\"ua3844a1a\" id=\"ua3844a1a\">交换机通信</span></li><li fid=\"u2d450ce8\" data-lake-id=\"u1e8f62ce\" id=\"u1e8f62ce\"><span data-lake-id=\"ud40819f9\" id=\"ud40819f9\">路由器通信</span></li></ol><p data-lake-id=\"uf62456bb\" id=\"uf62456bb\"><br></p><p data-lake-id=\"ueaced6a5\" id=\"ueaced6a5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1429353%2F1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png%22%2C%22taskId%22%3A%22ufcd07110-e9be-4895-b5e3-fba7584ccf8%22%2C%22clientId%22%3A%22u06388d18-a111-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1024%2C%22height%22%3A1366%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A369092%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2048%2C%22originHeight%22%3A2732%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22id%22%3A%22u0e464cc1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uaaf4198b\" id=\"uaaf4198b\"><br></p><h2 data-lake-id=\"bZKD7\" id=\"bZKD7\"><span data-lake-id=\"ud4f702f3\" id=\"ud4f702f3\">网络层次模型</span></h2><p data-lake-id=\"u739dee10\" id=\"u739dee10\"><br></p><p data-lake-id=\"u7185974a\" id=\"u7185974a\"><span data-lake-id=\"u13ae0920\" id=\"u13ae0920\">为了兼容不同厂商生产的不同品牌的设备，需要一个组织对它们制定一个模型，这个模型就是七层网络模型OSI。<br /></span><span data-lake-id=\"ue42ee5a5\" id=\"ue42ee5a5\">这个模型分别有物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</span></p><p data-lake-id=\"uac9b31f0\" id=\"uac9b31f0\"><br></p><ol list=\"u74675aa5\"><li fid=\"u9878c9a7\" data-lake-id=\"u6d75afb3\" id=\"u6d75afb3\"><span data-lake-id=\"u22c2df61\" id=\"u22c2df61\">物理层：各种物理设备和标准</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u335bedbd\" id=\"u335bedbd\"><span data-lake-id=\"ub56a373a\" id=\"ub56a373a\">数据链路层：确定目标主机</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u165dfbc7\" id=\"u165dfbc7\"><span data-lake-id=\"u546876a8\" id=\"u546876a8\">网络层：确定目标网络</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u69f79061\" id=\"u69f79061\"><span data-lake-id=\"u13fc3ede\" id=\"u13fc3ede\">传输层：控制数据传输可靠性</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u50dfa81c\" id=\"u50dfa81c\"><span data-lake-id=\"u62b4b1d1\" id=\"u62b4b1d1\">会话层：控制网络连接建立与终止</span></li><li fid=\"u9878c9a7\" data-lake-id=\"uf5baf05e\" id=\"uf5baf05e\"><span data-lake-id=\"ud41d9c23\" id=\"ud41d9c23\">表示层：数据加密、转换、压缩</span></li><li fid=\"u9878c9a7\" data-lake-id=\"u86e3afc7\" id=\"u86e3afc7\"><span data-lake-id=\"ud5aee9be\" id=\"ud5aee9be\">应用层：用户与网络的接口</span></li></ol><p data-lake-id=\"u2de4f97d\" id=\"u2de4f97d\"><br></p><p data-lake-id=\"u21b7e796\" id=\"u21b7e796\"><span data-lake-id=\"u74203d6d\" id=\"u74203d6d\">数据从A主机发送到B主机时，先根据层次从高到低的进行封装，到了B主机后，会根据层次从低到高一层一层的解包数据，最后在应用层中拿到A主机发送过来的原始数据。<br /></span><span data-lake-id=\"u0f8fa45f\" id=\"u0f8fa45f\">tcp/ip模型：</span></p><p data-lake-id=\"u80cf8336\" id=\"u80cf8336\"><br></p><ol list=\"u359faa36\"><li fid=\"u7a514d95\" data-lake-id=\"uc8a3a68f\" id=\"uc8a3a68f\"><span data-lake-id=\"u86abe739\" id=\"u86abe739\">物理层</span></li><li fid=\"u7a514d95\" data-lake-id=\"uac8611f2\" id=\"uac8611f2\"><span data-lake-id=\"ud232b8b5\" id=\"ud232b8b5\">数据链路层</span></li><li fid=\"u7a514d95\" data-lake-id=\"u0eb19738\" id=\"u0eb19738\"><span data-lake-id=\"u9fe540ff\" id=\"u9fe540ff\">网络层</span></li><li fid=\"u7a514d95\" data-lake-id=\"udb714b3b\" id=\"udb714b3b\"><span data-lake-id=\"u3ba0316c\" id=\"u3ba0316c\">传输层</span></li><li fid=\"u7a514d95\" data-lake-id=\"ued8ac0c2\" id=\"ued8ac0c2\"><span data-lake-id=\"uba7a2b49\" id=\"uba7a2b49\">应用层</span></li></ol><p data-lake-id=\"ub35ea7e5\" id=\"ub35ea7e5\"><br></p><h2 data-lake-id=\"e87bcb2d\" id=\"e87bcb2d\"><span data-lake-id=\"u7d9775da\" id=\"u7d9775da\">数据封装与解封装</span></h2><p data-lake-id=\"udeaa4bd8\" id=\"udeaa4bd8\"><br></p><p data-lake-id=\"u0fe530ea\" id=\"u0fe530ea\"><span data-lake-id=\"u6663a6f9\" id=\"u6663a6f9\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-07-26T00:45:49.000Z",
    "deleted_at": null,
    "created_at": "2021-07-25T12:03:21.000Z",
    "updated_at": "2022-03-31T05:38:56.000Z",
    "published_at": "2021-07-26T00:45:49.000Z",
    "first_published_at": "2021-07-26T00:45:49.000Z",
    "word_count": 634,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/1429353/1627260256341-6939a46a-da3f-4e29-9414-0e07d4e12319.png",
    "description": null,
    "custom_description": "网络通信中有tcp/ip、ftp、arp、http等这些协议或模型，他们本质上解决的问题其实是主机与主机之间的网络通信的问题。主机通信的必要条件主机之间需要有传输介质例如网线、光纤、蓝牙、Wifi等。主机上必须要有网卡设备主要完成信号的调制和解调。无论我们使用哪种编程语言，计算机都不能直接识别...",
    "hits": 3,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 15934440,
    "slug": "sxbk2l",
    "title": "思维导图之面向对象",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lakemind",
    "body": "{\"format\":\"lakemind\",\"type\":\"Mind\",\"version\":\"1.0\",\"diagramData\":{\"head\":{\"version\":\"2.0.0\"},\"body\":[{\"id\":\"init\",\"type\":\"mindmap\",\"html\":\"new执行的原理\",\"zIndex\":4,\"children\":[{\"html\":\"1.创建一个实例对象：<div><span style=\\\"color:rgb(228, 130, 212);\\\">实例.__proto__ = 类.prototype 或 Object.create(类.prototype)</span></div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"85ce6913-dcd3-425e-b6ef-aee7f0886c4c\",\"children\":[],\"zIndex\":0},{\"html\":\"2.把函数执行，并让函数中的this指向实例对象\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"96200052-d822-404c-afd7-60f20c8d1271\",\"children\":[],\"zIndex\":1},{\"html\":\"3.处理返回值\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"0f9642a7-e861-4100-b45a-a696688e9b18\",\"children\":[{\"html\":\"如果函数有返回值并且返回值是引用数据类型，则返回函数的返回值；<div>否则返回创建的实例对象</div>\",\"id\":\"18ffee2e-f3b7-4655-a51e-48db60913134\",\"children\":[],\"zIndex\":3}],\"zIndex\":2}],\"x\":-131,\"y\":-132},{\"id\":\"09c49c10-bffa-4053-9219-878620a2f3da\",\"x\":-131,\"y\":12.5,\"html\":\"Object.create\",\"type\":\"mindmap\",\"children\":[{\"html\":\"创建一个对象，并让这个对象的__proto__指向传入的对象的prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"632b4468-6098-473e-a033-ff06f23c64d4\",\"children\":[],\"zIndex\":5},{\"html\":\"Object.create(null) ： 创建一个空对象，并且取消对象的__proto__属性\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"ecc00729-f2c3-4e30-ae83-8cad91c2940b\",\"children\":[],\"zIndex\":6}],\"zIndex\":7},{\"id\":\"6f913443-31ef-4424-8346-2fbd3e3e7562\",\"x\":-129,\"y\":193.75,\"html\":\"函数的多种角色\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.作为函数(第一角色)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"5b137287-648e-4d2f-89dd-40cbd6afaae4\",\"children\":[{\"html\":\"1.普通函数\",\"id\":\"072d4913-a4f0-40a6-8561-8210526bea47\",\"children\":[],\"zIndex\":10},{\"html\":\"2.构造函数<div>类/原型和原型链</div>\",\"id\":\"84e94270-1b3b-4e13-a291-b4cf8a3ca6bc\",\"children\":[],\"zIndex\":11}],\"zIndex\":8},{\"html\":\"2.作为对象\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"6ded07ac-ef75-4e5e-99ba-a36f9f0f3eac\",\"children\":[{\"html\":\"键值对\",\"id\":\"2f854a27-ddad-4b7f-9ede-fdd5b2111375\",\"children\":[],\"zIndex\":12}],\"zIndex\":9},{\"html\":\"注意点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"8fc86a61-a0ca-4bad-8e37-b4d38e836230\",\"children\":[{\"html\":\"函数是一等公民(数据类型归类)\",\"id\":\"208cd520-48dc-43f9-aa06-a34737c26868\",\"children\":[],\"zIndex\":14},{\"html\":\"三种角色之间没有必然的联系\",\"id\":\"8f50d9ef-5f0d-4ff8-9f44-9f3d5c20a456\",\"children\":[],\"zIndex\":15}],\"zIndex\":13}],\"zIndex\":16},{\"id\":\"49af2de2-9361-4cf1-827d-b6ba949e6770\",\"x\":-131.81879728408808,\"y\":379.9729407979514,\"html\":\"Function和Object是两大基类\",\"type\":\"mindmap\",\"children\":[{\"html\":\"Object.__proto__ === Function.__proto__\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"16dcc1fa-0869-4148-9270-77f5d4de94b4\",\"children\":[],\"zIndex\":17},{\"html\":\"Function.__proto__.__proto__ === Object.prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"d75ff7bb-2648-4432-b8b3-1afbf6833718\",\"children\":[],\"zIndex\":18}],\"zIndex\":19},{\"id\":\"ec75acf4-2122-41c1-b6b2-84158d399c25\",\"x\":-134.13175384962597,\"y\":590.4962846636315,\"html\":\"不具备prototype的函数\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.箭头函数\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"bcb15d2f-4314-4d9f-9401-660b15079d4a\",\"children\":[],\"zIndex\":20},{\"html\":\"2.let obj = {<div>&nbsp; &nbsp; fn(){} //&nbsp;这种写法不具备</div><div>}</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"4c3b78ce-c64f-4cac-8334-bc1b3c40b10a\",\"children\":[],\"zIndex\":21},{\"html\":\"3.Function.prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"b2766f89-bd1e-4b4d-b7b0-fb08bd673bc1\",\"children\":[],\"zIndex\":22},{\"html\":\"特点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"b1846653-a45f-4c2d-9e0b-aecffe27d33e\",\"children\":[{\"html\":\"不能被new执行（不是构造函数）\",\"id\":\"951a3597-2619-443f-a5e4-cab71e21f7a5\",\"children\":[],\"zIndex\":24}],\"zIndex\":23}],\"zIndex\":25},{\"id\":\"47ef0862-265f-414a-b645-e73dbd35b629\",\"x\":-136.16110284270343,\"y\":929.2477717010211,\"html\":\"检测数据类型的方法\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.typeof\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"95131760-5b3e-4ba0-b475-c2dc831c229d\",\"children\":[{\"html\":\"按照二进制存储的值进行检测的\",\"id\":\"d0b02dae-57b1-4455-a679-6ebda4f0e5be\",\"children\":[],\"zIndex\":30},{\"html\":\"缺点\",\"id\":\"0bf9936e-0805-40bf-95d8-af27e9d301f9\",\"children\":[{\"html\":\"bug: typeof null 等于object\",\"id\":\"250fb09b-964e-4f76-b30e-9423697b0b0e\",\"children\":[],\"zIndex\":37,\"height\":null},{\"html\":\"不能细分具体的引用数据类型\",\"id\":\"b433a4d1-f5a7-4be8-87a8-d4d68f031ee9\",\"children\":[],\"zIndex\":32}],\"zIndex\":31}],\"zIndex\":26},{\"html\":\"2.Object.prototype.toString\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"b46509c1-89a3-4d9c-82fe-a83b38f51c53\",\"children\":[],\"zIndex\":27},{\"html\":\"3.contructor\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"d07e6c2d-6b29-4c1c-b480-f3860bcdf761\",\"children\":[{\"html\":\"当前实例是否是当前类的实例(只找一级)\",\"id\":\"592ec3fe-508d-43b7-9a15-e07c73b5cdb3\",\"children\":[],\"zIndex\":36}],\"zIndex\":28},{\"html\":\"4.instance of\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"22a2252a-98ab-4861-9bdd-8618dfee7a24\",\"children\":[{\"html\":\"原理\",\"id\":\"3d5ef254-8fe2-4489-9259-8d0c7020adae\",\"children\":[{\"html\":\"static 构造函数[Symbol.hasInstance](实例)\",\"id\":\"32acc5d3-94f0-4995-8770-d45be84e6788\",\"children\":[],\"zIndex\":34},{\"html\":\"当前构造函数的原型prototype是否出现在，当前实例所在的原型链上__proto__\",\"id\":\"6cab9c06-2191-4c40-8a72-b1af716add11\",\"children\":[],\"zIndex\":35}],\"zIndex\":33}],\"zIndex\":29}],\"zIndex\":38}]},\"viewportSetting\":{\"zoom\":1.0506695938270962,\"tlCanvasPoint\":[-147.65729938911286,646.4696602662399,1],\"width\":1366,\"height\":898},\"text\":\"new执行的原理1.创建一个实例对象：实例.__proto__ = 类.prototype 或 Object.create(类.prototype)2.把函数执行，并让函数中的this指向实例对象3.处理返回值如果函数有返回值并且返回值是引用数据类型，则返回函数的返回值；否则返回创建的实例对象Object.create创建一个对象，并让这个对象的__proto__指向传入的对象的prototypeObject.create(null) ： 创建一个空对象，并且取消对象的__proto__属性函数的多种角色1.作为函数(第一角色)1.普通函数2.构造函数类/原型和原型链2.作为对象键值对注意点函数是一等公民(数据类型归类)三种角色之间没有必然的联系Function和Object是两大基类Object.__proto__ === Function.__proto__Function.__proto__.__proto__ === Object.prototype不具备prototype的函数1.箭头函数2.let obj = {    fn(){} // 这种写法不具备}3.Function.prototype特点不能被new执行（不是构造函数）检测数据类型的方法1.typeof按照二进制存储的值进行检测的缺点bug: typeof null 等于object不能细分具体的引用数据类型2.Object.prototype.toString3.contructor当前实例是否是当前类的实例(只找一级)4.instance of原理static 构造函数[Symbol.hasInstance](实例)当前构造函数的原型prototype是否出现在，当前实例所在的原型链上__proto__\"}",
    "body_draft": "{\"format\":\"lakemind\",\"type\":\"Mind\",\"version\":\"1.0\",\"diagramData\":{\"head\":{\"version\":\"2.0.0\"},\"body\":[{\"id\":\"init\",\"type\":\"mindmap\",\"html\":\"new执行的原理\",\"zIndex\":4,\"children\":[{\"html\":\"1.创建一个实例对象：<div><span style=\\\"color:rgb(228, 130, 212);\\\">实例.__proto__ = 类.prototype 或 Object.create(类.prototype)</span></div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"85ce6913-dcd3-425e-b6ef-aee7f0886c4c\",\"children\":[],\"zIndex\":0},{\"html\":\"2.把函数执行，并让函数中的this指向实例对象\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"96200052-d822-404c-afd7-60f20c8d1271\",\"children\":[],\"zIndex\":1},{\"html\":\"3.处理返回值\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"0f9642a7-e861-4100-b45a-a696688e9b18\",\"children\":[{\"html\":\"如果函数有返回值并且返回值是引用数据类型，则返回函数的返回值；<div>否则返回创建的实例对象</div>\",\"id\":\"18ffee2e-f3b7-4655-a51e-48db60913134\",\"children\":[],\"zIndex\":3}],\"zIndex\":2}],\"x\":-131,\"y\":-132},{\"id\":\"09c49c10-bffa-4053-9219-878620a2f3da\",\"x\":-131,\"y\":12.5,\"html\":\"Object.create\",\"type\":\"mindmap\",\"children\":[{\"html\":\"创建一个对象，并让这个对象的__proto__指向传入的对象的prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"632b4468-6098-473e-a033-ff06f23c64d4\",\"children\":[],\"zIndex\":5},{\"html\":\"Object.create(null) ： 创建一个空对象，并且取消对象的__proto__属性\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"ecc00729-f2c3-4e30-ae83-8cad91c2940b\",\"children\":[],\"zIndex\":6}],\"zIndex\":7},{\"id\":\"6f913443-31ef-4424-8346-2fbd3e3e7562\",\"x\":-129,\"y\":193.75,\"html\":\"函数的多种角色\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.作为函数(第一角色)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"5b137287-648e-4d2f-89dd-40cbd6afaae4\",\"children\":[{\"html\":\"1.普通函数\",\"id\":\"072d4913-a4f0-40a6-8561-8210526bea47\",\"children\":[],\"zIndex\":10},{\"html\":\"2.构造函数<div>类/原型和原型链</div>\",\"id\":\"84e94270-1b3b-4e13-a291-b4cf8a3ca6bc\",\"children\":[],\"zIndex\":11}],\"zIndex\":8},{\"html\":\"2.作为对象\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"6ded07ac-ef75-4e5e-99ba-a36f9f0f3eac\",\"children\":[{\"html\":\"键值对\",\"id\":\"2f854a27-ddad-4b7f-9ede-fdd5b2111375\",\"children\":[],\"zIndex\":12}],\"zIndex\":9},{\"html\":\"注意点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"8fc86a61-a0ca-4bad-8e37-b4d38e836230\",\"children\":[{\"html\":\"函数是一等公民(数据类型归类)\",\"id\":\"208cd520-48dc-43f9-aa06-a34737c26868\",\"children\":[],\"zIndex\":14},{\"html\":\"三种角色之间没有必然的联系\",\"id\":\"8f50d9ef-5f0d-4ff8-9f44-9f3d5c20a456\",\"children\":[],\"zIndex\":15}],\"zIndex\":13}],\"zIndex\":16},{\"id\":\"49af2de2-9361-4cf1-827d-b6ba949e6770\",\"x\":-131.81879728408808,\"y\":379.9729407979514,\"html\":\"Function和Object是两大基类\",\"type\":\"mindmap\",\"children\":[{\"html\":\"Object.__proto__ === Function.__proto__\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"16dcc1fa-0869-4148-9270-77f5d4de94b4\",\"children\":[],\"zIndex\":17},{\"html\":\"Function.__proto__.__proto__ === Object.prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"d75ff7bb-2648-4432-b8b3-1afbf6833718\",\"children\":[],\"zIndex\":18}],\"zIndex\":19},{\"id\":\"ec75acf4-2122-41c1-b6b2-84158d399c25\",\"x\":-134.13175384962597,\"y\":590.4962846636315,\"html\":\"不具备prototype的函数\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.箭头函数\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"bcb15d2f-4314-4d9f-9401-660b15079d4a\",\"children\":[],\"zIndex\":20},{\"html\":\"2.let obj = {<div>&nbsp; &nbsp; fn(){} //&nbsp;这种写法不具备</div><div>}</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"4c3b78ce-c64f-4cac-8334-bc1b3c40b10a\",\"children\":[],\"zIndex\":21},{\"html\":\"3.Function.prototype\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"b2766f89-bd1e-4b4d-b7b0-fb08bd673bc1\",\"children\":[],\"zIndex\":22},{\"html\":\"特点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"b1846653-a45f-4c2d-9e0b-aecffe27d33e\",\"children\":[{\"html\":\"不能被new执行（不是构造函数）\",\"id\":\"951a3597-2619-443f-a5e4-cab71e21f7a5\",\"children\":[],\"zIndex\":24}],\"zIndex\":23}],\"zIndex\":25},{\"id\":\"47ef0862-265f-414a-b645-e73dbd35b629\",\"x\":-136.16110284270343,\"y\":929.2477717010211,\"html\":\"检测数据类型的方法\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.typeof\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"95131760-5b3e-4ba0-b475-c2dc831c229d\",\"children\":[{\"html\":\"按照二进制存储的值进行检测的\",\"id\":\"d0b02dae-57b1-4455-a679-6ebda4f0e5be\",\"children\":[],\"zIndex\":30},{\"html\":\"缺点\",\"id\":\"0bf9936e-0805-40bf-95d8-af27e9d301f9\",\"children\":[{\"html\":\"bug: typeof null 等于object\",\"id\":\"250fb09b-964e-4f76-b30e-9423697b0b0e\",\"children\":[],\"zIndex\":37},{\"html\":\"不能细分具体的引用数据类型\",\"id\":\"b433a4d1-f5a7-4be8-87a8-d4d68f031ee9\",\"children\":[],\"zIndex\":32}],\"zIndex\":31}],\"zIndex\":26},{\"html\":\"2.Object.prototype.toString\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"b46509c1-89a3-4d9c-82fe-a83b38f51c53\",\"children\":[],\"zIndex\":27},{\"html\":\"3.contructor\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"d07e6c2d-6b29-4c1c-b480-f3860bcdf761\",\"children\":[{\"html\":\"当前实例是否是当前类的实例(只找一级)\",\"id\":\"592ec3fe-508d-43b7-9a15-e07c73b5cdb3\",\"children\":[],\"zIndex\":36}],\"zIndex\":28},{\"html\":\"4.instance of\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"22a2252a-98ab-4861-9bdd-8618dfee7a24\",\"children\":[{\"html\":\"原理\",\"id\":\"3d5ef254-8fe2-4489-9259-8d0c7020adae\",\"children\":[{\"html\":\"static 构造函数[Symbol.hasInstance](实例)\",\"id\":\"32acc5d3-94f0-4995-8770-d45be84e6788\",\"children\":[],\"zIndex\":34},{\"html\":\"当前构造函数的原型prototype是否出现在，当前实例所在的原型链上__proto__\",\"id\":\"6cab9c06-2191-4c40-8a72-b1af716add11\",\"children\":[],\"zIndex\":35}],\"zIndex\":33}],\"zIndex\":29}],\"zIndex\":38}]},\"viewportSetting\":{\"zoom\":1.0506695938270962,\"tlCanvasPoint\":[-147.65729938911286,-599.4025032480076,1],\"width\":1434,\"height\":792},\"text\":\"new执行的原理1.创建一个实例对象：实例.__proto__ = 类.prototype 或 Object.create(类.prototype)2.把函数执行，并让函数中的this指向实例对象3.处理返回值如果函数有返回值并且返回值是引用数据类型，则返回函数的返回值；否则返回创建的实例对象Object.create创建一个对象，并让这个对象的__proto__指向传入的对象的prototypeObject.create(null) ： 创建一个空对象，并且取消对象的__proto__属性函数的多种角色1.作为函数(第一角色)1.普通函数2.构造函数类/原型和原型链2.作为对象键值对注意点函数是一等公民(数据类型归类)三种角色之间没有必然的联系Function和Object是两大基类Object.__proto__ === Function.__proto__Function.__proto__.__proto__ === Object.prototype不具备prototype的函数1.箭头函数2.let obj = {    fn(){} // 这种写法不具备}3.Function.prototype特点不能被new执行（不是构造函数）检测数据类型的方法1.typeof按照二进制存储的值进行检测的缺点bug: typeof null 等于object不能细分具体的引用数据类型2.Object.prototype.toString3.contructor当前实例是否是当前类的实例(只找一级)4.instance of原理static 构造函数[Symbol.hasInstance](实例)当前构造函数的原型prototype是否出现在，当前实例所在的原型链上__proto__\"}",
    "body_html": "",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-12-05T11:39:33.000Z",
    "deleted_at": null,
    "created_at": "2020-11-13T11:59:16.000Z",
    "updated_at": "2022-03-25T07:34:03.000Z",
    "published_at": "2020-11-29T11:36:29.000Z",
    "first_published_at": "2020-11-18T05:38:35.000Z",
    "word_count": 0,
    "cover": "https://cdn.nlark.com/yuque/0/2020/png/1429353/1606649789172-f3364be0-b8a2-48c0-8dab-8ed981f28984.png",
    "description": "",
    "custom_description": null,
    "hits": 3,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 15149991,
    "slug": "vhrwmx",
    "title": "思维导图之作用域和闭包",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lakemind",
    "body": "{\"format\":\"lakemind\",\"type\":\"Mind\",\"version\":\"1.0\",\"diagramData\":{\"head\":{\"version\":\"2.0.0\"},\"body\":[{\"id\":\"init\",\"type\":\"mindmap\",\"html\":\"数据类型\",\"children\":[{\"html\":\"基本类型\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"f1b51e22-5556-41c2-8bdf-f900a8c5cf6f\",\"children\":[{\"html\":\"number\",\"id\":\"3c85803e-2ab1-47d3-93e4-34e924d6d361\",\"children\":[],\"zIndex\":2},{\"html\":\"string\",\"id\":\"0714922a-cb2e-4e85-ba85-d73c7bafc728\",\"children\":[],\"zIndex\":3},{\"html\":\"undefined\",\"id\":\"42f4fa35-8257-402a-ae08-12ea56d761ee\",\"children\":[],\"zIndex\":4},{\"html\":\"null\",\"id\":\"bee1c28d-be83-4edf-af03-08b8dd29d91e\",\"children\":[],\"zIndex\":5},{\"html\":\"boolean\",\"id\":\"c5ae2d7f-12b8-4379-a4ea-7679e6f99b6f\",\"children\":[],\"zIndex\":9},{\"html\":\"symbol\",\"id\":\"b326de10-646c-48e5-985e-32744066f033\",\"children\":[],\"zIndex\":6}],\"zIndex\":0},{\"html\":\"引用类型\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"1a581807-35a4-47d7-bfe1-cf8f93e51df8\",\"children\":[{\"html\":\"object\",\"id\":\"aae01172-12c8-4c6a-8da9-dae7ff8f1997\",\"children\":[{\"html\":\"array\",\"id\":\"abdcf0cb-edc5-40ce-913c-86c1b24bceec\",\"children\":[],\"zIndex\":10},{\"html\":\"...\",\"id\":\"6d40973b-4f4b-4c09-90b8-c7046fbdbf13\",\"children\":[],\"zIndex\":11}],\"zIndex\":7},{\"html\":\"function\",\"id\":\"f5803c67-eec6-4f23-82b7-0a3da47141e8\",\"children\":[],\"zIndex\":8}],\"zIndex\":1}],\"zIndex\":12,\"x\":2024.4623834304057,\"y\":-3472.70048927316,\"border\":{\"shape\":\"rect\",\"stroke\":\"transparent\"}},{\"id\":\"fc99eff4-03ef-4955-9ac3-c3dd0fc2e483\",\"x\":2003.6096233018084,\"y\":-2194.5299924160363,\"html\":\"JS代码执行\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.游览器会在内存中开辟一块栈内存，全局上下文（环境），也叫ECStack。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"733f2abd-2dc1-4e82-a9cc-25b7be0d2ef7\",\"children\":[{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"id\":\"a40eafd0-87de-4158-b9c7-9f35fdb611c3\",\"children\":[{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"id\":\"a78d3f71-b03d-4d09-82f2-5bbf0bd07162\",\"children\":[],\"zIndex\":16,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604060996415-32302ab3-f32b-4e45-9ead-6ac9698e07ab.png\",\"naturalWidth\":700,\"naturalHeight\":504,\"width\":283,\"height\":203.76000000000002},\"width\":299,\"height\":216}],\"zIndex\":15,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604059782703-5690a93e-e8c8-4593-95d1-e68ab4bee13b.png\",\"naturalWidth\":589,\"naturalHeight\":479,\"width\":206,\"height\":167.52801358234296},\"border\":{\"shape\":\"line\",\"stroke\":\"transparent\"},\"width\":222,\"height\":187.52801358234296}],\"zIndex\":13,\"border\":{\"shape\":\"line\",\"stroke\":\"transparent\"}},{\"html\":\"2.然后形成全局执行上下文EC(G)（默认就是window/global）供代码执行。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"cde0a14e-ccf0-40d0-8e05-0ccb4d1868f4\",\"children\":[],\"zIndex\":14}],\"zIndex\":17},{\"id\":\"129c5c0c-ad88-4e63-9320-a350ee1f58df\",\"x\":3374.297353377579,\"y\":-2207.5561578019106,\"html\":\"创建函数\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.单独开辟一个堆内存（16进制地址），函数堆内存中存储的是函数体中的“代码字符串”。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"5859bc97-b0cc-4727-809e-482555f526ce\",\"children\":[],\"zIndex\":18},{\"html\":\"2.创建函数的时候，就声明了它的作用域[scope]，也就是所在的上下文环境。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"a151950e-08f2-436f-ba60-896f20e404f9\",\"children\":[],\"zIndex\":19},{\"html\":\"3.把16进制的地址存放到栈中，供变量（函数名等）关联引用即可\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6596c13c-9913-405a-b5d5-efa629c25397\",\"children\":[],\"zIndex\":20},{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"14419622-89b2-404d-96bb-6122e3cd7723\",\"children\":[],\"zIndex\":21,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604062395688-a40f493f-f76f-4dcd-83e0-a3eddcbbc1f0.png\",\"naturalWidth\":463,\"naturalHeight\":281,\"width\":463,\"height\":281}}],\"zIndex\":22},{\"id\":\"ea92f014-dfb7-4bc5-9fec-3e2a2d3219a6\",\"x\":1991.010600069691,\"y\":-1629.5675587544767,\"html\":\"函数执行\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.形成一个全新的，私有的上下文EC(...)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"27859533-85ab-45c2-9635-0fa167fe12d4\",\"children\":[],\"zIndex\":23},{\"html\":\"2.当前私有的上下文中，有一个存放本上下文内声明的变量的地方AO(...)<div>私有变量对象 -&gt; 这里的变量都是当前上下文内的私有变量(当前上下文中声明的变量，形参变量)</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"aeb76700-4daf-41bf-ad15-bd81f116a967\",\"children\":[],\"zIndex\":24},{\"html\":\"3.进栈执行\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"dba0e235-fbce-41f5-a599-f92fc2cdd99b\",\"children\":[],\"zIndex\":25},{\"html\":\"4.代码执行之前还要处理很多事情\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"3d19547f-97dd-4f3d-9e85-a27c668ace9e\",\"children\":[{\"html\":\"1.初始化作用域链[scope-chain]:&nbsp;<div>&lt;当前自己的上下文，上级上下文(创建函数时形成的作用域)&gt;</div><div><span style=\\\"color:rgb(89, 89, 89);\\\">当前函数的上级上下文是创建函数所在的上下文（作用域）</span></div><div><span style=\\\"color:rgb(251, 50, 0);\\\">后期函数内代码执行，遇到一个变量，我们首先看是否为自己上下文中的私有变量（看AO中有没有），如果是私有的变量，则当前变量的操作和外界环境中的变量互不干扰（没有直接关系）；如果不是自己的私有变量，则按照作用域链，查找是否为其上级上下文中的私有变量...直到找到EC(G)全局上下文为止 作用域链查找机制</span></div>\",\"id\":\"3192a6da-bc0c-4b2f-bd6a-60b80bf1e611\",\"children\":[],\"zIndex\":27},{\"html\":\"2.初始化this...\",\"id\":\"fc880192-ab33-4a87-94e1-7496dea6d304\",\"children\":[],\"zIndex\":28},{\"html\":\"3.初始化arguments...\",\"id\":\"af0e886b-2f8c-4fd8-9ff5-cdbb6b38ce37\",\"children\":[],\"zIndex\":29},{\"html\":\"4.形参赋值<div>形参都是私有变量（放到AO中的）</div><div>如果不传递实参值，默认值是undefined</div>\",\"id\":\"356f8dcf-856c-469f-937d-feaebdc14b5b\",\"children\":[],\"zIndex\":30},{\"html\":\"5.变量提升\",\"id\":\"ede4a7ea-4ca1-40e4-82fa-fe18dad5266d\",\"children\":[],\"zIndex\":31}],\"zIndex\":26},{\"html\":\"5.代码自上而下执行\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"97df9f13-b220-47dd-b944-78332dd062f7\",\"children\":[],\"zIndex\":32},{\"html\":\"6.一般情况下， 函数进栈执行的上下文，进栈执行完成后，会默认出栈释放掉（私有上下文中存储的私有变量和一些值都会被释放掉） -&gt; 目的：为了优化内存空间，减少栈内存的消耗，提高页面或者计算机的处理速度...\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"499021f1-ad43-47cf-b4fc-d7067ad68161\",\"children\":[],\"zIndex\":33}],\"zIndex\":34},{\"id\":\"bbea95d2-e3d3-4e69-8a4c-86d3a5cd4247\",\"x\":1963.3765434958004,\"y\":82.81621411828132,\"html\":\"GC：游览器的垃圾回收机制（内存管理）\",\"type\":\"mindmap\",\"children\":[{\"html\":\"谷歌：基于查找引用\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"c9e933a5-abac-4736-9646-4da6c8f7d331\",\"children\":[],\"zIndex\":38},{\"html\":\"游览器的渲染引擎会在空闲的时候（定期一个时间），依次遍历所有的内存：栈/堆\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"a552e576-57ab-4670-8cdd-2fd1f47182c8\",\"children\":[],\"zIndex\":35},{\"html\":\"堆：当前内存如果被占用（指针关联地址），则不能释放；如果没有任何的事物占用这个堆，则游览器会自动把这个堆内存释放掉。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"71b45608-3dd0-4147-ac2b-b543e5f7b8c4\",\"children\":[],\"zIndex\":36},{\"html\":\"栈：当前上下文中是否有内容（一般是堆内存）被上下文以外的事物所占用，如果被占用则无法释放（闭包），如果没有被占用则释放掉。<span style=\\\"color:rgb(251, 50, 0);\\\">EC(G)是加载页面的时候创建，只有关闭页面的时候才会被释放。</span>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"83ab9934-e818-4905-a27b-4830dcf9f399\",\"children\":[],\"zIndex\":37},{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">主动释放：把占用的事物手动赋值为null（其余的值也可以，但是null更好，null不占空间的），可以实现内存的手动优化</span>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"7f65522e-b320-4d09-b515-d6946c6b49e5\",\"children\":[],\"zIndex\":39}],\"zIndex\":40},{\"id\":\"cde09247-87b4-4213-8fda-abefc26c8ca4\",\"x\":2917.6565158848593,\"y\":69.40691075334075,\"html\":\"this\",\"type\":\"mindmap\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212); font-weight:bold;\\\">函数的执行主体</span>（不等价于执行上下文/作用域）：谁把这个函数执行的\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"b3412def-d12b-42b0-9e81-b06491748424\",\"children\":[],\"zIndex\":41},{\"html\":\"在游览器端运行JS代码，非函数中的this一般都是window；研究this都是研究函数中的this；有一个特殊的，就是ES6+中“块级上下文”中的this，是其所在上下文中的this（理解为：块级上下文是没有自己this的）；\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"f4099a09-54c3-4ded-a4a4-cd92d7da35ce\",\"children\":[],\"zIndex\":42},{\"html\":\"想要分清楚函数执行的执行主体(this)，可以按照如下的规律来分析\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6caf7a24-5eea-48ab-8863-5a4c7c5f12b5\",\"children\":[{\"html\":\"事件绑定\",\"id\":\"5b615342-4631-45a0-8064-5fca2acb30a2\",\"children\":[{\"html\":\"当前元素本身\",\"id\":\"d7a4240e-86ef-474b-90d7-5824fc7c3f47\",\"children\":[],\"zIndex\":49}],\"zIndex\":44},{\"html\":\"普通函数执行\",\"id\":\"65a6d7ec-7d7c-48b7-bbbb-c0be86de1d6f\",\"children\":[{\"html\":\"看函数前面是否有点，点前面是谁this就是谁\",\"id\":\"a3eda677-65f9-4afc-93ea-d977be9a4484\",\"children\":[],\"zIndex\":50},{\"html\":\"没有点就是window/undefiend(严格模式)\",\"id\":\"5e8a148b-c639-49d9-93b4-59a428f64a06\",\"children\":[],\"zIndex\":51},{\"html\":\"自执行函数中的this一般都是window/undefined(严格模式)\",\"id\":\"f45e3d01-1e3e-42af-82e8-187a938d4af5\",\"children\":[],\"zIndex\":52},{\"html\":\"回调函数中的this一般也是window/undefined(严格模式)，除非做过特殊处理\",\"id\":\"d889cc4d-2c27-4f10-8ab8-3caff342b27b\",\"children\":[],\"zIndex\":53},{\"html\":\"<span style=\\\"color:rgb(107, 45, 98);\\\">括号包起来的函数执行：</span><div><span style=\\\"color:rgb(107, 45, 98);\\\">如果括号中只有一项，就相当于没有括号；</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">如果括号中有很多项，this就是最后一项</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">&nbsp; &nbsp; &nbsp;(obj.fn)() -&gt; obj</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">&nbsp; &nbsp; &nbsp;(a, b, obj.fn)() -&gt; obj</span></div>\",\"id\":\"1862b77b-564c-4df1-841b-380e09d76cc6\",\"children\":[],\"zIndex\":54}],\"zIndex\":45},{\"html\":\"构造函数执行\",\"id\":\"4ed6a01a-8c9c-4c9d-86ea-e5b460d27f93\",\"children\":[{\"html\":\"所属类的实例\",\"id\":\"4eeacbf2-bb19-435d-b314-be1175456f54\",\"children\":[],\"zIndex\":56}],\"zIndex\":46},{\"html\":\"箭头函数执行\",\"id\":\"ec859e1e-b16f-464f-bc42-c30fef007884\",\"children\":[{\"html\":\"它的上级上下文\",\"id\":\"f41f3832-532e-4dec-997d-a29b355d8d89\",\"children\":[],\"zIndex\":55}],\"zIndex\":47},{\"html\":\"基于call/apply/bind强制改变this\",\"id\":\"9213fa2d-0097-4666-8672-ef4eaa5e0637\",\"children\":[],\"zIndex\":48}],\"zIndex\":43}],\"zIndex\":57},{\"id\":\"bb33ab1a-a703-4b16-9298-88e1c82463a8\",\"x\":1952.0194459168001,\"y\":714.3310716568769,\"html\":\"高阶编程技巧\",\"type\":\"mindmap\",\"children\":[{\"html\":\"利用闭包的机制，实现出来的一些高阶编程方式\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"3bc71dce-2aa6-48fa-9edf-547ca5ecc3cd\",\"children\":[],\"zIndex\":58},{\"html\":\"高级单例设计模式\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"b1b99533-26bc-4bed-8fb6-93f8037976a3\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(251, 50, 0);\\\">早期的模块化设计思想</span>\",\"id\":\"a9c872d8-b357-418c-a123-7119cfea1f45\",\"children\":[],\"zIndex\":60},{\"html\":\"闭包+单例<div>一个对象就是一个单例模式<br></div>\",\"id\":\"09e4872d-3747-47f6-b2d5-32ddc61e3cfb\",\"children\":[],\"zIndex\":61},{\"html\":\"基于闭包的“保护作用”，防止了全局变量污染\",\"id\":\"bb674be6-14cf-4192-8396-742b230695da\",\"children\":[],\"zIndex\":62}],\"zIndex\":59},{\"html\":\"惰性函数\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"a2524d75-2fa4-4645-ab8c-05a93f75b539\",\"children\":[{\"html\":\"获取元素样式的小知识点\",\"id\":\"496afb35-356c-4cd0-b91c-e17ac07b2f60\",\"children\":[{\"html\":\"1.dom.style<div>只有获取元素的内联样式</div>\",\"id\":\"74840378-e046-413e-953c-bcd7faaed8f2\",\"children\":[],\"zIndex\":65},{\"html\":\"2.getComputedStyle&nbsp; IE6~8不兼容<div>获取经过浏览器计算的样式（返回样式对象）</div>\",\"id\":\"701178cc-bce7-433b-9e36-3a5bd064adf3\",\"children\":[],\"zIndex\":66}],\"zIndex\":64},{\"html\":\"<span style=\\\"color:rgb(105, 177, 228);\\\">惰性思想</span>：干一次可以搞定的，绝对不去做第二次\",\"id\":\"8fb6e374-51db-40c0-9007-4731cdd6bfe7\",\"children\":[],\"zIndex\":67}],\"zIndex\":63},{\"html\":\"函数柯理化\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"6e2cb5ea-036a-47c4-ac8e-5497b4abf02e\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">预先处理的思想</span><div>形成一个不被释放的闭包，把一些信息储存起来，以后基于作用域链，访问到事先储存的信息，然后进行相关的处理。</div>\",\"id\":\"de121d25-3528-4666-84c1-44fa43cc03e4\",\"children\":[],\"zIndex\":69},{\"html\":\"小知识点\",\"id\":\"8823ea03-34ee-4373-a13f-aaa02fdd9f42\",\"children\":[{\"html\":\"命令式编程\",\"id\":\"6ba6485c-6b35-4cb8-90fd-643df71135f9\",\"children\":[{\"html\":\"自己编写代码，管控运行的步骤和逻辑（自己可以灵活掌控执行步骤）\",\"id\":\"772eaa42-519d-477e-bfc2-669f4108e043\",\"children\":[],\"zIndex\":73}],\"zIndex\":71},{\"html\":\"函数式编程\",\"id\":\"ee04ddc8-42f1-4a97-98a6-6006275cf5b3\",\"children\":[{\"html\":\"具体实现的步骤已经被封装成方法，我们只需要调用方法获取结果即可，无需关注怎么实现的，用起来方便，代码量减少<div>弊端：灵活性差</div>\",\"id\":\"3c256491-3f2f-467e-9dea-de8ec44e6b82\",\"children\":[],\"zIndex\":74}],\"zIndex\":72}],\"zIndex\":70},{\"html\":\"currying\",\"id\":\"2c706054-c2cf-4a1b-8789-1b683fe2af8a\",\"children\":[],\"zIndex\":75},{\"html\":\"<span style=\\\"font-weight:bold;\\\">compose</span>\",\"id\":\"65e45b73-c50e-4b6c-bc7e-3cb108c7662e\",\"children\":[],\"zIndex\":76}],\"zIndex\":68}],\"zIndex\":77},{\"id\":\"b98f60f5-dbe8-4268-84f4-155c3118e2b5\",\"x\":2516.363393125918,\"y\":-3481.224978713911,\"html\":\"数据类型转换\",\"type\":\"mindmap\",\"children\":[{\"html\":\"其他类型转换为Number\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"28fef53e-af7c-4747-bb67-d230b5282773\",\"children\":[{\"html\":\"能用的办法\",\"id\":\"466f8305-e6c4-40da-8f93-9b658e6e28d5\",\"children\":[{\"html\":\"parseInt/parseFloat([val])\",\"layout\":{\"quadrant\":1},\"id\":\"76e08162-00ef-4f04-a538-2dc3a55efb93\",\"children\":[{\"html\":\"把要转换值先转换为字符串\",\"id\":\"1b8ab5a7-3a68-401c-b9ac-57d652886add\",\"children\":[],\"zIndex\":102},{\"html\":\"从字符串左侧的第一位开始查找有效数字字符，遇到非有效字符串则立即停止，最后把有效的数字字符串转为数字，如果没有则返回NaN\",\"id\":\"564cda97-5817-4ade-b097-0b95e7498133\",\"children\":[],\"zIndex\":101}],\"zIndex\":93},{\"html\":\"Number\",\"layout\":{\"quadrant\":1},\"id\":\"7ecf1da3-dbf0-41d4-b9c7-86badc9a62f1\",\"children\":[{\"html\":\"只要出现非有效数字字符结果都是NaN<div>Number(undefined) 是 NaN</div>\",\"id\":\"d3142c07-3700-4ea2-ab7d-80454189a4e9\",\"children\":[],\"zIndex\":99},{\"html\":\"对象转为数字，应该先valueOf，没有原始值再toString，最后再把字符串转为数字\",\"id\":\"2cf1b316-9527-4978-9eef-8de1450440db\",\"children\":[],\"zIndex\":100}],\"zIndex\":94}],\"zIndex\":92},{\"html\":\"隐式转换（游览器内部默认是先转换为Number再进行计算的）\",\"id\":\"624c0e8c-0710-4164-bf8b-92c448803fcc\",\"children\":[{\"html\":\"isNaN([val])\",\"id\":\"48bd07bd-5a87-4d86-a940-27dee829fd48\",\"children\":[],\"zIndex\":96},{\"html\":\"数学运算\",\"id\":\"d73bf817-4c60-44af-9a70-4082d220eb0a\",\"children\":[],\"zIndex\":97},{\"html\":\"在==比较的时候（见== ：2.3）\",\"id\":\"7b0b5e99-cb8f-44f0-9f7b-29559c3b067f\",\"children\":[],\"zIndex\":98}],\"zIndex\":95}],\"zIndex\":91},{\"html\":\"其他类型转换为Boolean\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"0db08cae-524b-453e-aa18-f86334d51f7a\",\"children\":[{\"html\":\"只有“0、NaN、null、undefined、空字符串”五个值会变为布尔的FALSE，其余都是TRUE\",\"id\":\"98bd2b3d-fc29-4d68-8f0e-1daa67573970\",\"children\":[],\"zIndex\":79}],\"zIndex\":78},{\"html\":\"其他类型转换为字符串\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"a0495c36-69de-4b76-a2f2-05735f90994b\",\"children\":[{\"html\":\"1.一般都是直接“”包起来\",\"id\":\"6bbcb805-20b8-4881-b225-7f03b808ad19\",\"children\":[],\"zIndex\":89},{\"html\":\"2.只有{}普通对象toString()是调取的<span style=\\\"color:rgb(119, 195, 134);\\\">Object.prototype.toString()</span>，但它不是转换为字符串，而是<span style=\\\"color:rgb(119, 195, 134);\\\">数据类型检测</span>，返回结果是[object Object]。（<span style=\\\"color:rgb(119, 195, 134);\\\">其他对象也是可以调用的</span>）\",\"id\":\"29248173-b7d4-48f9-a477-c22f892f94a8\",\"children\":[],\"zIndex\":90}],\"zIndex\":88},{\"html\":\"==\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"3a0ae834-99b4-4d65-b308-29a9f9d396e4\",\"children\":[{\"html\":\"1.类型一样\",\"id\":\"0d83de72-b844-41cb-8ed4-b905b5e7ac6a\",\"children\":[{\"html\":\"对象比较的是堆内存的地址\",\"id\":\"cb0f32b7-8ee0-4f53-844b-563ba4af1f8f\",\"children\":[],\"zIndex\":83},{\"html\":\"NaN == NaN&nbsp; =&gt; false\",\"id\":\"0c07dbd7-8b9b-4f71-995d-e68cb0e8265b\",\"children\":[],\"zIndex\":84}],\"zIndex\":81},{\"html\":\"2.类型不一样（会隐式转换为相同的数据类型）\",\"id\":\"783b255e-2264-4e1f-9135-26f9e717c368\",\"children\":[{\"html\":\"1.null==undefined =&gt; true<div>但是换成===结果是false（因为类型不一致）</div><div>剩下的null/undefined和其他任何数据类型值都不相等</div>\",\"id\":\"2014e91c-93da-4093-a4b2-06e6fb0392b7\",\"children\":[],\"zIndex\":85},{\"html\":\"2.字符串==对象&nbsp; 要把对象转换为字符串\",\"id\":\"0514b91b-c0e7-4b26-9999-578024efa867\",\"children\":[],\"zIndex\":86},{\"html\":\"3.剩下的如果==两边数据类型不一致，都是需要转换为Number再进行比较的\",\"id\":\"91ca760f-1084-41be-9a78-cfccef4a8e29\",\"children\":[],\"zIndex\":87}],\"zIndex\":82}],\"zIndex\":80}],\"zIndex\":103},{\"id\":\"dd04bed1-67c3-41ca-b7ec-81e3e85752a0\",\"x\":2014.1738538982459,\"y\":-2910.0035004548354,\"html\":\"parseInt的处理规则\",\"type\":\"mindmap\",\"children\":[{\"html\":\"parseInt([value], [radix])\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"59868e0a-450b-4550-9d9c-b4102ebb61fe\",\"children\":[],\"zIndex\":104},{\"html\":\"radix是一个进制，不写或者写0默认都按照10进制处理。<div>特殊情况：如果value是以0x开头，则默认值不是10而是16</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"fa5efc41-dbc6-4d15-a0f5-12f0a671ac8a\",\"children\":[],\"zIndex\":105},{\"html\":\"radix有取值范围：2～36。如果不在这个区间，则会返回NaN。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6de683ab-9dc0-4e95-a147-a740ce9985ab\",\"children\":[],\"zIndex\":106},{\"html\":\"作用：把[value]看作[radix]机制，最后把[radix]进制的值转换为十机制。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"1cc2600e-69b7-47ab-9364-dac8c9cf3299\",\"children\":[],\"zIndex\":107},{\"html\":\"执行过程：<div>1.从左向右开始查找[value]中的有效的[radix]进制值，遇到不是有效的立即停止；如果没有找到，则返回NaN。</div><div>2.把查找到的结果转为数字，再把它作为[radix]进制转为十进制。</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"2899be55-c677-4828-9185-023cb9ffc7f4\",\"children\":[],\"zIndex\":110},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"ed6dfe5d-d14d-4e0e-b5a1-b3ad3dc15004\",\"children\":[{\"html\":\"把一个任意进制的值转换为十进制值：<div>(每个位的数*进制^位权值)的和</div><div>位权值：个位从0开始，依次增1；小数点后面的从-1开始，依次减一。</div>\",\"id\":\"ada36261-f187-4582-854b-b1c80f6e5ecc\",\"children\":[],\"zIndex\":109}],\"zIndex\":108}],\"zIndex\":111},{\"id\":\"586fbcfd-1ba9-4b27-9e5f-05a2c4141ae1\",\"x\":2867.8799493504434,\"y\":-2914.512275969836,\"html\":\"变量提升的处理机制\",\"type\":\"mindmap\",\"children\":[{\"html\":\"ES3+：在当前上下文中，JS代码执行之前，浏览器会提前（词法解析的时候）把当前上下文中所有<span style=\\\"color:rgb(228, 130, 212);\\\">带var/function</span>关键字的进行提前的声明或者定义。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"bea45252-ed7b-4ef0-aa34-5c365b92a17f\",\"children\":[],\"zIndex\":112},{\"html\":\"带var声明的变量只提前声明不定义\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"80bb52ec-0274-4b57-bdb2-d8672450a41e\",\"children\":[],\"zIndex\":113},{\"html\":\"函数会提前声明和定义\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"3817f40f-3bdd-4100-8ada-24b38630b4d9\",\"children\":[{\"html\":\"真实项目中建议用函数表达式创建函数，因为这样在变量提升阶段只会声明function，更严谨。\",\"id\":\"b85b09ed-7429-4583-85d5-7ef6dc3f18e1\",\"children\":[],\"zIndex\":117},{\"html\":\"在使用函数表达式创建函数时，一般要把匿名函数具名化。<div>当函数执行，在形成的私有上下文中，会把这个具名化的名字作为变量，值就是这个函数来进行处理。这样做的好处是：<span style=\\\"color:rgb(105, 177, 228);\\\">弥补了在严格模式下不能使用argments.calle调用当前函数。</span></div>\",\"id\":\"ad4c93ca-3165-4625-b3e4-685c8887deed\",\"children\":[],\"zIndex\":118}],\"zIndex\":114},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"e1eff868-9732-417c-84e0-9fd855f74a84\",\"children\":[{\"html\":\"1.基于“var或function”在“全局上下文”中声明的变量（全局变量）会映射到GO（全局对象window）上一份，作为它的属性；而且是同时修改的。\",\"id\":\"4ec71694-0351-4751-b574-34fe7b571446\",\"children\":[],\"zIndex\":116},{\"html\":\"<div>2.不论条件成立，都要进行变量提升<div>当条件中带有var/function时，</div></div><div>老版中会将函数提前声明并且定义</div><div>新版中只会将函数提前声明</div><div>var也会提前声明不定义</div>\",\"id\":\"a599d7d9-4439-4a3b-b71d-2f76ed26c85c\",\"children\":[],\"zIndex\":119}],\"zIndex\":115}],\"zIndex\":120},{\"id\":\"1dca2046-8497-4f05-b115-81852f0b7fac\",\"x\":3046.242779214603,\"y\":-1647.7008922638222,\"html\":\"闭包\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.函数运行的一种机制：形成一个不被释放的上下文\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"265c167d-a0dc-42c9-b4f6-5ec76d1bda90\",\"children\":[],\"zIndex\":121},{\"html\":\"2.函数执行会形成一个私有上下文EC(FN)，如果上下文中的某些内容(一般指的是堆内存地址)被上下文以外的事物(例如：变量/事件绑定等)所占用，则当前上下文不能被出栈释放(浏览器的垃圾回收机制GC所决定的)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"858dd510-bb77-4e40-891d-4543e5031ff9\",\"children\":[],\"zIndex\":122},{\"html\":\"特点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"af8477d5-4ebf-498f-87e7-9d4e574765e7\",\"children\":[{\"html\":\"保护：保护私有上下文中的“私有变量”和外界互不影响\",\"id\":\"54f34d37-1785-4f9b-a05f-d4169e6ace5b\",\"children\":[],\"zIndex\":124},{\"html\":\"保存：上下文不被释放，那么上下文中的“私有变量”和“值”都会被保存起来，可以供其下级上下文中使用。\",\"id\":\"20380cab-e226-452f-aded-1f195727dcf5\",\"children\":[],\"zIndex\":125}],\"zIndex\":123},{\"html\":\"弊端：如果大量使用闭包，会导致内存溢出或内存泄露。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"827aa6af-6e47-4ec9-a0d3-52764b48eaa3\",\"children\":[],\"zIndex\":126},{\"html\":\"应用场景\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"b46cbfda-ffd7-4ff0-8641-1e430f653486\",\"children\":[{\"html\":\"1.循环事件绑定的N中解决办法\",\"id\":\"819a137a-9a3b-446f-b013-85fe69930b4a\",\"children\":[{\"html\":\"1.利用闭包，创建私有上下文<div>性能不好</div>\",\"id\":\"153fdb2d-542e-4989-9b1f-d36498b940a3\",\"children\":[{\"html\":\"自执行函数function包起来\",\"id\":\"8f6e67f1-0491-44f2-9188-a4e18e2721df\",\"children\":[],\"zIndex\":130},{\"html\":\"let\",\"id\":\"ce886cba-ba2c-4a85-9cd6-951884e9e0a7\",\"children\":[],\"zIndex\":131}],\"zIndex\":129},{\"html\":\"2.自定义属性(与闭包无关)<div>性能好</div>\",\"id\":\"59bbd6b3-67f7-40dd-baa0-38bc1368d074\",\"children\":[],\"zIndex\":132},{\"html\":\"3.事件委托（它们都有一个共同的父元素，冒泡）<div>性能提升40%～60%</div>\",\"id\":\"1c10e55e-cbc9-48b0-b865-d663b2f02159\",\"children\":[],\"zIndex\":133}],\"zIndex\":128}],\"zIndex\":127}],\"zIndex\":134},{\"id\":\"6b5c2568-7f4e-458c-8a4e-4a6eb593dc1c\",\"x\":1976.33793831011,\"y\":-778.975022658044,\"html\":\"JS中声明变量\",\"type\":\"mindmap\",\"children\":[{\"html\":\"传统：var function\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"79f3c1d1-e2bb-4350-8adb-7dd486ce3000\",\"children\":[{\"html\":\"带var的只是提前声明\",\"id\":\"44efc85a-7c90-4463-bb32-3e1cb5c1fec2\",\"children\":[],\"zIndex\":142},{\"html\":\"带function的是声明+定义\",\"id\":\"eff77c0d-9251-4126-ba0c-526ff0bd036d\",\"children\":[],\"zIndex\":143}],\"zIndex\":135},{\"html\":\"ES6+\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"d0339732-669e-4979-a8eb-4e63b94a833e\",\"children\":[{\"html\":\"ES5 - ES2011&nbsp;<div>ES6 - ES2015&nbsp;</div><div>ES2016&nbsp;</div><div>ES2017&nbsp;</div><div>...</div>\",\"id\":\"f7ebf72c-9b6a-4b39-a018-caaa30578fd9\",\"children\":[],\"zIndex\":138},{\"html\":\"let\",\"id\":\"8b58615c-51b7-481b-8b19-0fd6d0e99359\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">声明的变量可以改变引用指向</span>\",\"id\":\"d25f6d89-3223-48fb-871b-a0534862f5a8\",\"children\":[],\"zIndex\":139}],\"zIndex\":137},{\"html\":\"const\",\"id\":\"4c97cef8-2c21-487f-a618-86b66e72d4b1\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">声明的变量不可以改变引用指向</span>，他声明的值叫常量\",\"id\":\"b75c0670-4aa5-401d-ba99-c433d751dd84\",\"children\":[],\"zIndex\":141}],\"zIndex\":140}],\"zIndex\":136},{\"html\":\"let VS var\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"9bdc1d9f-84f4-432a-bad3-ae0e855faf5a\",\"children\":[{\"html\":\"1.var存在变量提升，而let不存在\",\"id\":\"a54ea328-0408-4ead-8550-2e91fda0a894\",\"children\":[],\"zIndex\":145},{\"html\":\"<span style=\\\"color:rgb(228, 132, 132);\\\">2.</span><span style=\\\"color:rgb(228, 132, 132);\\\">【旧版】“全局上下文EC(G)”中，基于var/function声明的变量，也相当于给GO全局对象(window)新增一个属性，并且任何一个发生值的改变，另一个也会跟着改变（映射机制）；</span><div><span style=\\\"color:rgb(228, 132, 132);\\\">【新版】</span><span style=\\\"color:rgb(228, 132, 132);\\\">“全局上下文EC(G)”中，基于var/function声明的变量，只是给全局对象GO设置一个属性；</span><span style=\\\"color:rgb(228, 132, 132);\\\"><br></span><div><span style=\\\"color:rgb(105, 177, 228);\\\">但是基于lei声明的变量，就是全局变量，和GO没有任何的关系。</span></div></div>\",\"id\":\"fa1140b4-9b3b-427a-979d-9e9468dd463a\",\"children\":[{\"html\":\"没有基于任何关键词声明的变量，则相当于给全局对象设置一个属性\",\"id\":\"260a8569-e788-4e8e-bd3d-57769f47b5fc\",\"children\":[],\"zIndex\":147}],\"zIndex\":146},{\"html\":\"3.在相同的上下文中，let不允许重复声明，如果重复声明会报错(词法分析阶段)；而var可以重复声明，浏览器只按声明一次处理\",\"id\":\"ec9744ae-5847-4e74-944a-b2d9efc23767\",\"children\":[],\"zIndex\":148,\"layout\":{\"quadrant\":1}},{\"html\":\"<span style=\\\"color:rgb(105, 177, 228); font-weight:bold;\\\">4.let/const/function会产生块级私有上下文，而var是不会的</span>\",\"id\":\"a7f7fd3c-eb17-4bfc-96a8-dd4ac895b29a\",\"children\":[],\"zIndex\":153}],\"zIndex\":144},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"99b5f488-cb43-482f-aeb7-1ca4971c736f\",\"children\":[{\"html\":\"词法分析：浏览在执行代码之前，会先把代码解析为浏览器能识别的事物\",\"id\":\"c3395f6b-239b-4543-a913-e39d51a9047a\",\"children\":[],\"zIndex\":150},{\"html\":\"暂时性死区（浏览器暂存的BUG）\",\"id\":\"1b8ab318-1a57-4931-80a9-ba43545b266b\",\"children\":[{\"html\":\"1.基于typeof检测一个未被声明的变量，不会报错，结果是undefined\",\"id\":\"e0e9bbe0-9a2a-461c-bb38-f344dbffc213\",\"children\":[],\"zIndex\":152}],\"zIndex\":151},{\"html\":\"上下文 &amp; 作用域\",\"id\":\"259b605d-7f32-468f-af9b-dc230c4d71a3\",\"children\":[{\"html\":\"全局上下文\",\"id\":\"60fe1681-c8d2-4032-8e05-146e49efa764\",\"children\":[],\"zIndex\":155},{\"html\":\"函数执行形成的“私有上下文”\",\"id\":\"8ad7ba5d-dc97-4fe9-a512-3d7b7d43772a\",\"children\":[],\"zIndex\":156},{\"html\":\"块级作用域（块级私有上下文）\",\"id\":\"33fb2c1b-cc40-4c65-87b9-339e88247ca3\",\"children\":[{\"html\":\"除了对象、函数等的大括号除外（例如：判断体、循环体、代码块...）都有可能会产生块级上下文\",\"id\":\"d7365bba-ac65-47d5-92f3-5fdf50471eee\",\"children\":[],\"zIndex\":158}],\"zIndex\":157}],\"zIndex\":154}],\"zIndex\":149}],\"zIndex\":159},{\"id\":\"2b6647d5-7501-40c7-b24a-2af42d4f1d80\",\"x\":3224.4260039219885,\"y\":-752.6815219819359,\"html\":\"块级上下文\",\"type\":\"mindmap\",\"children\":[{\"html\":\"除函数/对象的大括号外，在其他的大括号中出现let/const/function 则会单独形成块级私有上下文\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"2463084f-5d6f-4afc-81c9-48c143726c2f\",\"children\":[],\"zIndex\":160}],\"zIndex\":161},{\"id\":\"97ab8408-d69f-4080-ac0f-3eaaa781ae45\",\"x\":3223.5822818981683,\"y\":-598.6400544426056,\"html\":\"函数形参默认值\",\"type\":\"mindmap\",\"children\":[{\"html\":\"如果函数应用了形参默认值，并且在函数体中出现了基于var/let/const声明变量的方式，这样除了函数执行，会产生一个私有的上下文之外，还会把函数体及其中的代码当做一个全新的块级上下文。如果这个块级上下文中的变量和函数私有上下文中的变量一致了，则会在块级上下文初始化之前，会把形参变量的值同步给块级上下文中的变量\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"9c8f2b7e-56c2-47a1-b9df-e85c35da883e\",\"children\":[],\"zIndex\":162}],\"zIndex\":163},{\"id\":\"d5954e00-aacc-43cc-9eb2-c6294ca7aa46\",\"x\":2013.3631825544453,\"y\":-4147.225387630226,\"html\":\"闭包剧本🌟\",\"type\":\"mindmap\",\"children\":[{\"html\":\"引言：就像人需要氧气才能生存，闭包也需要在特定的环境下才能存在，闭包携带了它自己的“氧气罐”（引用了当前作用域以外的其他作用域上下文），所以它才存活下来（使上下文不会消失）。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"fcdf01ae-8066-4dbe-a424-c00f59dc280a\",\"children\":[],\"zIndex\":175},{\"html\":\"基本介绍: ECStack、EC、VO、AO、GO、SCOPE、SCOPE-CHAIN、GC\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"60b7c46c-ca7f-4b3f-9396-2db05c8e1e5e\",\"children\":[],\"zIndex\":164},{\"html\":\"优缺点：保存和保护、性能消耗（内存泄漏）\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"cb29cf10-c1b0-487b-bb90-93af243dde80\",\"children\":[],\"zIndex\":165},{\"html\":\"实战应用\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"8587ed97-be45-46bc-bd35-8f9d9dbbe64d\",\"children\":[{\"html\":\"项目实战应用：循环事件绑定(突出：事件委托)、let和var\",\"id\":\"69d08b2c-6ab1-4a9f-bade-bf8efb909bf0\",\"children\":[],\"zIndex\":167},{\"html\":\"插件组件应用：JS高阶编程技巧(单例设计模式、惰性函数、柯理化函数、compose组合函数)\",\"id\":\"efaa7f8c-3eeb-49f1-84bb-a88b621ba442\",\"children\":[],\"zIndex\":168},{\"html\":\"源码阅读应用：Lodash源码(函数的防抖和节流)、JQ的源码、redux、react-redux(高阶组件)...\",\"id\":\"6112fd30-eb39-4da2-8ee3-a4d4baee36b3\",\"children\":[],\"zIndex\":169},{\"html\":\"...\",\"id\":\"c0812e77-5a30-4ab8-b565-ebb7d6253ac9\",\"children\":[],\"zIndex\":170}],\"zIndex\":166},{\"html\":\"自己的思想和理解(一句话概括)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"5afc0a83-0a2b-4cdd-b605-a16141839cba\",\"children\":[{\"html\":\"其实我觉得闭包这个东西还是很重要的\",\"id\":\"d7e2dffd-8111-4ecd-b022-83b31b0e2905\",\"children\":[],\"zIndex\":172}],\"zIndex\":171},{\"html\":\"小技巧\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"89d878f9-c202-4d02-b648-3a3b62c6772b\",\"children\":[{\"html\":\"担心自己表达能力：可以自己写一遍文章，详细的介绍闭包（面试的时候，给面试官看，它边看你边简单说一些）\",\"id\":\"9428a725-67c5-40f8-9f24-aba604e164b2\",\"children\":[],\"zIndex\":174}],\"zIndex\":173}],\"zIndex\":176,\"tapered\":false},{\"id\":\"6c0e58ca-1a82-4e47-949e-087c354b99ad\",\"x\":2894.570608794177,\"y\":-4162.194456348563,\"html\":\"简述let和var的区别\",\"type\":\"mindmap\",\"zIndex\":177}]},\"viewportSetting\":{\"zoom\":0.9529882937207227,\"tlCanvasPoint\":[1970.3826987555492,-4590.259820030305,1],\"width\":1040,\"height\":898},\"text\":\"数据类型基本类型numberstringundefinednullbooleansymbol引用类型objectarray...functionJS代码执行1.游览器会在内存中开辟一块栈内存，全局上下文（环境），也叫ECStack。2.然后形成全局执行上下文EC(G)（默认就是window/global）供代码执行。创建函数1.单独开辟一个堆内存（16进制地址），函数堆内存中存储的是函数体中的“代码字符串”。2.创建函数的时候，就声明了它的作用域[scope]，也就是所在的上下文环境。3.把16进制的地址存放到栈中，供变量（函数名等）关联引用即可函数执行1.形成一个全新的，私有的上下文EC(...)2.当前私有的上下文中，有一个存放本上下文内声明的变量的地方AO(...)私有变量对象 -> 这里的变量都是当前上下文内的私有变量(当前上下文中声明的变量，形参变量)3.进栈执行4.代码执行之前还要处理很多事情1.初始化作用域链[scope-chain]: <当前自己的上下文，上级上下文(创建函数时形成的作用域)>当前函数的上级上下文是创建函数所在的上下文（作用域）后期函数内代码执行，遇到一个变量，我们首先看是否为自己上下文中的私有变量（看AO中有没有），如果是私有的变量，则当前变量的操作和外界环境中的变量互不干扰（没有直接关系）；如果不是自己的私有变量，则按照作用域链，查找是否为其上级上下文中的私有变量...直到找到EC(G)全局上下文为止 作用域链查找机制2.初始化this...3.初始化arguments...4.形参赋值形参都是私有变量（放到AO中的）如果不传递实参值，默认值是undefined5.变量提升5.代码自上而下执行6.一般情况下， 函数进栈执行的上下文，进栈执行完成后，会默认出栈释放掉（私有上下文中存储的私有变量和一些值都会被释放掉） -> 目的：为了优化内存空间，减少栈内存的消耗，提高页面或者计算机的处理速度...GC：游览器的垃圾回收机制（内存管理）谷歌：基于查找引用游览器的渲染引擎会在空闲的时候（定期一个时间），依次遍历所有的内存：栈/堆堆：当前内存如果被占用（指针关联地址），则不能释放；如果没有任何的事物占用这个堆，则游览器会自动把这个堆内存释放掉。栈：当前上下文中是否有内容（一般是堆内存）被上下文以外的事物所占用，如果被占用则无法释放（闭包），如果没有被占用则释放掉。EC(G)是加载页面的时候创建，只有关闭页面的时候才会被释放。主动释放：把占用的事物手动赋值为null（其余的值也可以，但是null更好，null不占空间的），可以实现内存的手动优化this函数的执行主体（不等价于执行上下文/作用域）：谁把这个函数执行的在游览器端运行JS代码，非函数中的this一般都是window；研究this都是研究函数中的this；有一个特殊的，就是ES6+中“块级上下文”中的this，是其所在上下文中的this（理解为：块级上下文是没有自己this的）；想要分清楚函数执行的执行主体(this)，可以按照如下的规律来分析事件绑定当前元素本身普通函数执行看函数前面是否有点，点前面是谁this就是谁没有点就是window/undefiend(严格模式)自执行函数中的this一般都是window/undefined(严格模式)回调函数中的this一般也是window/undefined(严格模式)，除非做过特殊处理括号包起来的函数执行：如果括号中只有一项，就相当于没有括号；如果括号中有很多项，this就是最后一项     (obj.fn)() -> obj     (a, b, obj.fn)() -> obj构造函数执行所属类的实例箭头函数执行它的上级上下文基于call/apply/bind强制改变this高阶编程技巧利用闭包的机制，实现出来的一些高阶编程方式高级单例设计模式早期的模块化设计思想闭包+单例一个对象就是一个单例模式基于闭包的“保护作用”，防止了全局变量污染惰性函数获取元素样式的小知识点1.dom.style只有获取元素的内联样式2.getComputedStyle  IE6~8不兼容获取经过浏览器计算的样式（返回样式对象）惰性思想：干一次可以搞定的，绝对不去做第二次函数柯理化预先处理的思想形成一个不被释放的闭包，把一些信息储存起来，以后基于作用域链，访问到事先储存的信息，然后进行相关的处理。小知识点命令式编程自己编写代码，管控运行的步骤和逻辑（自己可以灵活掌控执行步骤）函数式编程具体实现的步骤已经被封装成方法，我们只需要调用方法获取结果即可，无需关注怎么实现的，用起来方便，代码量减少弊端：灵活性差curryingcompose数据类型转换其他类型转换为Number能用的办法parseInt/parseFloat([val])把要转换值先转换为字符串从字符串左侧的第一位开始查找有效数字字符，遇到非有效字符串则立即停止，最后把有效的数字字符串转为数字，如果没有则返回NaNNumber只要出现非有效数字字符结果都是NaNNumber(undefined) 是 NaN对象转为数字，应该先valueOf，没有原始值再toString，最后再把字符串转为数字隐式转换（游览器内部默认是先转换为Number再进行计算的）isNaN([val])数学运算在==比较的时候（见== ：2.3）其他类型转换为Boolean只有“0、NaN、null、undefined、空字符串”五个值会变为布尔的FALSE，其余都是TRUE其他类型转换为字符串1.一般都是直接“”包起来2.只有{}普通对象toString()是调取的Object.prototype.toString()，但它不是转换为字符串，而是数据类型检测，返回结果是[object Object]。（其他对象也是可以调用的）==1.类型一样对象比较的是堆内存的地址NaN == NaN  => false2.类型不一样（会隐式转换为相同的数据类型）1.null==undefined => true但是换成===结果是false（因为类型不一致）剩下的null/undefined和其他任何数据类型值都不相等2.字符串==对象  要把对象转换为字符串3.剩下的如果==两边数据类型不一致，都是需要转换为Number再进行比较的parseInt的处理规则parseInt([value], [radix])radix是一个进制，不写或者写0默认都按照10进制处理。特殊情况：如果value是以0x开头，则默认值不是10而是16radix有取值范围：2～36。如果不在这个区间，则会返回NaN。作用：把[value]看作[radix]机制，最后把[radix]进制的值转换为十机制。执行过程：1.从左向右开始查找[value]中的有效的[radix]进制值，遇到不是有效的立即停止；如果没有找到，则返回NaN。2.把查找到的结果转为数字，再把它作为[radix]进制转为十进制。小知识点把一个任意进制的值转换为十进制值：(每个位的数*进制^位权值)的和位权值：个位从0开始，依次增1；小数点后面的从-1开始，依次减一。变量提升的处理机制ES3+：在当前上下文中，JS代码执行之前，浏览器会提前（词法解析的时候）把当前上下文中所有带var/function关键字的进行提前的声明或者定义。带var声明的变量只提前声明不定义函数会提前声明和定义真实项目中建议用函数表达式创建函数，因为这样在变量提升阶段只会声明function，更严谨。在使用函数表达式创建函数时，一般要把匿名函数具名化。当函数执行，在形成的私有上下文中，会把这个具名化的名字作为变量，值就是这个函数来进行处理。这样做的好处是：弥补了在严格模式下不能使用argments.calle调用当前函数。小知识点1.基于“var或function”在“全局上下文”中声明的变量（全局变量）会映射到GO（全局对象window）上一份，作为它的属性；而且是同时修改的。2.不论条件成立，都要进行变量提升当条件中带有var/function时，老版中会将函数提前声明并且定义新版中只会将函数提前声明var也会提前声明不定义闭包1.函数运行的一种机制：形成一个不被释放的上下文2.函数执行会形成一个私有上下文EC(FN)，如果上下文中的某些内容(一般指的是堆内存地址)被上下文以外的事物(例如：变量/事件绑定等)所占用，则当前上下文不能被出栈释放(浏览器的垃圾回收机制GC所决定的)特点保护：保护私有上下文中的“私有变量”和外界互不影响保存：上下文不被释放，那么上下文中的“私有变量”和“值”都会被保存起来，可以供其下级上下文中使用。弊端：如果大量使用闭包，会导致内存溢出或内存泄露。应用场景1.循环事件绑定的N中解决办法1.利用闭包，创建私有上下文性能不好自执行函数function包起来let2.自定义属性(与闭包无关)性能好3.事件委托（它们都有一个共同的父元素，冒泡）性能提升40%～60%JS中声明变量传统：var function带var的只是提前声明带function的是声明+定义ES6+ES5 - ES2011 ES6 - ES2015 ES2016 ES2017 ...let声明的变量可以改变引用指向const声明的变量不可以改变引用指向，他声明的值叫常量let VS var1.var存在变量提升，而let不存在2.【旧版】“全局上下文EC(G)”中，基于var/function声明的变量，也相当于给GO全局对象(window)新增一个属性，并且任何一个发生值的改变，另一个也会跟着改变（映射机制）；【新版】“全局上下文EC(G)”中，基于var/function声明的变量，只是给全局对象GO设置一个属性；但是基于lei声明的变量，就是全局变量，和GO没有任何的关系。没有基于任何关键词声明的变量，则相当于给全局对象设置一个属性3.在相同的上下文中，let不允许重复声明，如果重复声明会报错(词法分析阶段)；而var可以重复声明，浏览器只按声明一次处理4.let/const/function会产生块级私有上下文，而var是不会的小知识点词法分析：浏览在执行代码之前，会先把代码解析为浏览器能识别的事物暂时性死区（浏览器暂存的BUG）1.基于typeof检测一个未被声明的变量，不会报错，结果是undefined上下文 & 作用域全局上下文函数执行形成的“私有上下文”块级作用域（块级私有上下文）除了对象、函数等的大括号除外（例如：判断体、循环体、代码块...）都有可能会产生块级上下文块级上下文除函数/对象的大括号外，在其他的大括号中出现let/const/function 则会单独形成块级私有上下文函数形参默认值如果函数应用了形参默认值，并且在函数体中出现了基于var/let/const声明变量的方式，这样除了函数执行，会产生一个私有的上下文之外，还会把函数体及其中的代码当做一个全新的块级上下文。如果这个块级上下文中的变量和函数私有上下文中的变量一致了，则会在块级上下文初始化之前，会把形参变量的值同步给块级上下文中的变量闭包剧本🌟引言：就像人需要氧气才能生存，闭包也需要在特定的环境下才能存在，闭包携带了它自己的“氧气罐”（引用了当前作用域以外的其他作用域上下文），所以它才存活下来（使上下文不会消失）。基本介绍: ECStack、EC、VO、AO、GO、SCOPE、SCOPE-CHAIN、GC优缺点：保存和保护、性能消耗（内存泄漏）实战应用项目实战应用：循环事件绑定(突出：事件委托)、let和var插件组件应用：JS高阶编程技巧(单例设计模式、惰性函数、柯理化函数、compose组合函数)源码阅读应用：Lodash源码(函数的防抖和节流)、JQ的源码、redux、react-redux(高阶组件)......自己的思想和理解(一句话概括)其实我觉得闭包这个东西还是很重要的小技巧担心自己表达能力：可以自己写一遍文章，详细的介绍闭包（面试的时候，给面试官看，它边看你边简单说一些）简述let和var的区别\"}",
    "body_draft": "{\"format\":\"lakemind\",\"type\":\"Mind\",\"version\":\"1.0\",\"diagramData\":{\"head\":{\"version\":\"2.0.0\"},\"body\":[{\"id\":\"init\",\"type\":\"mindmap\",\"html\":\"数据类型\",\"children\":[{\"html\":\"基本类型\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"f1b51e22-5556-41c2-8bdf-f900a8c5cf6f\",\"children\":[{\"html\":\"number\",\"id\":\"3c85803e-2ab1-47d3-93e4-34e924d6d361\",\"children\":[],\"zIndex\":2},{\"html\":\"string\",\"id\":\"0714922a-cb2e-4e85-ba85-d73c7bafc728\",\"children\":[],\"zIndex\":3},{\"html\":\"undefined\",\"id\":\"42f4fa35-8257-402a-ae08-12ea56d761ee\",\"children\":[],\"zIndex\":4},{\"html\":\"null\",\"id\":\"bee1c28d-be83-4edf-af03-08b8dd29d91e\",\"children\":[],\"zIndex\":5},{\"html\":\"boolean\",\"id\":\"c5ae2d7f-12b8-4379-a4ea-7679e6f99b6f\",\"children\":[],\"zIndex\":9},{\"html\":\"symbol\",\"id\":\"b326de10-646c-48e5-985e-32744066f033\",\"children\":[],\"zIndex\":6}],\"zIndex\":0},{\"html\":\"引用类型\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"1a581807-35a4-47d7-bfe1-cf8f93e51df8\",\"children\":[{\"html\":\"object\",\"id\":\"aae01172-12c8-4c6a-8da9-dae7ff8f1997\",\"children\":[{\"html\":\"array\",\"id\":\"abdcf0cb-edc5-40ce-913c-86c1b24bceec\",\"children\":[],\"zIndex\":10},{\"html\":\"...\",\"id\":\"6d40973b-4f4b-4c09-90b8-c7046fbdbf13\",\"children\":[],\"zIndex\":11}],\"zIndex\":7},{\"html\":\"function\",\"id\":\"f5803c67-eec6-4f23-82b7-0a3da47141e8\",\"children\":[],\"zIndex\":8}],\"zIndex\":1}],\"zIndex\":12,\"x\":2024.4623834304057,\"y\":-3472.70048927316,\"border\":{\"shape\":\"rect\",\"stroke\":\"transparent\"}},{\"id\":\"fc99eff4-03ef-4955-9ac3-c3dd0fc2e483\",\"x\":2003.6096233018084,\"y\":-2194.5299924160363,\"html\":\"JS代码执行\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.游览器会在内存中开辟一块栈内存，全局上下文（环境），也叫ECStack。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"733f2abd-2dc1-4e82-a9cc-25b7be0d2ef7\",\"children\":[{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"id\":\"a40eafd0-87de-4158-b9c7-9f35fdb611c3\",\"children\":[{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"id\":\"a78d3f71-b03d-4d09-82f2-5bbf0bd07162\",\"children\":[],\"zIndex\":16,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604060996415-32302ab3-f32b-4e45-9ead-6ac9698e07ab.png\",\"naturalWidth\":700,\"naturalHeight\":504,\"width\":283,\"height\":203.76000000000002},\"width\":299,\"height\":216}],\"zIndex\":15,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604059782703-5690a93e-e8c8-4593-95d1-e68ab4bee13b.png\",\"naturalWidth\":589,\"naturalHeight\":479,\"width\":206,\"height\":167.52801358234296},\"border\":{\"shape\":\"line\",\"stroke\":\"transparent\"},\"width\":222,\"height\":187.52801358234296}],\"zIndex\":13,\"border\":{\"shape\":\"line\",\"stroke\":\"transparent\"}},{\"html\":\"2.然后形成全局执行上下文EC(G)（默认就是window/global）供代码执行。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"cde0a14e-ccf0-40d0-8e05-0ccb4d1868f4\",\"children\":[],\"zIndex\":14}],\"zIndex\":17},{\"id\":\"129c5c0c-ad88-4e63-9320-a350ee1f58df\",\"x\":3374.297353377579,\"y\":-2207.5561578019106,\"html\":\"创建函数\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.单独开辟一个堆内存（16进制地址），函数堆内存中存储的是函数体中的“代码字符串”。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"5859bc97-b0cc-4727-809e-482555f526ce\",\"children\":[],\"zIndex\":18},{\"html\":\"2.创建函数的时候，就声明了它的作用域[scope]，也就是所在的上下文环境。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"a151950e-08f2-436f-ba60-896f20e404f9\",\"children\":[],\"zIndex\":19},{\"html\":\"3.把16进制的地址存放到栈中，供变量（函数名等）关联引用即可\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6596c13c-9913-405a-b5d5-efa629c25397\",\"children\":[],\"zIndex\":20},{\"html\":\"<div style=\\\"text-align:center;\\\"></div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"14419622-89b2-404d-96bb-6122e3cd7723\",\"children\":[],\"zIndex\":21,\"image\":{\"src\":\"https://cdn.nlark.com/yuque/0/2020/png/1429353/1604062395688-a40f493f-f76f-4dcd-83e0-a3eddcbbc1f0.png\",\"naturalWidth\":463,\"naturalHeight\":281,\"width\":463,\"height\":281}}],\"zIndex\":22},{\"id\":\"ea92f014-dfb7-4bc5-9fec-3e2a2d3219a6\",\"x\":1991.010600069691,\"y\":-1629.5675587544767,\"html\":\"函数执行\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.形成一个全新的，私有的上下文EC(...)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"27859533-85ab-45c2-9635-0fa167fe12d4\",\"children\":[],\"zIndex\":23},{\"html\":\"2.当前私有的上下文中，有一个存放本上下文内声明的变量的地方AO(...)<div>私有变量对象 -&gt; 这里的变量都是当前上下文内的私有变量(当前上下文中声明的变量，形参变量)</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"aeb76700-4daf-41bf-ad15-bd81f116a967\",\"children\":[],\"zIndex\":24},{\"html\":\"3.进栈执行\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"dba0e235-fbce-41f5-a599-f92fc2cdd99b\",\"children\":[],\"zIndex\":25},{\"html\":\"4.代码执行之前还要处理很多事情\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"3d19547f-97dd-4f3d-9e85-a27c668ace9e\",\"children\":[{\"html\":\"1.初始化作用域链[scope-chain]:&nbsp;<div>&lt;当前自己的上下文，上级上下文(创建函数时形成的作用域)&gt;</div><div><span style=\\\"color:rgb(89, 89, 89);\\\">当前函数的上级上下文是创建函数所在的上下文（作用域）</span></div><div><span style=\\\"color:rgb(251, 50, 0);\\\">后期函数内代码执行，遇到一个变量，我们首先看是否为自己上下文中的私有变量（看AO中有没有），如果是私有的变量，则当前变量的操作和外界环境中的变量互不干扰（没有直接关系）；如果不是自己的私有变量，则按照作用域链，查找是否为其上级上下文中的私有变量...直到找到EC(G)全局上下文为止 作用域链查找机制</span></div>\",\"id\":\"3192a6da-bc0c-4b2f-bd6a-60b80bf1e611\",\"children\":[],\"zIndex\":27},{\"html\":\"2.初始化this...\",\"id\":\"fc880192-ab33-4a87-94e1-7496dea6d304\",\"children\":[],\"zIndex\":28},{\"html\":\"3.初始化arguments...\",\"id\":\"af0e886b-2f8c-4fd8-9ff5-cdbb6b38ce37\",\"children\":[],\"zIndex\":29},{\"html\":\"4.形参赋值<div>形参都是私有变量（放到AO中的）</div><div>如果不传递实参值，默认值是undefined</div>\",\"id\":\"356f8dcf-856c-469f-937d-feaebdc14b5b\",\"children\":[],\"zIndex\":30},{\"html\":\"5.变量提升\",\"id\":\"ede4a7ea-4ca1-40e4-82fa-fe18dad5266d\",\"children\":[],\"zIndex\":31}],\"zIndex\":26},{\"html\":\"5.代码自上而下执行\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"97df9f13-b220-47dd-b944-78332dd062f7\",\"children\":[],\"zIndex\":32},{\"html\":\"6.一般情况下， 函数进栈执行的上下文，进栈执行完成后，会默认出栈释放掉（私有上下文中存储的私有变量和一些值都会被释放掉） -&gt; 目的：为了优化内存空间，减少栈内存的消耗，提高页面或者计算机的处理速度...\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"499021f1-ad43-47cf-b4fc-d7067ad68161\",\"children\":[],\"zIndex\":33}],\"zIndex\":34},{\"id\":\"bbea95d2-e3d3-4e69-8a4c-86d3a5cd4247\",\"x\":1963.3765434958004,\"y\":82.81621411828132,\"html\":\"GC：游览器的垃圾回收机制（内存管理）\",\"type\":\"mindmap\",\"children\":[{\"html\":\"谷歌：基于查找引用\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"c9e933a5-abac-4736-9646-4da6c8f7d331\",\"children\":[],\"zIndex\":38},{\"html\":\"游览器的渲染引擎会在空闲的时候（定期一个时间），依次遍历所有的内存：栈/堆\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"a552e576-57ab-4670-8cdd-2fd1f47182c8\",\"children\":[],\"zIndex\":35},{\"html\":\"堆：当前内存如果被占用（指针关联地址），则不能释放；如果没有任何的事物占用这个堆，则游览器会自动把这个堆内存释放掉。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"71b45608-3dd0-4147-ac2b-b543e5f7b8c4\",\"children\":[],\"zIndex\":36},{\"html\":\"栈：当前上下文中是否有内容（一般是堆内存）被上下文以外的事物所占用，如果被占用则无法释放（闭包），如果没有被占用则释放掉。<span style=\\\"color:rgb(251, 50, 0);\\\">EC(G)是加载页面的时候创建，只有关闭页面的时候才会被释放。</span>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"83ab9934-e818-4905-a27b-4830dcf9f399\",\"children\":[],\"zIndex\":37},{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">主动释放：把占用的事物手动赋值为null（其余的值也可以，但是null更好，null不占空间的），可以实现内存的手动优化</span>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"7f65522e-b320-4d09-b515-d6946c6b49e5\",\"children\":[],\"zIndex\":39}],\"zIndex\":40},{\"id\":\"cde09247-87b4-4213-8fda-abefc26c8ca4\",\"x\":2917.6565158848593,\"y\":69.40691075334075,\"html\":\"this\",\"type\":\"mindmap\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212); font-weight:bold;\\\">函数的执行主体</span>（不等价于执行上下文/作用域）：谁把这个函数执行的\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"b3412def-d12b-42b0-9e81-b06491748424\",\"children\":[],\"zIndex\":41},{\"html\":\"在游览器端运行JS代码，非函数中的this一般都是window；研究this都是研究函数中的this；有一个特殊的，就是ES6+中“块级上下文”中的this，是其所在上下文中的this（理解为：块级上下文是没有自己this的）；\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"f4099a09-54c3-4ded-a4a4-cd92d7da35ce\",\"children\":[],\"zIndex\":42},{\"html\":\"想要分清楚函数执行的执行主体(this)，可以按照如下的规律来分析\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6caf7a24-5eea-48ab-8863-5a4c7c5f12b5\",\"children\":[{\"html\":\"事件绑定\",\"id\":\"5b615342-4631-45a0-8064-5fca2acb30a2\",\"children\":[{\"html\":\"当前元素本身\",\"id\":\"d7a4240e-86ef-474b-90d7-5824fc7c3f47\",\"children\":[],\"zIndex\":49}],\"zIndex\":44},{\"html\":\"普通函数执行\",\"id\":\"65a6d7ec-7d7c-48b7-bbbb-c0be86de1d6f\",\"children\":[{\"html\":\"看函数前面是否有点，点前面是谁this就是谁\",\"id\":\"a3eda677-65f9-4afc-93ea-d977be9a4484\",\"children\":[],\"zIndex\":50},{\"html\":\"没有点就是window/undefiend(严格模式)\",\"id\":\"5e8a148b-c639-49d9-93b4-59a428f64a06\",\"children\":[],\"zIndex\":51},{\"html\":\"自执行函数中的this一般都是window/undefined(严格模式)\",\"id\":\"f45e3d01-1e3e-42af-82e8-187a938d4af5\",\"children\":[],\"zIndex\":52},{\"html\":\"回调函数中的this一般也是window/undefined(严格模式)，除非做过特殊处理\",\"id\":\"d889cc4d-2c27-4f10-8ab8-3caff342b27b\",\"children\":[],\"zIndex\":53},{\"html\":\"<span style=\\\"color:rgb(107, 45, 98);\\\">括号包起来的函数执行：</span><div><span style=\\\"color:rgb(107, 45, 98);\\\">如果括号中只有一项，就相当于没有括号；</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">如果括号中有很多项，this就是最后一项</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">&nbsp; &nbsp; &nbsp;(obj.fn)() -&gt; obj</span></div><div><span style=\\\"color:rgb(107, 45, 98);\\\">&nbsp; &nbsp; &nbsp;(a, b, obj.fn)() -&gt; obj</span></div>\",\"id\":\"1862b77b-564c-4df1-841b-380e09d76cc6\",\"children\":[],\"zIndex\":54}],\"zIndex\":45},{\"html\":\"构造函数执行\",\"id\":\"4ed6a01a-8c9c-4c9d-86ea-e5b460d27f93\",\"children\":[{\"html\":\"所属类的实例\",\"id\":\"4eeacbf2-bb19-435d-b314-be1175456f54\",\"children\":[],\"zIndex\":56}],\"zIndex\":46},{\"html\":\"箭头函数执行\",\"id\":\"ec859e1e-b16f-464f-bc42-c30fef007884\",\"children\":[{\"html\":\"它的上级上下文\",\"id\":\"f41f3832-532e-4dec-997d-a29b355d8d89\",\"children\":[],\"zIndex\":55}],\"zIndex\":47},{\"html\":\"基于call/apply/bind强制改变this\",\"id\":\"9213fa2d-0097-4666-8672-ef4eaa5e0637\",\"children\":[],\"zIndex\":48}],\"zIndex\":43}],\"zIndex\":57},{\"id\":\"bb33ab1a-a703-4b16-9298-88e1c82463a8\",\"x\":1952.0194459168001,\"y\":714.3310716568769,\"html\":\"高阶编程技巧\",\"type\":\"mindmap\",\"children\":[{\"html\":\"利用闭包的机制，实现出来的一些高阶编程方式\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"3bc71dce-2aa6-48fa-9edf-547ca5ecc3cd\",\"children\":[],\"zIndex\":58},{\"html\":\"高级单例设计模式\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"b1b99533-26bc-4bed-8fb6-93f8037976a3\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(251, 50, 0);\\\">早期的模块化设计思想</span>\",\"id\":\"a9c872d8-b357-418c-a123-7119cfea1f45\",\"children\":[],\"zIndex\":60},{\"html\":\"闭包+单例<div>一个对象就是一个单例模式<br></div>\",\"id\":\"09e4872d-3747-47f6-b2d5-32ddc61e3cfb\",\"children\":[],\"zIndex\":61},{\"html\":\"基于闭包的“保护作用”，防止了全局变量污染\",\"id\":\"bb674be6-14cf-4192-8396-742b230695da\",\"children\":[],\"zIndex\":62}],\"zIndex\":59},{\"html\":\"惰性函数\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"a2524d75-2fa4-4645-ab8c-05a93f75b539\",\"children\":[{\"html\":\"获取元素样式的小知识点\",\"id\":\"496afb35-356c-4cd0-b91c-e17ac07b2f60\",\"children\":[{\"html\":\"1.dom.style<div>只有获取元素的内联样式</div>\",\"id\":\"74840378-e046-413e-953c-bcd7faaed8f2\",\"children\":[],\"zIndex\":65},{\"html\":\"2.getComputedStyle&nbsp; IE6~8不兼容<div>获取经过浏览器计算的样式（返回样式对象）</div>\",\"id\":\"701178cc-bce7-433b-9e36-3a5bd064adf3\",\"children\":[],\"zIndex\":66}],\"zIndex\":64},{\"html\":\"<span style=\\\"color:rgb(105, 177, 228);\\\">惰性思想</span>：干一次可以搞定的，绝对不去做第二次\",\"id\":\"8fb6e374-51db-40c0-9007-4731cdd6bfe7\",\"children\":[],\"zIndex\":67}],\"zIndex\":63},{\"html\":\"函数柯理化\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"6e2cb5ea-036a-47c4-ac8e-5497b4abf02e\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">预先处理的思想</span><div>形成一个不被释放的闭包，把一些信息储存起来，以后基于作用域链，访问到事先储存的信息，然后进行相关的处理。</div>\",\"id\":\"de121d25-3528-4666-84c1-44fa43cc03e4\",\"children\":[],\"zIndex\":69},{\"html\":\"小知识点\",\"id\":\"8823ea03-34ee-4373-a13f-aaa02fdd9f42\",\"children\":[{\"html\":\"命令式编程\",\"id\":\"6ba6485c-6b35-4cb8-90fd-643df71135f9\",\"children\":[{\"html\":\"自己编写代码，管控运行的步骤和逻辑（自己可以灵活掌控执行步骤）\",\"id\":\"772eaa42-519d-477e-bfc2-669f4108e043\",\"children\":[],\"zIndex\":73}],\"zIndex\":71},{\"html\":\"函数式编程\",\"id\":\"ee04ddc8-42f1-4a97-98a6-6006275cf5b3\",\"children\":[{\"html\":\"具体实现的步骤已经被封装成方法，我们只需要调用方法获取结果即可，无需关注怎么实现的，用起来方便，代码量减少<div>弊端：灵活性差</div>\",\"id\":\"3c256491-3f2f-467e-9dea-de8ec44e6b82\",\"children\":[],\"zIndex\":74}],\"zIndex\":72}],\"zIndex\":70},{\"html\":\"currying\",\"id\":\"2c706054-c2cf-4a1b-8789-1b683fe2af8a\",\"children\":[],\"zIndex\":75},{\"html\":\"<span style=\\\"font-weight:bold;\\\">compose</span>\",\"id\":\"65e45b73-c50e-4b6c-bc7e-3cb108c7662e\",\"children\":[],\"zIndex\":76}],\"zIndex\":68}],\"zIndex\":77},{\"id\":\"b98f60f5-dbe8-4268-84f4-155c3118e2b5\",\"x\":2516.363393125918,\"y\":-3481.224978713911,\"html\":\"数据类型转换\",\"type\":\"mindmap\",\"children\":[{\"html\":\"其他类型转换为Number\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"28fef53e-af7c-4747-bb67-d230b5282773\",\"children\":[{\"html\":\"能用的办法\",\"id\":\"466f8305-e6c4-40da-8f93-9b658e6e28d5\",\"children\":[{\"html\":\"parseInt/parseFloat([val])\",\"layout\":{\"quadrant\":1},\"id\":\"76e08162-00ef-4f04-a538-2dc3a55efb93\",\"children\":[{\"html\":\"把要转换值先转换为字符串\",\"id\":\"1b8ab5a7-3a68-401c-b9ac-57d652886add\",\"children\":[],\"zIndex\":102},{\"html\":\"从字符串左侧的第一位开始查找有效数字字符，遇到非有效字符串则立即停止，最后把有效的数字字符串转为数字，如果没有则返回NaN\",\"id\":\"564cda97-5817-4ade-b097-0b95e7498133\",\"children\":[],\"zIndex\":101}],\"zIndex\":93},{\"html\":\"Number\",\"layout\":{\"quadrant\":1},\"id\":\"7ecf1da3-dbf0-41d4-b9c7-86badc9a62f1\",\"children\":[{\"html\":\"只要出现非有效数字字符结果都是NaN<div>Number(undefined) 是 NaN</div>\",\"id\":\"d3142c07-3700-4ea2-ab7d-80454189a4e9\",\"children\":[],\"zIndex\":99},{\"html\":\"对象转为数字，应该先valueOf，没有原始值再toString，最后再把字符串转为数字\",\"id\":\"2cf1b316-9527-4978-9eef-8de1450440db\",\"children\":[],\"zIndex\":100}],\"zIndex\":94}],\"zIndex\":92},{\"html\":\"隐式转换（游览器内部默认是先转换为Number再进行计算的）\",\"id\":\"624c0e8c-0710-4164-bf8b-92c448803fcc\",\"children\":[{\"html\":\"isNaN([val])\",\"id\":\"48bd07bd-5a87-4d86-a940-27dee829fd48\",\"children\":[],\"zIndex\":96},{\"html\":\"数学运算\",\"id\":\"d73bf817-4c60-44af-9a70-4082d220eb0a\",\"children\":[],\"zIndex\":97},{\"html\":\"在==比较的时候（见== ：2.3）\",\"id\":\"7b0b5e99-cb8f-44f0-9f7b-29559c3b067f\",\"children\":[],\"zIndex\":98}],\"zIndex\":95}],\"zIndex\":91},{\"html\":\"其他类型转换为Boolean\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"0db08cae-524b-453e-aa18-f86334d51f7a\",\"children\":[{\"html\":\"只有“0、NaN、null、undefined、空字符串”五个值会变为布尔的FALSE，其余都是TRUE\",\"id\":\"98bd2b3d-fc29-4d68-8f0e-1daa67573970\",\"children\":[],\"zIndex\":79}],\"zIndex\":78},{\"html\":\"其他类型转换为字符串\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"a0495c36-69de-4b76-a2f2-05735f90994b\",\"children\":[{\"html\":\"1.一般都是直接“”包起来\",\"id\":\"6bbcb805-20b8-4881-b225-7f03b808ad19\",\"children\":[],\"zIndex\":89},{\"html\":\"2.只有{}普通对象toString()是调取的<span style=\\\"color:rgb(119, 195, 134);\\\">Object.prototype.toString()</span>，但它不是转换为字符串，而是<span style=\\\"color:rgb(119, 195, 134);\\\">数据类型检测</span>，返回结果是[object Object]。（<span style=\\\"color:rgb(119, 195, 134);\\\">其他对象也是可以调用的</span>）\",\"id\":\"29248173-b7d4-48f9-a477-c22f892f94a8\",\"children\":[],\"zIndex\":90}],\"zIndex\":88},{\"html\":\"==\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"3a0ae834-99b4-4d65-b308-29a9f9d396e4\",\"children\":[{\"html\":\"1.类型一样\",\"id\":\"0d83de72-b844-41cb-8ed4-b905b5e7ac6a\",\"children\":[{\"html\":\"对象比较的是堆内存的地址\",\"id\":\"cb0f32b7-8ee0-4f53-844b-563ba4af1f8f\",\"children\":[],\"zIndex\":83},{\"html\":\"NaN == NaN&nbsp; =&gt; false\",\"id\":\"0c07dbd7-8b9b-4f71-995d-e68cb0e8265b\",\"children\":[],\"zIndex\":84}],\"zIndex\":81},{\"html\":\"2.类型不一样（会隐式转换为相同的数据类型）\",\"id\":\"783b255e-2264-4e1f-9135-26f9e717c368\",\"children\":[{\"html\":\"1.null==undefined =&gt; true<div>但是换成===结果是false（因为类型不一致）</div><div>剩下的null/undefined和其他任何数据类型值都不相等</div>\",\"id\":\"2014e91c-93da-4093-a4b2-06e6fb0392b7\",\"children\":[],\"zIndex\":85},{\"html\":\"2.字符串==对象&nbsp; 要把对象转换为字符串\",\"id\":\"0514b91b-c0e7-4b26-9999-578024efa867\",\"children\":[],\"zIndex\":86},{\"html\":\"3.剩下的如果==两边数据类型不一致，都是需要转换为Number再进行比较的\",\"id\":\"91ca760f-1084-41be-9a78-cfccef4a8e29\",\"children\":[],\"zIndex\":87}],\"zIndex\":82}],\"zIndex\":80}],\"zIndex\":103},{\"id\":\"dd04bed1-67c3-41ca-b7ec-81e3e85752a0\",\"x\":2014.1738538982459,\"y\":-2910.0035004548354,\"html\":\"parseInt的处理规则\",\"type\":\"mindmap\",\"children\":[{\"html\":\"parseInt([value], [radix])\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"59868e0a-450b-4550-9d9c-b4102ebb61fe\",\"children\":[],\"zIndex\":104},{\"html\":\"radix是一个进制，不写或者写0默认都按照10进制处理。<div>特殊情况：如果value是以0x开头，则默认值不是10而是16</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"fa5efc41-dbc6-4d15-a0f5-12f0a671ac8a\",\"children\":[],\"zIndex\":105},{\"html\":\"radix有取值范围：2～36。如果不在这个区间，则会返回NaN。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"6de683ab-9dc0-4e95-a147-a740ce9985ab\",\"children\":[],\"zIndex\":106},{\"html\":\"作用：把[value]看作[radix]机制，最后把[radix]进制的值转换为十机制。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"1cc2600e-69b7-47ab-9364-dac8c9cf3299\",\"children\":[],\"zIndex\":107},{\"html\":\"执行过程：<div>1.从左向右开始查找[value]中的有效的[radix]进制值，遇到不是有效的立即停止；如果没有找到，则返回NaN。</div><div>2.把查找到的结果转为数字，再把它作为[radix]进制转为十进制。</div>\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"2899be55-c677-4828-9185-023cb9ffc7f4\",\"children\":[],\"zIndex\":110},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"ed6dfe5d-d14d-4e0e-b5a1-b3ad3dc15004\",\"children\":[{\"html\":\"把一个任意进制的值转换为十进制值：<div>(每个位的数*进制^位权值)的和</div><div>位权值：个位从0开始，依次增1；小数点后面的从-1开始，依次减一。</div>\",\"id\":\"ada36261-f187-4582-854b-b1c80f6e5ecc\",\"children\":[],\"zIndex\":109}],\"zIndex\":108}],\"zIndex\":111},{\"id\":\"586fbcfd-1ba9-4b27-9e5f-05a2c4141ae1\",\"x\":2867.8799493504434,\"y\":-2914.512275969836,\"html\":\"变量提升的处理机制\",\"type\":\"mindmap\",\"children\":[{\"html\":\"ES3+：在当前上下文中，JS代码执行之前，浏览器会提前（词法解析的时候）把当前上下文中所有<span style=\\\"color:rgb(228, 130, 212);\\\">带var/function</span>关键字的进行提前的声明或者定义。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"bea45252-ed7b-4ef0-aa34-5c365b92a17f\",\"children\":[],\"zIndex\":112},{\"html\":\"带var声明的变量只提前声明不定义\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"80bb52ec-0274-4b57-bdb2-d8672450a41e\",\"children\":[],\"zIndex\":113},{\"html\":\"函数会提前声明和定义\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"3817f40f-3bdd-4100-8ada-24b38630b4d9\",\"children\":[{\"html\":\"真实项目中建议用函数表达式创建函数，因为这样在变量提升阶段只会声明function，更严谨。\",\"id\":\"b85b09ed-7429-4583-85d5-7ef6dc3f18e1\",\"children\":[],\"zIndex\":117},{\"html\":\"在使用函数表达式创建函数时，一般要把匿名函数具名化。<div>当函数执行，在形成的私有上下文中，会把这个具名化的名字作为变量，值就是这个函数来进行处理。这样做的好处是：<span style=\\\"color:rgb(105, 177, 228);\\\">弥补了在严格模式下不能使用argments.calle调用当前函数。</span></div>\",\"id\":\"ad4c93ca-3165-4625-b3e4-685c8887deed\",\"children\":[],\"zIndex\":118}],\"zIndex\":114},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"e1eff868-9732-417c-84e0-9fd855f74a84\",\"children\":[{\"html\":\"1.基于“var或function”在“全局上下文”中声明的变量（全局变量）会映射到GO（全局对象window）上一份，作为它的属性；而且是同时修改的。\",\"id\":\"4ec71694-0351-4751-b574-34fe7b571446\",\"children\":[],\"zIndex\":116},{\"html\":\"<div>2.不论条件成立，都要进行变量提升<div>当条件中带有var/function时，</div></div><div>老版中会将函数提前声明并且定义</div><div>新版中只会将函数提前声明</div><div>var也会提前声明不定义</div>\",\"id\":\"a599d7d9-4439-4a3b-b71d-2f76ed26c85c\",\"children\":[],\"zIndex\":119}],\"zIndex\":115}],\"zIndex\":120},{\"id\":\"1dca2046-8497-4f05-b115-81852f0b7fac\",\"x\":3046.242779214603,\"y\":-1647.7008922638222,\"html\":\"闭包\",\"type\":\"mindmap\",\"children\":[{\"html\":\"1.函数运行的一种机制：形成一个不被释放的上下文\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"265c167d-a0dc-42c9-b4f6-5ec76d1bda90\",\"children\":[],\"zIndex\":121},{\"html\":\"2.函数执行会形成一个私有上下文EC(FN)，如果上下文中的某些内容(一般指的是堆内存地址)被上下文以外的事物(例如：变量/事件绑定等)所占用，则当前上下文不能被出栈释放(浏览器的垃圾回收机制GC所决定的)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"858dd510-bb77-4e40-891d-4543e5031ff9\",\"children\":[],\"zIndex\":122},{\"html\":\"特点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"af8477d5-4ebf-498f-87e7-9d4e574765e7\",\"children\":[{\"html\":\"保护：保护私有上下文中的“私有变量”和外界互不影响\",\"id\":\"54f34d37-1785-4f9b-a05f-d4169e6ace5b\",\"children\":[],\"zIndex\":124},{\"html\":\"保存：上下文不被释放，那么上下文中的“私有变量”和“值”都会被保存起来，可以供其下级上下文中使用。\",\"id\":\"20380cab-e226-452f-aded-1f195727dcf5\",\"children\":[],\"zIndex\":125}],\"zIndex\":123},{\"html\":\"弊端：如果大量使用闭包，会导致内存溢出或内存泄露。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"827aa6af-6e47-4ec9-a0d3-52764b48eaa3\",\"children\":[],\"zIndex\":126},{\"html\":\"应用场景\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"b46cbfda-ffd7-4ff0-8641-1e430f653486\",\"children\":[{\"html\":\"1.循环事件绑定的N中解决办法\",\"id\":\"819a137a-9a3b-446f-b013-85fe69930b4a\",\"children\":[{\"html\":\"1.利用闭包，创建私有上下文<div>性能不好</div>\",\"id\":\"153fdb2d-542e-4989-9b1f-d36498b940a3\",\"children\":[{\"html\":\"自执行函数function包起来\",\"id\":\"8f6e67f1-0491-44f2-9188-a4e18e2721df\",\"children\":[],\"zIndex\":130},{\"html\":\"let\",\"id\":\"ce886cba-ba2c-4a85-9cd6-951884e9e0a7\",\"children\":[],\"zIndex\":131}],\"zIndex\":129},{\"html\":\"2.自定义属性(与闭包无关)<div>性能好</div>\",\"id\":\"59bbd6b3-67f7-40dd-baa0-38bc1368d074\",\"children\":[],\"zIndex\":132},{\"html\":\"3.事件委托（它们都有一个共同的父元素，冒泡）<div>性能提升40%～60%</div>\",\"id\":\"1c10e55e-cbc9-48b0-b865-d663b2f02159\",\"children\":[],\"zIndex\":133}],\"zIndex\":128}],\"zIndex\":127}],\"zIndex\":134},{\"id\":\"6b5c2568-7f4e-458c-8a4e-4a6eb593dc1c\",\"x\":1976.33793831011,\"y\":-778.975022658044,\"html\":\"JS中声明变量\",\"type\":\"mindmap\",\"children\":[{\"html\":\"传统：var function\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"79f3c1d1-e2bb-4350-8adb-7dd486ce3000\",\"children\":[{\"html\":\"带var的只是提前声明\",\"id\":\"44efc85a-7c90-4463-bb32-3e1cb5c1fec2\",\"children\":[],\"zIndex\":142},{\"html\":\"带function的是声明+定义\",\"id\":\"eff77c0d-9251-4126-ba0c-526ff0bd036d\",\"children\":[],\"zIndex\":143}],\"zIndex\":135},{\"html\":\"ES6+\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"d0339732-669e-4979-a8eb-4e63b94a833e\",\"children\":[{\"html\":\"ES5 - ES2011&nbsp;<div>ES6 - ES2015&nbsp;</div><div>ES2016&nbsp;</div><div>ES2017&nbsp;</div><div>...</div>\",\"id\":\"f7ebf72c-9b6a-4b39-a018-caaa30578fd9\",\"children\":[],\"zIndex\":138},{\"html\":\"let\",\"id\":\"8b58615c-51b7-481b-8b19-0fd6d0e99359\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">声明的变量可以改变引用指向</span>\",\"id\":\"d25f6d89-3223-48fb-871b-a0534862f5a8\",\"children\":[],\"zIndex\":139}],\"zIndex\":137},{\"html\":\"const\",\"id\":\"4c97cef8-2c21-487f-a618-86b66e72d4b1\",\"children\":[{\"html\":\"<span style=\\\"color:rgb(228, 130, 212);\\\">声明的变量不可以改变引用指向</span>，他声明的值叫常量\",\"id\":\"b75c0670-4aa5-401d-ba99-c433d751dd84\",\"children\":[],\"zIndex\":141}],\"zIndex\":140}],\"zIndex\":136},{\"html\":\"let VS var\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"9bdc1d9f-84f4-432a-bad3-ae0e855faf5a\",\"children\":[{\"html\":\"1.var存在变量提升，而let不存在\",\"id\":\"a54ea328-0408-4ead-8550-2e91fda0a894\",\"children\":[],\"zIndex\":145},{\"html\":\"<span style=\\\"color:rgb(228, 132, 132);\\\">2.</span><span style=\\\"color:rgb(228, 132, 132);\\\">【旧版】“全局上下文EC(G)”中，基于var/function声明的变量，也相当于给GO全局对象(window)新增一个属性，并且任何一个发生值的改变，另一个也会跟着改变（映射机制）；</span><div><span style=\\\"color:rgb(228, 132, 132);\\\">【新版】</span><span style=\\\"color:rgb(228, 132, 132);\\\">“全局上下文EC(G)”中，基于var/function声明的变量，只是给全局对象GO设置一个属性；</span><span style=\\\"color:rgb(228, 132, 132);\\\"><br></span><div><span style=\\\"color:rgb(105, 177, 228);\\\">但是基于lei声明的变量，就是全局变量，和GO没有任何的关系。</span></div></div>\",\"id\":\"fa1140b4-9b3b-427a-979d-9e9468dd463a\",\"children\":[{\"html\":\"没有基于任何关键词声明的变量，则相当于给全局对象设置一个属性\",\"id\":\"260a8569-e788-4e8e-bd3d-57769f47b5fc\",\"children\":[],\"zIndex\":147}],\"zIndex\":146},{\"html\":\"3.在相同的上下文中，let不允许重复声明，如果重复声明会报错(词法分析阶段)；而var可以重复声明，浏览器只按声明一次处理\",\"id\":\"ec9744ae-5847-4e74-944a-b2d9efc23767\",\"children\":[],\"zIndex\":148,\"layout\":{\"quadrant\":1}},{\"html\":\"<span style=\\\"color:rgb(105, 177, 228); font-weight:bold;\\\">4.let/const/function会产生块级私有上下文，而var是不会的</span>\",\"id\":\"a7f7fd3c-eb17-4bfc-96a8-dd4ac895b29a\",\"children\":[],\"zIndex\":153}],\"zIndex\":144},{\"html\":\"小知识点\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"99b5f488-cb43-482f-aeb7-1ca4971c736f\",\"children\":[{\"html\":\"词法分析：浏览在执行代码之前，会先把代码解析为浏览器能识别的事物\",\"id\":\"c3395f6b-239b-4543-a913-e39d51a9047a\",\"children\":[],\"zIndex\":150},{\"html\":\"暂时性死区（浏览器暂存的BUG）\",\"id\":\"1b8ab318-1a57-4931-80a9-ba43545b266b\",\"children\":[{\"html\":\"1.基于typeof检测一个未被声明的变量，不会报错，结果是undefined\",\"id\":\"e0e9bbe0-9a2a-461c-bb38-f344dbffc213\",\"children\":[],\"zIndex\":152}],\"zIndex\":151},{\"html\":\"上下文 &amp; 作用域\",\"id\":\"259b605d-7f32-468f-af9b-dc230c4d71a3\",\"children\":[{\"html\":\"全局上下文\",\"id\":\"60fe1681-c8d2-4032-8e05-146e49efa764\",\"children\":[],\"zIndex\":155},{\"html\":\"函数执行形成的“私有上下文”\",\"id\":\"8ad7ba5d-dc97-4fe9-a512-3d7b7d43772a\",\"children\":[],\"zIndex\":156},{\"html\":\"块级作用域（块级私有上下文）\",\"id\":\"33fb2c1b-cc40-4c65-87b9-339e88247ca3\",\"children\":[{\"html\":\"除了对象、函数等的大括号除外（例如：判断体、循环体、代码块...）都有可能会产生块级上下文\",\"id\":\"d7365bba-ac65-47d5-92f3-5fdf50471eee\",\"children\":[],\"zIndex\":158}],\"zIndex\":157}],\"zIndex\":154}],\"zIndex\":149}],\"zIndex\":159},{\"id\":\"2b6647d5-7501-40c7-b24a-2af42d4f1d80\",\"x\":3224.4260039219885,\"y\":-752.6815219819359,\"html\":\"块级上下文\",\"type\":\"mindmap\",\"children\":[{\"html\":\"除函数/对象的大括号外，在其他的大括号中出现let/const/function 则会单独形成块级私有上下文\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"2463084f-5d6f-4afc-81c9-48c143726c2f\",\"children\":[],\"zIndex\":160}],\"zIndex\":161},{\"id\":\"97ab8408-d69f-4080-ac0f-3eaaa781ae45\",\"x\":3223.5822818981683,\"y\":-598.6400544426056,\"html\":\"函数形参默认值\",\"type\":\"mindmap\",\"children\":[{\"html\":\"如果函数应用了形参默认值，并且在函数体中出现了基于var/let/const声明变量的方式，这样除了函数执行，会产生一个私有的上下文之外，还会把函数体及其中的代码当做一个全新的块级上下文。如果这个块级上下文中的变量和函数私有上下文中的变量一致了，则会在块级上下文初始化之前，会把形参变量的值同步给块级上下文中的变量\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"9c8f2b7e-56c2-47a1-b9df-e85c35da883e\",\"children\":[],\"zIndex\":162}],\"zIndex\":163},{\"id\":\"d5954e00-aacc-43cc-9eb2-c6294ca7aa46\",\"x\":2013.3631825544453,\"y\":-4147.225387630226,\"html\":\"闭包剧本🌟\",\"type\":\"mindmap\",\"children\":[{\"html\":\"引言：就像人需要氧气才能生存，闭包也需要在特定的环境下才能存在，闭包携带了它自己的“氧气罐”（引用了当前作用域以外的其他作用域上下文），所以它才存活下来（使上下文不会消失）。\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DFB85D\"},\"id\":\"fcdf01ae-8066-4dbe-a424-c00f59dc280a\",\"children\":[],\"zIndex\":175},{\"html\":\"基本介绍: ECStack、EC、VO、AO、GO、SCOPE、SCOPE-CHAIN、GC\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#A287E1\"},\"id\":\"60b7c46c-ca7f-4b3f-9396-2db05c8e1e5e\",\"children\":[],\"zIndex\":164},{\"html\":\"优缺点：保存和保护、性能消耗（内存泄漏）\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#E48484\"},\"id\":\"cb29cf10-c1b0-487b-bb90-93af243dde80\",\"children\":[],\"zIndex\":165},{\"html\":\"实战应用\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#69B1E4\"},\"id\":\"8587ed97-be45-46bc-bd35-8f9d9dbbe64d\",\"children\":[{\"html\":\"项目实战应用：循环事件绑定(突出：事件委托)、let和var\",\"id\":\"69d08b2c-6ab1-4a9f-bade-bf8efb909bf0\",\"children\":[],\"zIndex\":167},{\"html\":\"插件组件应用：JS高阶编程技巧(单例设计模式、惰性函数、柯理化函数、compose组合函数)\",\"id\":\"efaa7f8c-3eeb-49f1-84bb-a88b621ba442\",\"children\":[],\"zIndex\":168},{\"html\":\"源码阅读应用：Lodash源码(函数的防抖和节流)、JQ的源码、redux、react-redux(高阶组件)...\",\"id\":\"6112fd30-eb39-4da2-8ee3-a4d4baee36b3\",\"children\":[],\"zIndex\":169},{\"html\":\"...\",\"id\":\"c0812e77-5a30-4ab8-b565-ebb7d6253ac9\",\"children\":[],\"zIndex\":170}],\"zIndex\":166},{\"html\":\"自己的思想和理解(一句话概括)\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#DE81C6\"},\"id\":\"5afc0a83-0a2b-4cdd-b605-a16141839cba\",\"children\":[{\"html\":\"其实我觉得闭包这个东西还是很重要的\",\"id\":\"d7e2dffd-8111-4ecd-b022-83b31b0e2905\",\"children\":[],\"zIndex\":172}],\"zIndex\":171},{\"html\":\"小技巧\",\"layout\":{\"quadrant\":1},\"treeEdge\":{\"stroke\":\"#77C386\"},\"id\":\"89d878f9-c202-4d02-b648-3a3b62c6772b\",\"children\":[{\"html\":\"担心自己表达能力：可以自己写一遍文章，详细的介绍闭包（面试的时候，给面试官看，它边看你边简单说一些）\",\"id\":\"9428a725-67c5-40f8-9f24-aba604e164b2\",\"children\":[],\"zIndex\":174}],\"zIndex\":173}],\"zIndex\":176,\"tapered\":false},{\"id\":\"6c0e58ca-1a82-4e47-949e-087c354b99ad\",\"x\":2894.570608794177,\"y\":-4162.194456348563,\"html\":\"简述let和var的区别\",\"type\":\"mindmap\",\"zIndex\":177}]},\"viewportSetting\":{\"zoom\":0.9529882937207227,\"tlCanvasPoint\":[2029.1452253983066,437.08420042418345,1],\"width\":1150,\"height\":792},\"text\":\"数据类型基本类型numberstringundefinednullbooleansymbol引用类型objectarray...functionJS代码执行1.游览器会在内存中开辟一块栈内存，全局上下文（环境），也叫ECStack。2.然后形成全局执行上下文EC(G)（默认就是window/global）供代码执行。创建函数1.单独开辟一个堆内存（16进制地址），函数堆内存中存储的是函数体中的“代码字符串”。2.创建函数的时候，就声明了它的作用域[scope]，也就是所在的上下文环境。3.把16进制的地址存放到栈中，供变量（函数名等）关联引用即可函数执行1.形成一个全新的，私有的上下文EC(...)2.当前私有的上下文中，有一个存放本上下文内声明的变量的地方AO(...)私有变量对象 -> 这里的变量都是当前上下文内的私有变量(当前上下文中声明的变量，形参变量)3.进栈执行4.代码执行之前还要处理很多事情1.初始化作用域链[scope-chain]: <当前自己的上下文，上级上下文(创建函数时形成的作用域)>当前函数的上级上下文是创建函数所在的上下文（作用域）后期函数内代码执行，遇到一个变量，我们首先看是否为自己上下文中的私有变量（看AO中有没有），如果是私有的变量，则当前变量的操作和外界环境中的变量互不干扰（没有直接关系）；如果不是自己的私有变量，则按照作用域链，查找是否为其上级上下文中的私有变量...直到找到EC(G)全局上下文为止 作用域链查找机制2.初始化this...3.初始化arguments...4.形参赋值形参都是私有变量（放到AO中的）如果不传递实参值，默认值是undefined5.变量提升5.代码自上而下执行6.一般情况下， 函数进栈执行的上下文，进栈执行完成后，会默认出栈释放掉（私有上下文中存储的私有变量和一些值都会被释放掉） -> 目的：为了优化内存空间，减少栈内存的消耗，提高页面或者计算机的处理速度...GC：游览器的垃圾回收机制（内存管理）谷歌：基于查找引用游览器的渲染引擎会在空闲的时候（定期一个时间），依次遍历所有的内存：栈/堆堆：当前内存如果被占用（指针关联地址），则不能释放；如果没有任何的事物占用这个堆，则游览器会自动把这个堆内存释放掉。栈：当前上下文中是否有内容（一般是堆内存）被上下文以外的事物所占用，如果被占用则无法释放（闭包），如果没有被占用则释放掉。EC(G)是加载页面的时候创建，只有关闭页面的时候才会被释放。主动释放：把占用的事物手动赋值为null（其余的值也可以，但是null更好，null不占空间的），可以实现内存的手动优化this函数的执行主体（不等价于执行上下文/作用域）：谁把这个函数执行的在游览器端运行JS代码，非函数中的this一般都是window；研究this都是研究函数中的this；有一个特殊的，就是ES6+中“块级上下文”中的this，是其所在上下文中的this（理解为：块级上下文是没有自己this的）；想要分清楚函数执行的执行主体(this)，可以按照如下的规律来分析事件绑定当前元素本身普通函数执行看函数前面是否有点，点前面是谁this就是谁没有点就是window/undefiend(严格模式)自执行函数中的this一般都是window/undefined(严格模式)回调函数中的this一般也是window/undefined(严格模式)，除非做过特殊处理括号包起来的函数执行：如果括号中只有一项，就相当于没有括号；如果括号中有很多项，this就是最后一项     (obj.fn)() -> obj     (a, b, obj.fn)() -> obj构造函数执行所属类的实例箭头函数执行它的上级上下文基于call/apply/bind强制改变this高阶编程技巧利用闭包的机制，实现出来的一些高阶编程方式高级单例设计模式早期的模块化设计思想闭包+单例一个对象就是一个单例模式基于闭包的“保护作用”，防止了全局变量污染惰性函数获取元素样式的小知识点1.dom.style只有获取元素的内联样式2.getComputedStyle  IE6~8不兼容获取经过浏览器计算的样式（返回样式对象）惰性思想：干一次可以搞定的，绝对不去做第二次函数柯理化预先处理的思想形成一个不被释放的闭包，把一些信息储存起来，以后基于作用域链，访问到事先储存的信息，然后进行相关的处理。小知识点命令式编程自己编写代码，管控运行的步骤和逻辑（自己可以灵活掌控执行步骤）函数式编程具体实现的步骤已经被封装成方法，我们只需要调用方法获取结果即可，无需关注怎么实现的，用起来方便，代码量减少弊端：灵活性差curryingcompose数据类型转换其他类型转换为Number能用的办法parseInt/parseFloat([val])把要转换值先转换为字符串从字符串左侧的第一位开始查找有效数字字符，遇到非有效字符串则立即停止，最后把有效的数字字符串转为数字，如果没有则返回NaNNumber只要出现非有效数字字符结果都是NaNNumber(undefined) 是 NaN对象转为数字，应该先valueOf，没有原始值再toString，最后再把字符串转为数字隐式转换（游览器内部默认是先转换为Number再进行计算的）isNaN([val])数学运算在==比较的时候（见== ：2.3）其他类型转换为Boolean只有“0、NaN、null、undefined、空字符串”五个值会变为布尔的FALSE，其余都是TRUE其他类型转换为字符串1.一般都是直接“”包起来2.只有{}普通对象toString()是调取的Object.prototype.toString()，但它不是转换为字符串，而是数据类型检测，返回结果是[object Object]。（其他对象也是可以调用的）==1.类型一样对象比较的是堆内存的地址NaN == NaN  => false2.类型不一样（会隐式转换为相同的数据类型）1.null==undefined => true但是换成===结果是false（因为类型不一致）剩下的null/undefined和其他任何数据类型值都不相等2.字符串==对象  要把对象转换为字符串3.剩下的如果==两边数据类型不一致，都是需要转换为Number再进行比较的parseInt的处理规则parseInt([value], [radix])radix是一个进制，不写或者写0默认都按照10进制处理。特殊情况：如果value是以0x开头，则默认值不是10而是16radix有取值范围：2～36。如果不在这个区间，则会返回NaN。作用：把[value]看作[radix]机制，最后把[radix]进制的值转换为十机制。执行过程：1.从左向右开始查找[value]中的有效的[radix]进制值，遇到不是有效的立即停止；如果没有找到，则返回NaN。2.把查找到的结果转为数字，再把它作为[radix]进制转为十进制。小知识点把一个任意进制的值转换为十进制值：(每个位的数*进制^位权值)的和位权值：个位从0开始，依次增1；小数点后面的从-1开始，依次减一。变量提升的处理机制ES3+：在当前上下文中，JS代码执行之前，浏览器会提前（词法解析的时候）把当前上下文中所有带var/function关键字的进行提前的声明或者定义。带var声明的变量只提前声明不定义函数会提前声明和定义真实项目中建议用函数表达式创建函数，因为这样在变量提升阶段只会声明function，更严谨。在使用函数表达式创建函数时，一般要把匿名函数具名化。当函数执行，在形成的私有上下文中，会把这个具名化的名字作为变量，值就是这个函数来进行处理。这样做的好处是：弥补了在严格模式下不能使用argments.calle调用当前函数。小知识点1.基于“var或function”在“全局上下文”中声明的变量（全局变量）会映射到GO（全局对象window）上一份，作为它的属性；而且是同时修改的。2.不论条件成立，都要进行变量提升当条件中带有var/function时，老版中会将函数提前声明并且定义新版中只会将函数提前声明var也会提前声明不定义闭包1.函数运行的一种机制：形成一个不被释放的上下文2.函数执行会形成一个私有上下文EC(FN)，如果上下文中的某些内容(一般指的是堆内存地址)被上下文以外的事物(例如：变量/事件绑定等)所占用，则当前上下文不能被出栈释放(浏览器的垃圾回收机制GC所决定的)特点保护：保护私有上下文中的“私有变量”和外界互不影响保存：上下文不被释放，那么上下文中的“私有变量”和“值”都会被保存起来，可以供其下级上下文中使用。弊端：如果大量使用闭包，会导致内存溢出或内存泄露。应用场景1.循环事件绑定的N中解决办法1.利用闭包，创建私有上下文性能不好自执行函数function包起来let2.自定义属性(与闭包无关)性能好3.事件委托（它们都有一个共同的父元素，冒泡）性能提升40%～60%JS中声明变量传统：var function带var的只是提前声明带function的是声明+定义ES6+ES5 - ES2011 ES6 - ES2015 ES2016 ES2017 ...let声明的变量可以改变引用指向const声明的变量不可以改变引用指向，他声明的值叫常量let VS var1.var存在变量提升，而let不存在2.【旧版】“全局上下文EC(G)”中，基于var/function声明的变量，也相当于给GO全局对象(window)新增一个属性，并且任何一个发生值的改变，另一个也会跟着改变（映射机制）；【新版】“全局上下文EC(G)”中，基于var/function声明的变量，只是给全局对象GO设置一个属性；但是基于lei声明的变量，就是全局变量，和GO没有任何的关系。没有基于任何关键词声明的变量，则相当于给全局对象设置一个属性3.在相同的上下文中，let不允许重复声明，如果重复声明会报错(词法分析阶段)；而var可以重复声明，浏览器只按声明一次处理4.let/const/function会产生块级私有上下文，而var是不会的小知识点词法分析：浏览在执行代码之前，会先把代码解析为浏览器能识别的事物暂时性死区（浏览器暂存的BUG）1.基于typeof检测一个未被声明的变量，不会报错，结果是undefined上下文 & 作用域全局上下文函数执行形成的“私有上下文”块级作用域（块级私有上下文）除了对象、函数等的大括号除外（例如：判断体、循环体、代码块...）都有可能会产生块级上下文块级上下文除函数/对象的大括号外，在其他的大括号中出现let/const/function 则会单独形成块级私有上下文函数形参默认值如果函数应用了形参默认值，并且在函数体中出现了基于var/let/const声明变量的方式，这样除了函数执行，会产生一个私有的上下文之外，还会把函数体及其中的代码当做一个全新的块级上下文。如果这个块级上下文中的变量和函数私有上下文中的变量一致了，则会在块级上下文初始化之前，会把形参变量的值同步给块级上下文中的变量闭包剧本🌟引言：就像人需要氧气才能生存，闭包也需要在特定的环境下才能存在，闭包携带了它自己的“氧气罐”（引用了当前作用域以外的其他作用域上下文），所以它才存活下来（使上下文不会消失）。基本介绍: ECStack、EC、VO、AO、GO、SCOPE、SCOPE-CHAIN、GC优缺点：保存和保护、性能消耗（内存泄漏）实战应用项目实战应用：循环事件绑定(突出：事件委托)、let和var插件组件应用：JS高阶编程技巧(单例设计模式、惰性函数、柯理化函数、compose组合函数)源码阅读应用：Lodash源码(函数的防抖和节流)、JQ的源码、redux、react-redux(高阶组件)......自己的思想和理解(一句话概括)其实我觉得闭包这个东西还是很重要的小技巧担心自己表达能力：可以自己写一遍文章，详细的介绍闭包（面试的时候，给面试官看，它边看你边简单说一些）简述let和var的区别\"}",
    "body_html": "",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-12-06T03:18:47.000Z",
    "deleted_at": null,
    "created_at": "2020-10-29T05:24:13.000Z",
    "updated_at": "2022-03-25T07:33:56.000Z",
    "published_at": "2020-11-29T10:51:04.000Z",
    "first_published_at": "2020-10-30T12:53:38.000Z",
    "word_count": 0,
    "cover": "https://cdn.nlark.com/yuque/0/2020/png/1429353/1606647064256-2c37ff18-4101-475c-9d3d-0ff0e7f59bec.png",
    "description": "",
    "custom_description": null,
    "hits": 57,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 7795559,
    "slug": "uxhzaq",
    "title": "未来的路",
    "book_id": 1103347,
    "book": {
      "id": 1103347,
      "type": "Book",
      "slug": "cqu234",
      "name": "学习笔记",
      "user_id": 1429353,
      "description": "点滴学习，随时记录",
      "creator_id": 1429353,
      "public": 1,
      "items_count": 13,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-03-31T07:09:41.961Z",
      "updated_at": "2022-03-31T07:09:42.000Z",
      "created_at": "2020-05-28T16:14:08.000Z",
      "namespace": "resonance/cqu234",
      "user": {
        "id": 1429353,
        "type": "User",
        "login": "resonance",
        "name": "木木",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
        "books_count": 5,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-05-14T02:37:55.000Z",
        "updated_at": "2022-03-25T12:15:35.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 1429353,
    "creator": {
      "id": 1429353,
      "type": "User",
      "login": "resonance",
      "name": "木木",
      "description": "",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1429353/1646876407360-avatar/8aed6440-452d-4c26-8825-6a1369f093a3.png",
      "books_count": 5,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-05-14T02:37:55.000Z",
      "updated_at": "2022-03-25T12:15:35.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"TvcFX\"></a>\n## 面试\n1. 先达到P6再考虑其他岗位\n1. 根据自己的喜欢选择P6之后要做什么\n1. 先长高、再长胖、最后锻炼为型男。\n1. 读书、读书、读书、读书，目的：锻炼学习能力。\n1. 不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。\n1. 自我介绍不要打磕。\n1. 面试是场修行，是在任何地方都学不到的。\n1. 面试十家左右，即使不去。\n1. 以面养面，做好面试总结。\n1. 面试录音，写成文字稿，重新规划话术。\n1. 今日事今日毕。\n1. 把自己当作一个导演，把面试问答写成剧本，背下来！\n1. 携带自己的思想、见解、经验。\n1. 把每一次面试当做一次演讲。\n1. 任何事情都有三种解决办法，只要心态好。\n<a name=\"zjYg3\"></a>\n## 离职原因\n\n1. 不要说上家公司的坏话。\n<a name=\"d7MLc\"></a>\n## 学习计划\n\n1. 温故而知新，可以为师矣<br />a. 养成写笔记、写博客的习惯<br />b. 经常复习之前的内容<br />c. 养成项目总结的习惯\n1. 多练习：敲代码的数量和薪资成正比\n1. 多思考：学而不思则罔、思而不学则殆\n1. 纵向横向发展<br />a. 知其然而知其所以然<br />b. 研究源码<br />c. 多参与开源和讨论<br />d. 多接触一些非技术类的东西\n\n",
    "body_draft": "<a name=\"TvcFX\"></a>\n## 面试\n1. 先达到P6再考虑其他岗位\n1. 根据自己的喜欢选择P6之后要做什么\n1. 先长高、再长胖、最后锻炼为型男。\n1. 读书、读书、读书、读书，目的：锻炼学习能力。\n1. 不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。\n1. 自我介绍不要打磕。\n1. 面试是场修行，是在任何地方都学不到的。\n1. 面试十家左右，即使不去。\n1. 以面养面，做好面试总结。\n1. 面试录音，写成文字稿，重新规划话术。\n1. 今日事今日毕。\n1. 把自己当作一个导演，把面试问答写成剧本，背下来！\n1. 携带自己的思想、见解、经验。\n1. 把每一次面试当做一次演讲。\n1. 任何事情都有三种解决办法，只要心态好。\n<a name=\"zjYg3\"></a>\n## 离职原因\n\n1. 不要说上家公司的坏话。\n<a name=\"d7MLc\"></a>\n## 学习计划\n\n1. 温故而知新，可以为师矣<br />a. 养成写笔记、写博客的习惯<br />b. 经常复习之前的内容<br />c. 养成项目总结的习惯\n1. 多练习：敲代码的数量和薪资成正比\n1. 多思考：学而不思则罔、思而不学则殆\n1. 纵向横向发展<br />a. 知其然而知其所以然<br />b. 研究源码<br />c. 多参与开源和讨论<br />d. 多接触一些非技术类的东西\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B1%2C2%2C0%2C16%5D%2C%5B1%2C2%2C0%2C16%5D%5D%2C%22active%22%3Atrue%7D\"><h2 data-lake-id=\"e89947f2d1a6d91faaa59d7eab4774ea\" id=\"TvcFX\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">面试</h2><ol data-lake-id=\"63193f5e913d7bc73c15cd69c85cd472\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"5057fe93242cc1d4bf3392bd3fb0207d\">先达到P6再考虑其他岗位</li><li data-lake-id=\"9c466748ac54f9cc82a202d3c6f38c09\">根据自己的喜欢选择P6之后要做什么</li><li data-lake-id=\"106da395dae3e38220c2718920193ecb\">先长高、再长胖、最后锻炼为型男。</li><li data-lake-id=\"66219e4396b6b85de2b36afffba49a90\">读书、读书、读书、读书，目的：锻炼学习能力。</li><li data-lake-id=\"f3b1d7d670aace828d2753c4f12cf142\">不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。</li><li data-lake-id=\"552d022f7ff14073faf3d567d6266021\">自我介绍不要打磕。</li><li data-lake-id=\"3beb3ae44285ef9d07eff08922a0f4eb\">面试是场修行，是在任何地方都学不到的。</li><li data-lake-id=\"b1abf8980e6379fdc97d18c525c4f252\">面试十家左右，即使不去。</li><li data-lake-id=\"c404123030d66a59615e40bc48cfad47\">以面养面，做好面试总结。</li><li data-lake-id=\"614974efd30a2005b6d2049e0beb192e\">面试录音，写成文字稿，重新规划话术。</li><li data-lake-id=\"efb4ad17c2f9cc8fa170d3a229b52ee9\">今日事今日毕。</li><li data-lake-id=\"9408b3203689e3f180ab13be62dba27b\"><span>把自己当作一个导演，</span>把面试问答写成剧本，背下来！</li><li data-lake-id=\"3190cd4ac6681f918627573a580a1cff\">携带自己的思想、见解、经验。</li><li data-lake-id=\"07c94d8b22bd495587b4c43d82309e7d\">把每一次面试当做一次演讲。</li><li data-lake-id=\"685071b7def607375e8b8ce22b2e377f\"><span>任何事情都有三种解决办法，只要心态好。</span></li></ol><h2 data-lake-id=\"a2ade1b97a559e4feb67049e035750e6\" id=\"zjYg3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">离职原因</h2><ol start=\"1\" data-lake-id=\"a6912a5e8ddd9bc0cade9bc8b095c4a4\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"0f127c6acc432b2f2b18d289dffe1946\">不要说上家公司的坏话。</li></ol><h2 data-lake-id=\"9653bd20ec4c549d1b74374bc6b04831\" id=\"d7MLc\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">学习计划</h2><ol start=\"1\" data-lake-id=\"cbdfa04fc61624a813eb4ffcce85dbc5\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"95c55b6c4e4510adb8a1ae21496dc921\">温故而知新，可以为师矣<br>a. 养成写笔记、写博客的习惯<br>b. 经常复习之前的内容<br>c. 养成项目总结的习惯</li><li data-lake-id=\"2c51925bd0c5015e96288b94500f8e4b\">多练习：敲代码的数量和薪资成正比</li><li data-lake-id=\"56523e1de11bc77abcca6d0fab97ecba\">多思考：学而不思则罔、思而不学则殆</li><li data-lake-id=\"88dac4da757023041c1b55465e76b578\">纵向横向发展<br>a. 知其然而知其所以然<br>b. 研究源码<br>c. 多参与开源和讨论<br>d. 多接触一些非技术类的东西</li></ol><p data-lake-id=\"0ab462775e0f856b586fb91d8cf74f41\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h2 data-lake-id=\"e89947f2d1a6d91faaa59d7eab4774ea\" id=\"TvcFX\">面试</h2><ol data-lake-id=\"63193f5e913d7bc73c15cd69c85cd472\" start=\"1\"><li data-lake-id=\"5057fe93242cc1d4bf3392bd3fb0207d\">先达到P6再考虑其他岗位</li><li data-lake-id=\"9c466748ac54f9cc82a202d3c6f38c09\">根据自己的喜欢选择P6之后要做什么</li><li data-lake-id=\"106da395dae3e38220c2718920193ecb\">先长高、再长胖、最后锻炼为型男。</li><li data-lake-id=\"66219e4396b6b85de2b36afffba49a90\">读书、读书、读书、读书，目的：锻炼学习能力。</li><li data-lake-id=\"f3b1d7d670aace828d2753c4f12cf142\">不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。</li><li data-lake-id=\"552d022f7ff14073faf3d567d6266021\">自我介绍不要打磕。</li><li data-lake-id=\"3beb3ae44285ef9d07eff08922a0f4eb\">面试是场修行，是在任何地方都学不到的。</li><li data-lake-id=\"b1abf8980e6379fdc97d18c525c4f252\">面试十家左右，即使不去。</li><li data-lake-id=\"c404123030d66a59615e40bc48cfad47\">以面养面，做好面试总结。</li><li data-lake-id=\"614974efd30a2005b6d2049e0beb192e\">面试录音，写成文字稿，重新规划话术。</li><li data-lake-id=\"efb4ad17c2f9cc8fa170d3a229b52ee9\">今日事今日毕。</li><li data-lake-id=\"9408b3203689e3f180ab13be62dba27b\"><span>把自己当作一个导演，</span>把面试问答写成剧本，背下来！</li><li data-lake-id=\"3190cd4ac6681f918627573a580a1cff\">携带自己的思想、见解、经验。</li><li data-lake-id=\"07c94d8b22bd495587b4c43d82309e7d\">把每一次面试当做一次演讲。</li><li data-lake-id=\"685071b7def607375e8b8ce22b2e377f\"><span>任何事情都有三种解决办法，只要心态好。</span></li></ol><h2 data-lake-id=\"a2ade1b97a559e4feb67049e035750e6\" id=\"zjYg3\">离职原因</h2><ol start=\"1\" data-lake-id=\"a6912a5e8ddd9bc0cade9bc8b095c4a4\"><li data-lake-id=\"0f127c6acc432b2f2b18d289dffe1946\">不要说上家公司的坏话。</li></ol><h2 data-lake-id=\"9653bd20ec4c549d1b74374bc6b04831\" id=\"d7MLc\">学习计划</h2><ol start=\"1\" data-lake-id=\"cbdfa04fc61624a813eb4ffcce85dbc5\"><li data-lake-id=\"95c55b6c4e4510adb8a1ae21496dc921\">温故而知新，可以为师矣<br />a. 养成写笔记、写博客的习惯<br />b. 经常复习之前的内容<br />c. 养成项目总结的习惯</li><li data-lake-id=\"2c51925bd0c5015e96288b94500f8e4b\">多练习：敲代码的数量和薪资成正比</li><li data-lake-id=\"56523e1de11bc77abcca6d0fab97ecba\">多思考：学而不思则罔、思而不学则殆</li><li data-lake-id=\"88dac4da757023041c1b55465e76b578\">纵向横向发展<br />a. 知其然而知其所以然<br />b. 研究源码<br />c. 多参与开源和讨论<br />d. 多接触一些非技术类的东西</li></ol><p data-lake-id=\"0ab462775e0f856b586fb91d8cf74f41\"><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h2 data-lake-id=\"e89947f2d1a6d91faaa59d7eab4774ea\" id=\"TvcFX\">面试</h2><ol data-lake-id=\"63193f5e913d7bc73c15cd69c85cd472\" start=\"1\"><li data-lake-id=\"5057fe93242cc1d4bf3392bd3fb0207d\">先达到P6再考虑其他岗位</li><li data-lake-id=\"9c466748ac54f9cc82a202d3c6f38c09\">根据自己的喜欢选择P6之后要做什么</li><li data-lake-id=\"106da395dae3e38220c2718920193ecb\">先长高、再长胖、最后锻炼为型男。</li><li data-lake-id=\"66219e4396b6b85de2b36afffba49a90\">读书、读书、读书、读书，目的：锻炼学习能力。</li><li data-lake-id=\"f3b1d7d670aace828d2753c4f12cf142\">不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。</li><li data-lake-id=\"552d022f7ff14073faf3d567d6266021\">自我介绍不要打磕。</li><li data-lake-id=\"3beb3ae44285ef9d07eff08922a0f4eb\">面试是场修行，是在任何地方都学不到的。</li><li data-lake-id=\"b1abf8980e6379fdc97d18c525c4f252\">面试十家左右，即使不去。</li><li data-lake-id=\"c404123030d66a59615e40bc48cfad47\">以面养面，做好面试总结。</li><li data-lake-id=\"614974efd30a2005b6d2049e0beb192e\">面试录音，写成文字稿，重新规划话术。</li><li data-lake-id=\"efb4ad17c2f9cc8fa170d3a229b52ee9\">今日事今日毕。</li><li data-lake-id=\"9408b3203689e3f180ab13be62dba27b\"><span>把自己当作一个导演，</span>把面试问答写成剧本，背下来！</li><li data-lake-id=\"3190cd4ac6681f918627573a580a1cff\">携带自己的思想、见解、经验。</li><li data-lake-id=\"07c94d8b22bd495587b4c43d82309e7d\">把每一次面试当做一次演讲。</li><li data-lake-id=\"685071b7def607375e8b8ce22b2e377f\"><span>任何事情都有三种解决办法，只要心态好。</span></li></ol><h2 data-lake-id=\"a2ade1b97a559e4feb67049e035750e6\" id=\"zjYg3\">离职原因</h2><ol start=\"1\" data-lake-id=\"a6912a5e8ddd9bc0cade9bc8b095c4a4\"><li data-lake-id=\"0f127c6acc432b2f2b18d289dffe1946\">不要说上家公司的坏话。</li></ol><h2 data-lake-id=\"9653bd20ec4c549d1b74374bc6b04831\" id=\"d7MLc\">学习计划</h2><ol start=\"1\" data-lake-id=\"cbdfa04fc61624a813eb4ffcce85dbc5\"><li data-lake-id=\"95c55b6c4e4510adb8a1ae21496dc921\">温故而知新，可以为师矣<br />a. 养成写笔记、写博客的习惯<br />b. 经常复习之前的内容<br />c. 养成项目总结的习惯</li><li data-lake-id=\"2c51925bd0c5015e96288b94500f8e4b\">多练习：敲代码的数量和薪资成正比</li><li data-lake-id=\"56523e1de11bc77abcca6d0fab97ecba\">多思考：学而不思则罔、思而不学则殆</li><li data-lake-id=\"88dac4da757023041c1b55465e76b578\">纵向横向发展<br />a. 知其然而知其所以然<br />b. 研究源码<br />c. 多参与开源和讨论<br />d. 多接触一些非技术类的东西</li></ol><p data-lake-id=\"0ab462775e0f856b586fb91d8cf74f41\"><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-10-25T09:21:39.000Z",
    "deleted_at": null,
    "created_at": "2020-06-02T12:10:59.000Z",
    "updated_at": "2020-10-25T09:21:43.000Z",
    "published_at": "2020-10-25T09:21:42.000Z",
    "first_published_at": "2020-06-04T11:54:58.000Z",
    "word_count": 391,
    "cover": null,
    "description": "面试先达到P6再考虑其他岗位根据自己的喜欢选择P6之后要做什么先长高、再长胖、最后锻炼为型男。读书、读书、读书、读书，目的：锻炼学习能力。不要写中规中矩的简历，要按照一定的维度写。只要简历写的好，面试基本上都会过。自我介绍不要打磕。面试是场修行，是在任何地方都学不到的。面试十家左右，即使不去。...",
    "custom_description": null,
    "hits": 9,
    "_serializer": "v2.doc_detail"
  }
]